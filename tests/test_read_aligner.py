#
#1;3201;0c This file is part of khmer, http://github.com/ged-lab/khmer/, and is
# Copyright (C) Michigan State University, 2009-2013. It is licensed under
# the three-clause BSD license; see doc/LICENSE.txt. Contact: ctb@msu.edu
#
import khmer
from nose.tools import assert_almost_equals, eq_

def test_alignnocov():
   ch = khmer.new_counting_hash(10, 1048576, 1)
   read = "ACCTAGGTTCGACATGTACC"
   aligner = khmer.new_readaligner(ch, 0, 0)
   for i in range(20):
      ch.consume("AGAGGGAAAGCTAGGTTCGACAAGTCCTTGACAGAT")
   ch.consume("ACCTAGGTTCGACATGTACC")
   score, graphAlign, readAlign, trunc = aligner.align(read)

   # should be the same
   eq_(readAlign, 'ACCTAGGTTCGACATGTACC')
   eq_(graphAlign, 'ACCTAGGTTCGACATGTACC')

def test_simple_readalign():
   ch = khmer.new_counting_hash(10, 1048576, 1)
   aligner = khmer.new_readaligner(ch, 2, 0)
   for i in range(20):
      ch.consume("AGAGGGAAAGCTAGGTTCGACATGTCCTTGACAGAT")
   read =                "ACCTAGGTTCGACAAGTACC"
   #                      ^^            ^  ^
   ch.consume("GCTTTTAAAAAGGTTCGACAAAGGCCCGGG")
   # CCCGGGCCTTTGTCGAACCTTTTTAAAAGC

   score, graphAlign, readAlign, trunc = aligner.align(read)

#                        AGCTAGGTTCGACAAGT CCT
#                        ACCTAGGTTCGACAAGTaCC
   eq_(graphAlign, 'AGCTAGGTTCGACATGT-CC')
   eq_(readAlign,  'ACCTAGGTTCGACAAGTaCC')

def test_readalign():
   ch = khmer.new_counting_hash(10, 1048576, 1)
   aligner = khmer.new_readaligner(ch, 1, 0)
   for i in range(20):
      ch.consume("AGAGGGAAAGCTAGGTTCGACAAGTCCTTGACAGAT")
   read =                "ACCTAGGTTCGACATGTACC"
   #                      ^^            ^  ^
      
   ch.consume("GCTTTTAAAAAGGTTCGACAAAGGCCCGGG")


   score, graphAlign, readAlign, trunc = aligner.align(read)

   eq_(readAlign,  'ACCTAGGTTCGACATGTACc')
   eq_(graphAlign, 'AGCTAGGTTCGACAAGTCC-')


ht_seqs = ["TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC","TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTATTGCAATCTTAACAACCTCTTTAC", "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGAAAAATGTCATCCTGTATTGCAATCTTAACAACCTCTTTAC"]

queries = [ 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "score" : 278.376028204, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
        "score" : 271.753976385, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "score" : 276.416710585, 
        "graph_aln" : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln" : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TAAATGCGCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "score" : 269.794658765, 
        "graph_aln" : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln" : "TAAATGCGCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "score" : 97.5386525659, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTAGATGTTTGATTATCAA", 
        "score" : 90.9166007464, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTAGATGTTTGATTATCAA", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTATTGATTATCAA", 
        "score" : 92.9385894977, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGT-TTGATTATCAA", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTaTTGATTATCAA", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATTGTTTGATTATCAA", 
        "score" : 84.3383420486, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATAtGTTTGATTATCAA", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATT-GTTTGATTATCAA", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTATTGATTATCAA", 
        "score" : 92.9385894977, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGT-TTGATTATCAA", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTaTTGATTATCAA", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTATAGATTATCAA", 
        "score" : 86.3165376783, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGT-TTGATTATCAA", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTaTAGATTATCAA", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATAATTTTGCCGCTTTAACTGGGTCTAGTTTCTACTGCAAACTTTCCACCAACTAGTTTTTCTGCATCCTTTGTTGCAATCTTAACAACCTCTTTAC", 
        "score" : 236.115256507, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAaTT-TtGCCGCTTTAACTGGGTCT-GTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATAA-TTtT-GCCGCTTTAACTGGGTCTaGTTTCTACTGCAAACTTTCCACCAACTAGTTTTTCTGCATCCTTTGTTGCAATCTTAACAACCTCTTTAC", 
        "truncated" : False 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGAAAATAATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 
        "score" : 44.7543247314, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATatgtt", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTAT-----", 
        "truncated" : True 
    }, 
    { 
        "seq" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGAAAAATGTCATCCTGTATTGCAATCTTAACAACCTCTTTAC",
        "score" : 227.446444943, 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTtTTTCTG-CATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGA-AAAATGtCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
        "truncated" : False 
    } 
]

def test_readalign_new():
   ch = khmer.new_counting_hash(32, 1048576, 1)
   aligner = khmer.new_readaligner(ch)
   for seq in ht_seqs:
      ch.consume(seq)

   for query in queries:
      score, graphAlign, readAlign, trunc = aligner.align(query["seq"])
      eq_(graphAlign, query["graph_aln"])
      eq_(readAlign, query["read_aln"])
      eq_(trunc, query["truncated"])
      assert_almost_equals(score, query["score"])

