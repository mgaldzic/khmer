#
#1;3201;0c This file is part of khmer, http://github.com/ged-lab/khmer/, and is
# Copyright (C) Michigan State University, 2009-2013. It is licensed under
# the three-clause BSD license; see doc/LICENSE.txt. Contact: ctb@msu.edu
#
import khmer
import sys
from nose.tools import assert_almost_equals, eq_


## DISABLING TESTS until model probabilities are finalized
"""def eq_(v1, v2):
   print >>sys.stderr, v1
   print >>sys.stderr, v2
   return True
"""
def test_alignnocov():
   ch = khmer.new_counting_hash(10, 1048576, 1)
   read = "ACCTAGGTTCGACATGTACC"
   aligner = khmer.new_readaligner(ch, 0, 0)
   for i in range(20):
      ch.consume("AGAGGGAAAGCTAGGTTCGACAAGTCCTTGACAGAT")
   ch.consume("ACCTAGGTTCGACATGTACC")
   score, graphAlign, readAlign, trunc = aligner.align(read)

   # should be the same
   eq_(readAlign, 'ACCTAGGTTCGACATGTACC')
   eq_(graphAlign, 'ACCTAGGTTCGACATGTACC')


ht_seqs = [
"TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
"TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC",
"TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
"TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGAAAAATGTCATCCTGTATTGCAATCTTAACAACCTCTTTAC"]

queries = [ 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC",  
        "score"     : 256.559287627,
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
        "score"     : 251.981858799, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "graph_aln" : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln"  : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "score"     : 254.767449746, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TAAATGCGCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "graph_aln" : "TAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln"  : "TAAATGCGCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "score"     : 250.190020918, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "score"     : 91.1300479953, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTAGATGTTTGATTATCAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAA", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTAGATGTTTGATTATCAA", 
        "score"     : 86.5526191672, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTATTGATTATCAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGT-TTGATTATCAA", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTaTTGATTATCAA", 
        "score"     : 88.9152687581, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATTGTTTGATTATCAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATaTGTTTGATTATCAA", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTAT-TGTTTGATTATCAA", 
        "score"     : 87.1045528676, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTATTGATTATCAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGT-TTGATTATCAA", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTaTTGATTATCAA",  
        "score"     : 88.9152687581, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTATAGATTATCAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGT-TTGATTATCAA", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTaTAGATTATCAA",  
        "score"     : 84.33783993, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATAATTTTGCCGCTTTAACTGGGTCTAGTTTCTACTGCAAACTTTCCACCAACTAGTTTTTCTGCATCCTTTGTTGCAATCTTAACAACCTCTTTAC", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATcAATTTTGCCGCTTTAACTGGGTCT-GTTTCTACTGCAAACTTTCCACCAACAAGTTTTTCTGCATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTAT-AATTTTGCCGCTTTAACTGGGTCTaGTTTCTACTGCAAACTTTCCACCAACTAGTTTTTCTGCATCCTTTGTTGCAATCTTAACAACCTCTTTAC",  
        "score"     : 241.145205027, 
        "truncated" : False 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGAAAATAATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATcAATT",
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGAAAAT-AATT", 
        "score"     : 81.570549799, 
        "truncated" : True 
    }, 
    { 
        "seq"       : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGAAAAATGTCATCCTGTATTGCAATCTTAACAACCTCTTTAC",
        "graph_aln" : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGTtTTTCTG-CATCCTGTGTTGCAATCTTAACAACCTCTTTAC", 
        "read_aln"  : "TTAAATGCCCAATTTTTCCCTCTTTTCTTCTATATGTTTGATTATCAATTTTGCCGCTTTAACTGGGTCTGTTTCTACTGCAAACTTTCCACCAACAAGA-AAAATGtCATCCTGTATTGCAATCTTAACAACCTCTTTAC", 
        "score"     : 222.835489715, 
        "truncated" : False 
    } 
]

def test_readalign_new():
   ch = khmer.new_counting_hash(32, 1048576, 1)
   aligner = khmer.new_readaligner(ch, 2, 1)
   for seq in ht_seqs:
      ch.consume(seq)

   for query in queries:
      score, graphAlign, readAlign, trunc = aligner.align(query["seq"])

      eq_(graphAlign, query["graph_aln"])
      eq_(readAlign, query["read_aln"])
      eq_(trunc, query["truncated"])
      assert_almost_equals(score, query["score"])

