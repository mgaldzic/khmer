/* Generated by Cython 0.15.1 on Thu Sep 29 17:37:47 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif

#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__khmer___khmer
#define __PYX_HAVE_API__khmer___khmer
#include <utility>
#include <map>
#include <set>
#include <vector>
#include "string.h"
#include "stdlib.h"
#include "../lib/storage.hh"
#include "string"
#include "../lib/ktable.hh"
#include "../lib/hashtable.hh"
#include "../lib/counting.hh"
#include "../lib/subset.hh"
#include "../lib/hashbits.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_khmermodule.pyx",
};

/* "_khmermodule.pyx":9
 * from cython.operator cimport dereference as deref, preincrement as inc
 * 
 * ctypedef unsigned char WordLength             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long int HashIntoType
 * ctypedef unsigned long long int ExactCounterType
 */
typedef unsigned char __pyx_t_5khmer_6_khmer_WordLength;

/* "_khmermodule.pyx":10
 * 
 * ctypedef unsigned char WordLength
 * ctypedef unsigned long long int HashIntoType             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long int ExactCounterType
 * ctypedef unsigned short int BoundedCounterType
 */
typedef unsigned PY_LONG_LONG __pyx_t_5khmer_6_khmer_HashIntoType;

/* "_khmermodule.pyx":11
 * ctypedef unsigned char WordLength
 * ctypedef unsigned long long int HashIntoType
 * ctypedef unsigned long long int ExactCounterType             # <<<<<<<<<<<<<<
 * ctypedef unsigned short int BoundedCounterType
 * ctypedef unsigned char Byte
 */
typedef unsigned PY_LONG_LONG __pyx_t_5khmer_6_khmer_ExactCounterType;

/* "_khmermodule.pyx":12
 * ctypedef unsigned long long int HashIntoType
 * ctypedef unsigned long long int ExactCounterType
 * ctypedef unsigned short int BoundedCounterType             # <<<<<<<<<<<<<<
 * ctypedef unsigned char Byte
 * ctypedef unsigned int IntersectionID
 */
typedef unsigned short __pyx_t_5khmer_6_khmer_BoundedCounterType;

/* "_khmermodule.pyx":13
 * ctypedef unsigned long long int ExactCounterType
 * ctypedef unsigned short int BoundedCounterType
 * ctypedef unsigned char Byte             # <<<<<<<<<<<<<<
 * ctypedef unsigned int IntersectionID
 * ctypedef unsigned int PartitionID
 */
typedef unsigned char __pyx_t_5khmer_6_khmer_Byte;

/* "_khmermodule.pyx":14
 * ctypedef unsigned short int BoundedCounterType
 * ctypedef unsigned char Byte
 * ctypedef unsigned int IntersectionID             # <<<<<<<<<<<<<<
 * ctypedef unsigned int PartitionID
 * 
 */
typedef unsigned int __pyx_t_5khmer_6_khmer_IntersectionID;

/* "_khmermodule.pyx":15
 * ctypedef unsigned char Byte
 * ctypedef unsigned int IntersectionID
 * ctypedef unsigned int PartitionID             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
typedef unsigned int __pyx_t_5khmer_6_khmer_PartitionID;

/*--- Type declarations ---*/
struct __pyx_obj_5khmer_6_khmer__pre_partition_info;
struct __pyx_obj_5khmer_6_khmer__new_counting_hash;
struct __pyx_obj_5khmer_6_khmer_new_readmask;
struct __pyx_obj_5khmer_6_khmer__new_subsetpartition;
struct __pyx_obj_5khmer_6_khmer__new_hashbits;
struct __pyx_obj_5khmer_6_khmer_new_minmax;
struct __pyx_obj_5khmer_6_khmer_new_ktable;

/* "_khmermodule.pyx":20
 *    ctypedef char* const_char_ptr "const char*"
 * 
 * ctypedef void (*CallbackFn)(const_char_ptr info,             # <<<<<<<<<<<<<<
 *                             void* callback_data,
 *                             unsigned long long n_reads,
 */
typedef void (*__pyx_t_5khmer_6_khmer_CallbackFn)(const char*, void *, unsigned PY_LONG_LONG, unsigned PY_LONG_LONG);

/* "_khmermodule.pyx":305
 *    _callback_obj = o
 * 
 * cdef class _pre_partition_info:             # <<<<<<<<<<<<<<
 *    cdef pre_partition_info *thisptr
 *    def __cinit__(self, HashIntoType h):
 */
struct __pyx_obj_5khmer_6_khmer__pre_partition_info {
  PyObject_HEAD
  khmer::pre_partition_info *thisptr;
};


/* "_khmermodule.pyx":423
 * cdef class _new_hashbits
 * 
 * cdef class _new_counting_hash:             # <<<<<<<<<<<<<<
 *    cdef CountingHash *thisptr
 *    def __cinit__(self, WordLength ksize, arg):
 */
struct __pyx_obj_5khmer_6_khmer__new_counting_hash {
  PyObject_HEAD
  khmer::CountingHash *thisptr;
};


/* "_khmermodule.pyx":363
 *       return result
 * 
 * cdef class new_readmask:             # <<<<<<<<<<<<<<
 *    cdef ReadMaskTable *thisptr
 *    def __cinit__(self, n=None):
 */
struct __pyx_obj_5khmer_6_khmer_new_readmask {
  PyObject_HEAD
  khmer::ReadMaskTable *thisptr;
};


/* "_khmermodule.pyx":655
 *    return cstr
 * 
 * cdef class _new_subsetpartition             # <<<<<<<<<<<<<<
 * 
 * cdef class _new_hashbits:
 */
struct __pyx_obj_5khmer_6_khmer__new_subsetpartition {
  PyObject_HEAD
  khmer::SubsetPartition *thisptr;
};


/* "_khmermodule.pyx":421
 *       return self.thisptr.get_tablesize()
 * 
 * cdef class _new_hashbits             # <<<<<<<<<<<<<<
 * 
 * cdef class _new_counting_hash:
 */
struct __pyx_obj_5khmer_6_khmer__new_hashbits {
  PyObject_HEAD
  khmer::Hashbits *thisptr;
};


/* "_khmermodule.pyx":398
 *       return self.thisptr.filter_fasta_file(s1, s2, _report_fn, <void*>_callback_obj)
 * 
 * cdef class new_minmax:             # <<<<<<<<<<<<<<
 *    cdef MinMaxTable *thisptr
 *    def __cinit__(self, unsigned int n=0):
 */
struct __pyx_obj_5khmer_6_khmer_new_minmax {
  PyObject_HEAD
  khmer::MinMaxTable *thisptr;
};


/* "_khmermodule.pyx":310
 *       self.thisptr = new pre_partition_info(h)
 * 
 * cdef class new_ktable:             # <<<<<<<<<<<<<<
 *    cdef KTable *thisptr
 *    def __cinit__(self, arg1, arg2=0):
 */
struct __pyx_obj_5khmer_6_khmer_new_ktable {
  PyObject_HEAD
  khmer::KTable *thisptr;
};


#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name)           __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'khmer._khmer' */
static PyTypeObject *__pyx_ptype_5khmer_6_khmer__pre_partition_info = 0;
static PyTypeObject *__pyx_ptype_5khmer_6_khmer_new_ktable = 0;
static PyTypeObject *__pyx_ptype_5khmer_6_khmer_new_readmask = 0;
static PyTypeObject *__pyx_ptype_5khmer_6_khmer_new_minmax = 0;
static PyTypeObject *__pyx_ptype_5khmer_6_khmer__new_hashbits = 0;
static PyTypeObject *__pyx_ptype_5khmer_6_khmer__new_counting_hash = 0;
static PyTypeObject *__pyx_ptype_5khmer_6_khmer__new_subsetpartition = 0;
static void __pyx_f_5khmer_6_khmer__report_fn(const char*, void *, unsigned PY_LONG_LONG, unsigned PY_LONG_LONG); /*proto*/
#define __Pyx_MODULE_NAME "khmer._khmer"
int __pyx_module_is_main_khmer___khmer = 0;

/* Implementation of 'khmer._khmer' */
static PyObject *__pyx_builtin_range;
static char __pyx_k_1[] = "khmer._khmer";
static char __pyx_k_2[] = "set_reporting_callback";
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__k[] = "k";
static char __pyx_k__n[] = "n";
static char __pyx_k__p[] = "p";
static char __pyx_k__s[] = "s";
static char __pyx_k__ch[] = "ch";
static char __pyx_k__hb[] = "hb";
static char __pyx_k__n1[] = "n1";
static char __pyx_k__n2[] = "n2";
static char __pyx_k__p1[] = "p1";
static char __pyx_k__p2[] = "p2";
static char __pyx_k__rm[] = "rm";
static char __pyx_k__s1[] = "s1";
static char __pyx_k__s2[] = "s2";
static char __pyx_k__arg[] = "arg";
static char __pyx_k__end[] = "end";
static char __pyx_k__seq[] = "seq";
static char __pyx_k__arg1[] = "arg1";
static char __pyx_k__arg2[] = "arg2";
static char __pyx_k__kmer[] = "kmer";
static char __pyx_k__mean[] = "mean";
static char __pyx_k__stop[] = "stop";
static char __pyx_k__index[] = "index";
static char __pyx_k__input[] = "input";
static char __pyx_k__ksize[] = "ksize";
static char __pyx_k__lower[] = "lower";
static char __pyx_k__range[] = "range";
static char __pyx_k__start[] = "start";
static char __pyx_k__upper[] = "upper";
static char __pyx_k__cutoff[] = "cutoff";
static char __pyx_k__infile[] = "infile";
static char __pyx_k__minmax[] = "minmax";
static char __pyx_k__output[] = "output";
static char __pyx_k__primes[] = "primes";
static char __pyx_k__radius[] = "radius";
static char __pyx_k__setval[] = "setval";
static char __pyx_k__subset[] = "subset";
static char __pyx_k__outfile[] = "outfile";
static char __pyx_k__thisptr[] = "thisptr";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__distance[] = "distance";
static char __pyx_k__filename[] = "filename";
static char __pyx_k__max_size[] = "max_size";
static char __pyx_k__max_sodd[] = "max_sodd";
static char __pyx_k__readmask[] = "readmask";
static char __pyx_k__subset_o[] = "subset_o";
static char __pyx_k__frequency[] = "frequency";
static char __pyx_k__inputfile[] = "inputfile";
static char __pyx_k__last_kmer[] = "last_kmer";
static char __pyx_k__max_count[] = "max_count";
static char __pyx_k__min_count[] = "min_count";
static char __pyx_k__runlength[] = "runlength";
static char __pyx_k__threshold[] = "threshold";
static char __pyx_k__break_stop[] = "break_stop";
static char __pyx_k__clear_tags[] = "clear_tags";
static char __pyx_k__counting_o[] = "counting_o";
static char __pyx_k__first_kmer[] = "first_kmer";
static char __pyx_k__max_degree[] = "max_degree";
static char __pyx_k__max_radius[] = "max_radius";
static char __pyx_k__max_volume[] = "max_volume";
static char __pyx_k__min_length[] = "min_length";
static char __pyx_k__subset_obj[] = "subset_obj";
static char __pyx_k__in_readmask[] = "in_readmask";
static char __pyx_k__lower_bound[] = "lower_bound";
static char __pyx_k__total_reads[] = "total_reads";
static char __pyx_k__upper_bound[] = "upper_bound";
static char __pyx_k__callback_obj[] = "callback_obj";
static char __pyx_k__do_partition[] = "do_partition";
static char __pyx_k__forward_hash[] = "forward_hash";
static char __pyx_k__max_read_len[] = "max_read_len";
static char __pyx_k__min_unique_f[] = "min_unique_f";
static char __pyx_k__reverse_hash[] = "reverse_hash";
static char __pyx_k___callback_obj[] = "_callback_obj";
static char __pyx_k__big_threshold[] = "big_threshold";
static char __pyx_k___validate_pmap[] = "_validate_pmap";
static char __pyx_k__limit_by_count[] = "limit_by_count";
static char __pyx_k__break_on_circum[] = "break_on_circum";
static char __pyx_k__merge_from_disk[] = "merge_from_disk";
static char __pyx_k__update_readmask[] = "update_readmask";
static char __pyx_k__output_unassigned[] = "output_unassigned";
static char __pyx_k__save_partitionmap[] = "save_partitionmap";
static char __pyx_k__forward_hash_no_rc[] = "forward_hash_no_rc";
static char __pyx_k__transfer_threshold[] = "transfer_threshold";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___callback_obj;
static PyObject *__pyx_n_s___validate_pmap;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__arg;
static PyObject *__pyx_n_s__arg1;
static PyObject *__pyx_n_s__arg2;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__big_threshold;
static PyObject *__pyx_n_s__break_on_circum;
static PyObject *__pyx_n_s__break_stop;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__callback_obj;
static PyObject *__pyx_n_s__ch;
static PyObject *__pyx_n_s__clear_tags;
static PyObject *__pyx_n_s__counting_o;
static PyObject *__pyx_n_s__cutoff;
static PyObject *__pyx_n_s__distance;
static PyObject *__pyx_n_s__do_partition;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__filename;
static PyObject *__pyx_n_s__first_kmer;
static PyObject *__pyx_n_s__forward_hash;
static PyObject *__pyx_n_s__forward_hash_no_rc;
static PyObject *__pyx_n_s__frequency;
static PyObject *__pyx_n_s__h;
static PyObject *__pyx_n_s__hb;
static PyObject *__pyx_n_s__i;
static PyObject *__pyx_n_s__in_readmask;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__infile;
static PyObject *__pyx_n_s__input;
static PyObject *__pyx_n_s__inputfile;
static PyObject *__pyx_n_s__k;
static PyObject *__pyx_n_s__kmer;
static PyObject *__pyx_n_s__ksize;
static PyObject *__pyx_n_s__last_kmer;
static PyObject *__pyx_n_s__limit_by_count;
static PyObject *__pyx_n_s__lower;
static PyObject *__pyx_n_s__lower_bound;
static PyObject *__pyx_n_s__max_count;
static PyObject *__pyx_n_s__max_degree;
static PyObject *__pyx_n_s__max_radius;
static PyObject *__pyx_n_s__max_read_len;
static PyObject *__pyx_n_s__max_size;
static PyObject *__pyx_n_s__max_sodd;
static PyObject *__pyx_n_s__max_volume;
static PyObject *__pyx_n_s__mean;
static PyObject *__pyx_n_s__merge_from_disk;
static PyObject *__pyx_n_s__min_count;
static PyObject *__pyx_n_s__min_length;
static PyObject *__pyx_n_s__min_unique_f;
static PyObject *__pyx_n_s__minmax;
static PyObject *__pyx_n_s__n;
static PyObject *__pyx_n_s__n1;
static PyObject *__pyx_n_s__n2;
static PyObject *__pyx_n_s__outfile;
static PyObject *__pyx_n_s__output;
static PyObject *__pyx_n_s__output_unassigned;
static PyObject *__pyx_n_s__p;
static PyObject *__pyx_n_s__p1;
static PyObject *__pyx_n_s__p2;
static PyObject *__pyx_n_s__primes;
static PyObject *__pyx_n_s__radius;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__readmask;
static PyObject *__pyx_n_s__reverse_hash;
static PyObject *__pyx_n_s__rm;
static PyObject *__pyx_n_s__runlength;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__s1;
static PyObject *__pyx_n_s__s2;
static PyObject *__pyx_n_s__save_partitionmap;
static PyObject *__pyx_n_s__seq;
static PyObject *__pyx_n_s__setval;
static PyObject *__pyx_n_s__start;
static PyObject *__pyx_n_s__stop;
static PyObject *__pyx_n_s__subset;
static PyObject *__pyx_n_s__subset_o;
static PyObject *__pyx_n_s__subset_obj;
static PyObject *__pyx_n_s__thisptr;
static PyObject *__pyx_n_s__threshold;
static PyObject *__pyx_n_s__total_reads;
static PyObject *__pyx_n_s__transfer_threshold;
static PyObject *__pyx_n_s__update_readmask;
static PyObject *__pyx_n_s__upper;
static PyObject *__pyx_n_s__upper_bound;
static PyObject *__pyx_int_0;

/* "_khmermodule.pyx":296
 * _callback_obj = None
 * 
 * cdef void _report_fn(const_char_ptr info, void* data,             # <<<<<<<<<<<<<<
 *                      unsigned long long n_reads, unsigned long long other) except *:
 *    global _callback_obj
 */

static void __pyx_f_5khmer_6_khmer__report_fn(const char* __pyx_v_info, void *__pyx_v_data, unsigned PY_LONG_LONG __pyx_v_n_reads, unsigned PY_LONG_LONG __pyx_v_other) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_report_fn");

  /* "_khmermodule.pyx":299
 *                      unsigned long long n_reads, unsigned long long other) except *:
 *    global _callback_obj
 *    _callback_obj(info, n_reads, other)             # <<<<<<<<<<<<<<
 * 
 * def set_reporting_callback(o):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_info); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_n_reads); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyLong_FromUnsignedLongLong(__pyx_v_other); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._khmer._report_fn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "_khmermodule.pyx":301
 *    _callback_obj(info, n_reads, other)
 * 
 * def set_reporting_callback(o):             # <<<<<<<<<<<<<<
 *    global _callback_obj
 *    _callback_obj = o
 */

static PyObject *__pyx_pf_5khmer_6_khmer_set_reporting_callback(PyObject *__pyx_self, PyObject *__pyx_v_o); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_6_khmer_set_reporting_callback = {__Pyx_NAMESTR("set_reporting_callback"), (PyCFunction)__pyx_pf_5khmer_6_khmer_set_reporting_callback, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5khmer_6_khmer_set_reporting_callback(PyObject *__pyx_self, PyObject *__pyx_v_o) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_reporting_callback");
  __pyx_self = __pyx_self;

  /* "_khmermodule.pyx":303
 * def set_reporting_callback(o):
 *    global _callback_obj
 *    _callback_obj = o             # <<<<<<<<<<<<<<
 * 
 * cdef class _pre_partition_info:
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_o) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer.set_reporting_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":307
 * cdef class _pre_partition_info:
 *    cdef pre_partition_info *thisptr
 *    def __cinit__(self, HashIntoType h):             # <<<<<<<<<<<<<<
 *       self.thisptr = new pre_partition_info(h)
 * 
 */

static int __pyx_pf_5khmer_6_khmer_19_pre_partition_info___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_19_pre_partition_info___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_h;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__h,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__h);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_h = __Pyx_PyInt_AsUnsignedLongLong(values[0]); if (unlikely((__pyx_v_h == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._pre_partition_info.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":308
 *    cdef pre_partition_info *thisptr
 *    def __cinit__(self, HashIntoType h):
 *       self.thisptr = new pre_partition_info(h)             # <<<<<<<<<<<<<<
 * 
 * cdef class new_ktable:
 */
  ((struct __pyx_obj_5khmer_6_khmer__pre_partition_info *)__pyx_v_self)->thisptr = new khmer::pre_partition_info(__pyx_v_h);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":312
 * cdef class new_ktable:
 *    cdef KTable *thisptr
 *    def __cinit__(self, arg1, arg2=0):             # <<<<<<<<<<<<<<
 *       if arg2 == 0:
 *          self.thisptr = new KTable(<WordLength>arg1)
 */

static int __pyx_pf_5khmer_6_khmer_10new_ktable___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_10new_ktable___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg1 = 0;
  PyObject *__pyx_v_arg2 = 0;
  struct __pyx_obj_5khmer_6_khmer_new_ktable *__pyx_v_k1 = NULL;
  struct __pyx_obj_5khmer_6_khmer_new_ktable *__pyx_v_k2 = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __pyx_t_5khmer_6_khmer_WordLength __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg1,&__pyx_n_s__arg2,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg2);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg1 = values[0];
    __pyx_v_arg2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":313
 *    cdef KTable *thisptr
 *    def __cinit__(self, arg1, arg2=0):
 *       if arg2 == 0:             # <<<<<<<<<<<<<<
 *          self.thisptr = new KTable(<WordLength>arg1)
 *       else:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_arg2, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":314
 *    def __cinit__(self, arg1, arg2=0):
 *       if arg2 == 0:
 *          self.thisptr = new KTable(<WordLength>arg1)             # <<<<<<<<<<<<<<
 *       else:
 *          k1 = <new_ktable>arg1
 */
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_arg1); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr = new khmer::KTable(((__pyx_t_5khmer_6_khmer_WordLength)__pyx_t_3));
    goto __pyx_L6;
  }
  /*else*/ {

    /* "_khmermodule.pyx":316
 *          self.thisptr = new KTable(<WordLength>arg1)
 *       else:
 *          k1 = <new_ktable>arg1             # <<<<<<<<<<<<<<
 *          k2 = <new_ktable>arg2
 *          self.thisptr = k1.thisptr.intersect(k2.thisptr[0])
 */
    __Pyx_INCREF(((PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_arg1)));
    __pyx_v_k1 = ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_arg1);

    /* "_khmermodule.pyx":317
 *       else:
 *          k1 = <new_ktable>arg1
 *          k2 = <new_ktable>arg2             # <<<<<<<<<<<<<<
 *          self.thisptr = k1.thisptr.intersect(k2.thisptr[0])
 *    def count(self, kmer):
 */
    __Pyx_INCREF(((PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_arg2)));
    __pyx_v_k2 = ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_arg2);

    /* "_khmermodule.pyx":318
 *          k1 = <new_ktable>arg1
 *          k2 = <new_ktable>arg2
 *          self.thisptr = k1.thisptr.intersect(k2.thisptr[0])             # <<<<<<<<<<<<<<
 *    def count(self, kmer):
 *       self.thisptr.count(kmer)
 */
    ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr = __pyx_v_k1->thisptr->intersect((__pyx_v_k2->thisptr[0]));
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_k1);
  __Pyx_XDECREF((PyObject *)__pyx_v_k2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":319
 *          k2 = <new_ktable>arg2
 *          self.thisptr = k1.thisptr.intersect(k2.thisptr[0])
 *    def count(self, kmer):             # <<<<<<<<<<<<<<
 *       self.thisptr.count(kmer)
 *    def consume(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_1count(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_1count(PyObject *__pyx_v_self, PyObject *__pyx_v_kmer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count");

  /* "_khmermodule.pyx":320
 *          self.thisptr = k1.thisptr.intersect(k2.thisptr[0])
 *    def count(self, kmer):
 *       self.thisptr.count(kmer)             # <<<<<<<<<<<<<<
 *    def consume(self, char* s):
 *       self.thisptr.consume_string(s)
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_kmer); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->count(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":321
 *    def count(self, kmer):
 *       self.thisptr.count(kmer)
 *    def consume(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.consume_string(s)
 *       return strlen(s) - self.thisptr.ksize() + 1
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_2consume(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_2consume(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("consume");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":322
 *       self.thisptr.count(kmer)
 *    def consume(self, char* s):
 *       self.thisptr.consume_string(s)             # <<<<<<<<<<<<<<
 *       return strlen(s) - self.thisptr.ksize() + 1
 *    def get(self, arg):
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->consume_string(__pyx_v_s);

  /* "_khmermodule.pyx":323
 *    def consume(self, char* s):
 *       self.thisptr.consume_string(s)
 *       return strlen(s) - self.thisptr.ksize() + 1             # <<<<<<<<<<<<<<
 *    def get(self, arg):
 *       if isinstance(arg, str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((strlen(__pyx_v_s) - ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->ksize()) + 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":324
 *       self.thisptr.consume_string(s)
 *       return strlen(s) - self.thisptr.ksize() + 1
 *    def get(self, arg):             # <<<<<<<<<<<<<<
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_3get(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_3get(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get");

  /* "_khmermodule.pyx":325
 *       return strlen(s) - self.thisptr.ksize() + 1
 *    def get(self, arg):
 *       if isinstance(arg, str):             # <<<<<<<<<<<<<<
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyString_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":326
 *    def get(self, arg):
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_AsString(__pyx_v_arg); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->get_count(((char *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_khmermodule.pyx":328
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)             # <<<<<<<<<<<<<<
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->get_count(((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_4))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":329
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def __getitem__(self, arg):             # <<<<<<<<<<<<<<
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_4__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_4__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");

  /* "_khmermodule.pyx":330
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):             # <<<<<<<<<<<<<<
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyString_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":331
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_AsString(__pyx_v_arg); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->get_count(((char *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_khmermodule.pyx":333
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)             # <<<<<<<<<<<<<<
 *    def set(self, HashIntoType i, ExactCounterType c):
 *       self.thisptr.set_count(i, c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->get_count(((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_4))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":334
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def set(self, HashIntoType i, ExactCounterType c):             # <<<<<<<<<<<<<<
 *       self.thisptr.set_count(i, c)
 *    def set(self, char* kmer, ExactCounterType c):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_5set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_5set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_i;
  __pyx_t_5khmer_6_khmer_ExactCounterType __pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__i,&__pyx_n_s__c,0};
  __Pyx_RefNannySetupContext("set");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__i);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = __Pyx_PyInt_AsUnsignedLongLong(values[0]); if (unlikely((__pyx_v_i == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_c == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":335
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def set(self, HashIntoType i, ExactCounterType c):
 *       self.thisptr.set_count(i, c)             # <<<<<<<<<<<<<<
 *    def set(self, char* kmer, ExactCounterType c):
 *       self.thisptr.set_count(kmer, c)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->set_count(__pyx_v_i, __pyx_v_c);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":336
 *    def set(self, HashIntoType i, ExactCounterType c):
 *       self.thisptr.set_count(i, c)
 *    def set(self, char* kmer, ExactCounterType c):             # <<<<<<<<<<<<<<
 *       self.thisptr.set_count(kmer, c)
 *    def forward_hash(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_6set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_6set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_kmer;
  __pyx_t_5khmer_6_khmer_ExactCounterType __pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__kmer,&__pyx_n_s__c,0};
  __Pyx_RefNannySetupContext("set");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_kmer = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_c == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":337
 *       self.thisptr.set_count(i, c)
 *    def set(self, char* kmer, ExactCounterType c):
 *       self.thisptr.set_count(kmer, c)             # <<<<<<<<<<<<<<
 *    def forward_hash(self, char* s):
 *       return _hash(s, self.thisptr.ksize())
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->set_count(__pyx_v_kmer, __pyx_v_c);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":338
 *    def set(self, char* kmer, ExactCounterType c):
 *       self.thisptr.set_count(kmer, c)
 *    def forward_hash(self, char* s):             # <<<<<<<<<<<<<<
 *       return _hash(s, self.thisptr.ksize())
 *    def forward_hash_no_rc(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_7forward_hash(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_7forward_hash(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forward_hash");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.forward_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":339
 *       self.thisptr.set_count(kmer, c)
 *    def forward_hash(self, char* s):
 *       return _hash(s, self.thisptr.ksize())             # <<<<<<<<<<<<<<
 *    def forward_hash_no_rc(self, char* s):
 *       return _hash_forward(s, self.thisptr.ksize())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(khmer::_hash(__pyx_v_s, ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->ksize())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.forward_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":340
 *    def forward_hash(self, char* s):
 *       return _hash(s, self.thisptr.ksize())
 *    def forward_hash_no_rc(self, char* s):             # <<<<<<<<<<<<<<
 *       return _hash_forward(s, self.thisptr.ksize())
 *    def reverse_hash(self, HashIntoType h):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_8forward_hash_no_rc(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_8forward_hash_no_rc(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forward_hash_no_rc");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.forward_hash_no_rc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":341
 *       return _hash(s, self.thisptr.ksize())
 *    def forward_hash_no_rc(self, char* s):
 *       return _hash_forward(s, self.thisptr.ksize())             # <<<<<<<<<<<<<<
 *    def reverse_hash(self, HashIntoType h):
 *       cdef string s = _revhash(h, self.thisptr.ksize())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(khmer::_hash_forward(__pyx_v_s, ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->ksize())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.forward_hash_no_rc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":342
 *    def forward_hash_no_rc(self, char* s):
 *       return _hash_forward(s, self.thisptr.ksize())
 *    def reverse_hash(self, HashIntoType h):             # <<<<<<<<<<<<<<
 *       cdef string s = _revhash(h, self.thisptr.ksize())
 *       cdef char *cstr = <char *>malloc(s.length() + 1)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_9reverse_hash(PyObject *__pyx_v_self, PyObject *__pyx_arg_h); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_9reverse_hash(PyObject *__pyx_v_self, PyObject *__pyx_arg_h) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_h;
  std::string __pyx_v_s;
  char *__pyx_v_cstr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reverse_hash");
  assert(__pyx_arg_h); {
    __pyx_v_h = __Pyx_PyInt_AsUnsignedLongLong(__pyx_arg_h); if (unlikely((__pyx_v_h == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.reverse_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":343
 *       return _hash_forward(s, self.thisptr.ksize())
 *    def reverse_hash(self, HashIntoType h):
 *       cdef string s = _revhash(h, self.thisptr.ksize())             # <<<<<<<<<<<<<<
 *       cdef char *cstr = <char *>malloc(s.length() + 1)
 *       strcpy(cstr, s.c_str())
 */
  __pyx_v_s = khmer::_revhash(__pyx_v_h, ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->ksize());

  /* "_khmermodule.pyx":344
 *    def reverse_hash(self, HashIntoType h):
 *       cdef string s = _revhash(h, self.thisptr.ksize())
 *       cdef char *cstr = <char *>malloc(s.length() + 1)             # <<<<<<<<<<<<<<
 *       strcpy(cstr, s.c_str())
 *       return cstr
 */
  __pyx_v_cstr = ((char *)malloc((__pyx_v_s.length() + 1)));

  /* "_khmermodule.pyx":345
 *       cdef string s = _revhash(h, self.thisptr.ksize())
 *       cdef char *cstr = <char *>malloc(s.length() + 1)
 *       strcpy(cstr, s.c_str())             # <<<<<<<<<<<<<<
 *       return cstr
 *    def max_hash(self):
 */
  strcpy(__pyx_v_cstr, __pyx_v_s.c_str());

  /* "_khmermodule.pyx":346
 *       cdef char *cstr = <char *>malloc(s.length() + 1)
 *       strcpy(cstr, s.c_str())
 *       return cstr             # <<<<<<<<<<<<<<
 *    def max_hash(self):
 *       return self.thisptr.max_hash()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_cstr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.reverse_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":347
 *       strcpy(cstr, s.c_str())
 *       return cstr
 *    def max_hash(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.max_hash()
 *    def n_entries(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_10max_hash(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_10max_hash(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max_hash");

  /* "_khmermodule.pyx":348
 *       return cstr
 *    def max_hash(self):
 *       return self.thisptr.max_hash()             # <<<<<<<<<<<<<<
 *    def n_entries(self):
 *       return self.thisptr.n_entries()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->max_hash()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.max_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":349
 *    def max_hash(self):
 *       return self.thisptr.max_hash()
 *    def n_entries(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_entries()
 *    def __len__(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_11n_entries(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_11n_entries(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_entries");

  /* "_khmermodule.pyx":350
 *       return self.thisptr.max_hash()
 *    def n_entries(self):
 *       return self.thisptr.n_entries()             # <<<<<<<<<<<<<<
 *    def __len__(self):
 *       return self.thisptr.n_entries()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->n_entries()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.n_entries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":351
 *    def n_entries(self):
 *       return self.thisptr.n_entries()
 *    def __len__(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_entries()
 *    def ksize(self):
 */

static Py_ssize_t __pyx_pf_5khmer_6_khmer_10new_ktable_12__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_5khmer_6_khmer_10new_ktable_12__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__");

  /* "_khmermodule.pyx":352
 *       return self.thisptr.n_entries()
 *    def __len__(self):
 *       return self.thisptr.n_entries()             # <<<<<<<<<<<<<<
 *    def ksize(self):
 *       return self.thisptr.ksize()
 */
  __pyx_r = ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->n_entries();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":353
 *    def __len__(self):
 *       return self.thisptr.n_entries()
 *    def ksize(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.ksize()
 *    def clear(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_13ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_13ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ksize");

  /* "_khmermodule.pyx":354
 *       return self.thisptr.n_entries()
 *    def ksize(self):
 *       return self.thisptr.ksize()             # <<<<<<<<<<<<<<
 *    def clear(self):
 *       self.thisptr.clear()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->ksize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.ksize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":355
 *    def ksize(self):
 *       return self.thisptr.ksize()
 *    def clear(self):             # <<<<<<<<<<<<<<
 *       self.thisptr.clear()
 *    def update(self, new_ktable ktbl2):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_14clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_14clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear");

  /* "_khmermodule.pyx":356
 *       return self.thisptr.ksize()
 *    def clear(self):
 *       self.thisptr.clear()             # <<<<<<<<<<<<<<
 *    def update(self, new_ktable ktbl2):
 *       self.thisptr.update(ktbl2.thisptr[0])
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->clear();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":357
 *    def clear(self):
 *       self.thisptr.clear()
 *    def update(self, new_ktable ktbl2):             # <<<<<<<<<<<<<<
 *       self.thisptr.update(ktbl2.thisptr[0])
 *    def intersect(self, new_ktable ktbl2):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_15update(PyObject *__pyx_v_self, PyObject *__pyx_v_ktbl2); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_15update(PyObject *__pyx_v_self, PyObject *__pyx_v_ktbl2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ktbl2), __pyx_ptype_5khmer_6_khmer_new_ktable, 1, "ktbl2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":358
 *       self.thisptr.clear()
 *    def update(self, new_ktable ktbl2):
 *       self.thisptr.update(ktbl2.thisptr[0])             # <<<<<<<<<<<<<<
 *    def intersect(self, new_ktable ktbl2):
 *       result = new_ktable(self, ktbl2)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_self)->thisptr->update((((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_v_ktbl2)->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer.new_ktable.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":359
 *    def update(self, new_ktable ktbl2):
 *       self.thisptr.update(ktbl2.thisptr[0])
 *    def intersect(self, new_ktable ktbl2):             # <<<<<<<<<<<<<<
 *       result = new_ktable(self, ktbl2)
 *       return result
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_16intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_ktbl2); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_ktable_16intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_ktbl2) {
  struct __pyx_obj_5khmer_6_khmer_new_ktable *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ktbl2), __pyx_ptype_5khmer_6_khmer_new_ktable, 1, "ktbl2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":360
 *       self.thisptr.update(ktbl2.thisptr[0])
 *    def intersect(self, new_ktable ktbl2):
 *       result = new_ktable(self, ktbl2)             # <<<<<<<<<<<<<<
 *       return result
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __Pyx_INCREF(__pyx_v_ktbl2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ktbl2);
  __Pyx_GIVEREF(__pyx_v_ktbl2);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_ktable)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_5khmer_6_khmer_new_ktable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":361
 *    def intersect(self, new_ktable ktbl2):
 *       result = new_ktable(self, ktbl2)
 *       return result             # <<<<<<<<<<<<<<
 * 
 * cdef class new_readmask:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer.new_ktable.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":365
 * cdef class new_readmask:
 *    cdef ReadMaskTable *thisptr
 *    def __cinit__(self, n=None):             # <<<<<<<<<<<<<<
 *       if isinstance(n, int) or isinstance(n, long):
 *          self.thisptr = new ReadMaskTable(<unsigned int>n)
 */

static int __pyx_pf_5khmer_6_khmer_12new_readmask___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_12new_readmask___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":366
 *    cdef ReadMaskTable *thisptr
 *    def __cinit__(self, n=None):
 *       if isinstance(n, int) or isinstance(n, long):             # <<<<<<<<<<<<<<
 *          self.thisptr = new ReadMaskTable(<unsigned int>n)
 *    def invert(self):
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_n, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_1 = ((PyObject *)((PyObject*)(&PyLong_Type)));
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_n, __pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  if (__pyx_t_4) {

    /* "_khmermodule.pyx":367
 *    def __cinit__(self, n=None):
 *       if isinstance(n, int) or isinstance(n, long):
 *          self.thisptr = new ReadMaskTable(<unsigned int>n)             # <<<<<<<<<<<<<<
 *    def invert(self):
 *       self.thisptr.invert()
 */
    __pyx_t_5 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_n); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr = new khmer::ReadMaskTable(((unsigned int)__pyx_t_5));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_readmask.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":368
 *       if isinstance(n, int) or isinstance(n, long):
 *          self.thisptr = new ReadMaskTable(<unsigned int>n)
 *    def invert(self):             # <<<<<<<<<<<<<<
 *       self.thisptr.invert()
 *    def tablesize(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_1invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_1invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invert");

  /* "_khmermodule.pyx":369
 *          self.thisptr = new ReadMaskTable(<unsigned int>n)
 *    def invert(self):
 *       self.thisptr.invert()             # <<<<<<<<<<<<<<
 *    def tablesize(self):
 *       return self.thisptr.get_tablesize()
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->invert();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":370
 *    def invert(self):
 *       self.thisptr.invert()
 *    def tablesize(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_tablesize()
 *    def n_kept(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_2tablesize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_2tablesize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tablesize");

  /* "_khmermodule.pyx":371
 *       self.thisptr.invert()
 *    def tablesize(self):
 *       return self.thisptr.get_tablesize()             # <<<<<<<<<<<<<<
 *    def n_kept(self):
 *       return self.thisptr.n_kept()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->get_tablesize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_readmask.tablesize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":372
 *    def tablesize(self):
 *       return self.thisptr.get_tablesize()
 *    def n_kept(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_kept()
 *    def get(self, unsigned int n):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_3n_kept(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_3n_kept(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_kept");

  /* "_khmermodule.pyx":373
 *       return self.thisptr.get_tablesize()
 *    def n_kept(self):
 *       return self.thisptr.n_kept()             # <<<<<<<<<<<<<<
 *    def get(self, unsigned int n):
 *       return self.thisptr.get(n)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->n_kept()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_readmask.n_kept", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":374
 *    def n_kept(self):
 *       return self.thisptr.n_kept()
 *    def get(self, unsigned int n):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get(n)
 *    def set(self, unsigned int n, bool b):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_4get(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_4get(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get");
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_n); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":375
 *       return self.thisptr.n_kept()
 *    def get(self, unsigned int n):
 *       return self.thisptr.get(n)             # <<<<<<<<<<<<<<
 *    def set(self, unsigned int n, bool b):
 *       self.thisptr.set(n, b)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->get(__pyx_v_n)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_readmask.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":376
 *    def get(self, unsigned int n):
 *       return self.thisptr.get(n)
 *    def set(self, unsigned int n, bool b):             # <<<<<<<<<<<<<<
 *       self.thisptr.set(n, b)
 *    def do_and(self, unsigned int index, unsigned int setval):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_5set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_5set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_n;
  bool __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("set");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_b == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":377
 *       return self.thisptr.get(n)
 *    def set(self, unsigned int n, bool b):
 *       self.thisptr.set(n, b)             # <<<<<<<<<<<<<<
 *    def do_and(self, unsigned int index, unsigned int setval):
 *       cdef BoundedCounterType val = self.thisptr.get(index)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->set(__pyx_v_n, __pyx_v_b);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":378
 *    def set(self, unsigned int n, bool b):
 *       self.thisptr.set(n, b)
 *    def do_and(self, unsigned int index, unsigned int setval):             # <<<<<<<<<<<<<<
 *       cdef BoundedCounterType val = self.thisptr.get(index)
 *       if setval and val:
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_6do_and(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_6do_and(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_index;
  unsigned int __pyx_v_setval;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__index,&__pyx_n_s__setval,0};
  __Pyx_RefNannySetupContext("do_and");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__index);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__setval);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("do_and", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "do_and") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_index == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_setval = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_setval == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_and", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.do_and", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":379
 *       self.thisptr.set(n, b)
 *    def do_and(self, unsigned int index, unsigned int setval):
 *       cdef BoundedCounterType val = self.thisptr.get(index)             # <<<<<<<<<<<<<<
 *       if setval and val:
 *          val = 1
 */
  __pyx_v_val = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->get(__pyx_v_index);

  /* "_khmermodule.pyx":380
 *    def do_and(self, unsigned int index, unsigned int setval):
 *       cdef BoundedCounterType val = self.thisptr.get(index)
 *       if setval and val:             # <<<<<<<<<<<<<<
 *          val = 1
 *       else:
 */
  if (__pyx_v_setval) {
    __pyx_t_1 = __pyx_v_val;
  } else {
    __pyx_t_1 = __pyx_v_setval;
  }
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":381
 *       cdef BoundedCounterType val = self.thisptr.get(index)
 *       if setval and val:
 *          val = 1             # <<<<<<<<<<<<<<
 *       else:
 *          val = 0
 */
    __pyx_v_val = 1;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "_khmermodule.pyx":383
 *          val = 1
 *       else:
 *          val = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.set(index, val)
 *       return val
 */
    __pyx_v_val = 0;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":384
 *       else:
 *          val = 0
 *       self.thisptr.set(index, val)             # <<<<<<<<<<<<<<
 *       return val
 *    def save(self, char* s):
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->set(__pyx_v_index, __pyx_v_val);

  /* "_khmermodule.pyx":385
 *          val = 0
 *       self.thisptr.set(index, val)
 *       return val             # <<<<<<<<<<<<<<
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer.new_readmask.do_and", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":386
 *       self.thisptr.set(index, val)
 *       return val
 *    def save(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_7save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_7save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":387
 *       return val
 *    def save(self, char* s):
 *       self.thisptr.save(s)             # <<<<<<<<<<<<<<
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->save(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":388
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 *    def load(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.load(s)
 *    def merge(self, new_readmask tbl):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_8load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_8load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":389
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 *       self.thisptr.load(s)             # <<<<<<<<<<<<<<
 *    def merge(self, new_readmask tbl):
 *       self.thisptr.merge(tbl.thisptr[0])
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->load(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":390
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 *    def merge(self, new_readmask tbl):             # <<<<<<<<<<<<<<
 *       self.thisptr.merge(tbl.thisptr[0])
 *    def filter_fasta_file(self, char* s1, char* s2, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_9merge(PyObject *__pyx_v_self, PyObject *__pyx_v_tbl); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_9merge(PyObject *__pyx_v_self, PyObject *__pyx_v_tbl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tbl), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "tbl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":391
 *       self.thisptr.load(s)
 *    def merge(self, new_readmask tbl):
 *       self.thisptr.merge(tbl.thisptr[0])             # <<<<<<<<<<<<<<
 *    def filter_fasta_file(self, char* s1, char* s2, callback_obj=None):
 *       global _callback_obj
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->merge((((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_tbl)->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":392
 *    def merge(self, new_readmask tbl):
 *       self.thisptr.merge(tbl.thisptr[0])
 *    def filter_fasta_file(self, char* s1, char* s2, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */

static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_10filter_fasta_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_12new_readmask_10filter_fasta_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s1;
  char *__pyx_v_s2;
  PyObject *__pyx_v_callback_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  unsigned int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s1,&__pyx_n_s__s2,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("filter_fasta_file");
  {
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "filter_fasta_file") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s1 = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_s2 = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_s2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_fasta_file", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_readmask.filter_fasta_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":394
 *    def filter_fasta_file(self, char* s1, char* s2, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       return self.thisptr.filter_fasta_file(s1, s2, _report_fn, <void*>_callback_obj)
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":395
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       return self.thisptr.filter_fasta_file(s1, s2, _report_fn, <void*>_callback_obj)
 * 
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":396
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       return self.thisptr.filter_fasta_file(s1, s2, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 * 
 * cdef class new_minmax:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_v_self)->thisptr->filter_fasta_file(__pyx_v_s1, __pyx_v_s2, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer.new_readmask.filter_fasta_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":400
 * cdef class new_minmax:
 *    cdef MinMaxTable *thisptr
 *    def __cinit__(self, unsigned int n=0):             # <<<<<<<<<<<<<<
 *       self.thisptr = new MinMaxTable(n)
 *    def save(self, char* s):
 */

static int __pyx_pf_5khmer_6_khmer_10new_minmax___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_10new_minmax___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_n;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_n = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_n = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":401
 *    cdef MinMaxTable *thisptr
 *    def __cinit__(self, unsigned int n=0):
 *       self.thisptr = new MinMaxTable(n)             # <<<<<<<<<<<<<<
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr = new khmer::MinMaxTable(__pyx_v_n);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":402
 *    def __cinit__(self, unsigned int n=0):
 *       self.thisptr = new MinMaxTable(n)
 *    def save(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_1save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_1save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":403
 *       self.thisptr = new MinMaxTable(n)
 *    def save(self, char* s):
 *       self.thisptr.save(s)             # <<<<<<<<<<<<<<
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->save(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":404
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 *    def load(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.load(s)
 *    def merge(self, new_minmax tbl):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_2load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_2load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":405
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 *       self.thisptr.load(s)             # <<<<<<<<<<<<<<
 *    def merge(self, new_minmax tbl):
 *       self.thisptr.merge(tbl.thisptr[0])
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->load(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":406
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 *    def merge(self, new_minmax tbl):             # <<<<<<<<<<<<<<
 *       self.thisptr.merge(tbl.thisptr[0])
 *    def clear(self, unsigned int n):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_3merge(PyObject *__pyx_v_self, PyObject *__pyx_v_tbl); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_3merge(PyObject *__pyx_v_self, PyObject *__pyx_v_tbl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tbl), __pyx_ptype_5khmer_6_khmer_new_minmax, 1, "tbl", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":407
 *       self.thisptr.load(s)
 *    def merge(self, new_minmax tbl):
 *       self.thisptr.merge(tbl.thisptr[0])             # <<<<<<<<<<<<<<
 *    def clear(self, unsigned int n):
 *       self.thisptr.clear(n)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->merge((((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_tbl)->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":408
 *    def merge(self, new_minmax tbl):
 *       self.thisptr.merge(tbl.thisptr[0])
 *    def clear(self, unsigned int n):             # <<<<<<<<<<<<<<
 *       self.thisptr.clear(n)
 *    def get_min(self, unsigned int n):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_4clear(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_4clear(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear");
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_n); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":409
 *       self.thisptr.merge(tbl.thisptr[0])
 *    def clear(self, unsigned int n):
 *       self.thisptr.clear(n)             # <<<<<<<<<<<<<<
 *    def get_min(self, unsigned int n):
 *       return self.thisptr.get_min(n)
 */
  ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->clear(__pyx_v_n);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":410
 *    def clear(self, unsigned int n):
 *       self.thisptr.clear(n)
 *    def get_min(self, unsigned int n):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_min(n)
 *    def get_max(self, unsigned int n):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_5get_min(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_5get_min(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_min");
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_n); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.get_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":411
 *       self.thisptr.clear(n)
 *    def get_min(self, unsigned int n):
 *       return self.thisptr.get_min(n)             # <<<<<<<<<<<<<<
 *    def get_max(self, unsigned int n):
 *       return self.thisptr.get_max(n)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->get_min(__pyx_v_n)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_minmax.get_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":412
 *    def get_min(self, unsigned int n):
 *       return self.thisptr.get_min(n)
 *    def get_max(self, unsigned int n):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_max(n)
 *    def add_max(self, unsigned int n1, n2):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_6get_max(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_6get_max(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  unsigned int __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_max");
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_n); if (unlikely((__pyx_v_n == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.get_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":413
 *       return self.thisptr.get_min(n)
 *    def get_max(self, unsigned int n):
 *       return self.thisptr.get_max(n)             # <<<<<<<<<<<<<<
 *    def add_max(self, unsigned int n1, n2):
 *       return self.thisptr.add_max(n1, n2)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->get_max(__pyx_v_n)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_minmax.get_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":414
 *    def get_max(self, unsigned int n):
 *       return self.thisptr.get_max(n)
 *    def add_max(self, unsigned int n1, n2):             # <<<<<<<<<<<<<<
 *       return self.thisptr.add_max(n1, n2)
 *    def add_min(self, unsigned int n1, n2):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_7add_max(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_7add_max(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_n1;
  PyObject *__pyx_v_n2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n1,&__pyx_n_s__n2,0};
  __Pyx_RefNannySetupContext("add_max");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_max", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add_max") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n1 = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_n1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_max", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.add_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":415
 *       return self.thisptr.get_max(n)
 *    def add_max(self, unsigned int n1, n2):
 *       return self.thisptr.add_max(n1, n2)             # <<<<<<<<<<<<<<
 *    def add_min(self, unsigned int n1, n2):
 *       return self.thisptr.add_min(n1, n2)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_n2); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->add_max(__pyx_v_n1, __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer.new_minmax.add_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":416
 *    def add_max(self, unsigned int n1, n2):
 *       return self.thisptr.add_max(n1, n2)
 *    def add_min(self, unsigned int n1, n2):             # <<<<<<<<<<<<<<
 *       return self.thisptr.add_min(n1, n2)
 *    def tablesize(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_8add_min(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_8add_min(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_n1;
  PyObject *__pyx_v_n2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__n1,&__pyx_n_s__n2,0};
  __Pyx_RefNannySetupContext("add_min");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_min", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add_min") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n1 = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_n1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_min", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.new_minmax.add_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":417
 *       return self.thisptr.add_max(n1, n2)
 *    def add_min(self, unsigned int n1, n2):
 *       return self.thisptr.add_min(n1, n2)             # <<<<<<<<<<<<<<
 *    def tablesize(self):
 *       return self.thisptr.get_tablesize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_n2); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->add_min(__pyx_v_n1, __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer.new_minmax.add_min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":418
 *    def add_min(self, unsigned int n1, n2):
 *       return self.thisptr.add_min(n1, n2)
 *    def tablesize(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_tablesize()
 * 
 */

static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_9tablesize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_10new_minmax_9tablesize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tablesize");

  /* "_khmermodule.pyx":419
 *       return self.thisptr.add_min(n1, n2)
 *    def tablesize(self):
 *       return self.thisptr.get_tablesize()             # <<<<<<<<<<<<<<
 * 
 * cdef class _new_hashbits
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_v_self)->thisptr->get_tablesize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.new_minmax.tablesize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":425
 * cdef class _new_counting_hash:
 *    cdef CountingHash *thisptr
 *    def __cinit__(self, WordLength ksize, arg):             # <<<<<<<<<<<<<<
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()
 *       if isinstance(arg, long) or isinstance(arg, int):
 */

static int __pyx_pf_5khmer_6_khmer_18_new_counting_hash___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_18_new_counting_hash___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_WordLength __pyx_v_ksize;
  PyObject *__pyx_v_arg = 0;
  std::vector<__pyx_t_5khmer_6_khmer_HashIntoType> __pyx_v_v;
  PyObject *__pyx_v_primes = NULL;
  PyObject *__pyx_v_prime = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ksize,&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ksize);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ksize = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_ksize == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_arg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":426
 *    cdef CountingHash *thisptr
 *    def __cinit__(self, WordLength ksize, arg):
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()             # <<<<<<<<<<<<<<
 *       if isinstance(arg, long) or isinstance(arg, int):
 *          self.thisptr = new CountingHash(ksize, <HashIntoType>arg)
 */
  __pyx_v_v = std::vector<__pyx_t_5khmer_6_khmer_HashIntoType>();

  /* "_khmermodule.pyx":427
 *    def __cinit__(self, WordLength ksize, arg):
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()
 *       if isinstance(arg, long) or isinstance(arg, int):             # <<<<<<<<<<<<<<
 *          self.thisptr = new CountingHash(ksize, <HashIntoType>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyLong_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_2) {
    __pyx_t_1 = ((PyObject *)((PyObject*)(&PyInt_Type)));
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  if (__pyx_t_4) {

    /* "_khmermodule.pyx":428
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()
 *       if isinstance(arg, long) or isinstance(arg, int):
 *          self.thisptr = new CountingHash(ksize, <HashIntoType>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          primes = <list>arg
 */
    __pyx_t_5 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_5 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr = new khmer::CountingHash(__pyx_v_ksize, ((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_5));
    goto __pyx_L6;
  }
  /*else*/ {

    /* "_khmermodule.pyx":430
 *          self.thisptr = new CountingHash(ksize, <HashIntoType>arg)
 *       else:
 *          primes = <list>arg             # <<<<<<<<<<<<<<
 *          for prime in primes:
 *             v.push_back(prime)
 */
    __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_v_arg)));
    __pyx_v_primes = ((PyObject*)__pyx_v_arg);

    /* "_khmermodule.pyx":431
 *       else:
 *          primes = <list>arg
 *          for prime in primes:             # <<<<<<<<<<<<<<
 *             v.push_back(prime)
 *          self.thisptr = new CountingHash(ksize, v)
 */
    if (unlikely(((PyObject *)__pyx_v_primes) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = ((PyObject *)__pyx_v_primes); __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++;
      __Pyx_XDECREF(__pyx_v_prime);
      __pyx_v_prime = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "_khmermodule.pyx":432
 *          primes = <list>arg
 *          for prime in primes:
 *             v.push_back(prime)             # <<<<<<<<<<<<<<
 *          self.thisptr = new CountingHash(ksize, v)
 *    def save(self, char* s):
 */
      __pyx_t_5 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_prime); if (unlikely((__pyx_t_5 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_v.push_back(__pyx_t_5);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_khmermodule.pyx":433
 *          for prime in primes:
 *             v.push_back(prime)
 *          self.thisptr = new CountingHash(ksize, v)             # <<<<<<<<<<<<<<
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 */
    ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr = new khmer::CountingHash(__pyx_v_ksize, __pyx_v_v);
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primes);
  __Pyx_XDECREF(__pyx_v_prime);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":434
 *             v.push_back(prime)
 *          self.thisptr = new CountingHash(ksize, v)
 *    def save(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_1save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_1save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":435
 *          self.thisptr = new CountingHash(ksize, v)
 *    def save(self, char* s):
 *       self.thisptr.save(s)             # <<<<<<<<<<<<<<
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->save(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":436
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 *    def load(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.load(s)
 *    def n_occupied(self, start=0, stop=0):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_2load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_2load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":437
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 *       self.thisptr.load(s)             # <<<<<<<<<<<<<<
 *    def n_occupied(self, start=0, stop=0):
 *       return self.thisptr.n_occupied(start, stop)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->load(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":438
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 *    def n_occupied(self, start=0, stop=0):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_occupied(start, stop)
 *    def n_entries(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_3n_occupied(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_3n_occupied(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_1;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__start,&__pyx_n_s__stop,0};
  __Pyx_RefNannySetupContext("n_occupied");
  {
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__stop);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "n_occupied") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = values[0];
    __pyx_v_stop = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("n_occupied", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.n_occupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":439
 *       self.thisptr.load(s)
 *    def n_occupied(self, start=0, stop=0):
 *       return self.thisptr.n_occupied(start, stop)             # <<<<<<<<<<<<<<
 *    def n_entries(self):
 *       return self.thisptr.n_entries()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_start); if (unlikely((__pyx_t_1 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_stop); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->n_occupied(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.n_occupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":440
 *    def n_occupied(self, start=0, stop=0):
 *       return self.thisptr.n_occupied(start, stop)
 *    def n_entries(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_entries()
 *    def ksize(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_4n_entries(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_4n_entries(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_entries");

  /* "_khmermodule.pyx":441
 *       return self.thisptr.n_occupied(start, stop)
 *    def n_entries(self):
 *       return self.thisptr.n_entries()             # <<<<<<<<<<<<<<
 *    def ksize(self):
 *       return self.thisptr.ksize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->n_entries()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.n_entries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":442
 *    def n_entries(self):
 *       return self.thisptr.n_entries()
 *    def ksize(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.ksize()
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_5ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_5ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ksize");

  /* "_khmermodule.pyx":443
 *       return self.thisptr.n_entries()
 *    def ksize(self):
 *       return self.thisptr.ksize()             # <<<<<<<<<<<<<<
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 *       return self.thisptr.consume_string(s, lower, upper)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->ksize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.ksize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":444
 *    def ksize(self):
 *       return self.thisptr.ksize()
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):             # <<<<<<<<<<<<<<
 *       return self.thisptr.consume_string(s, lower, upper)
 *    def count(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_6consume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_6consume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_lower;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_upper;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__lower,&__pyx_n_s__upper,0};
  __Pyx_RefNannySetupContext("consume");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_lower = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_lower == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lower = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    if (values[2]) {
      __pyx_v_upper = __Pyx_PyInt_AsUnsignedLongLong(values[2]); if (unlikely((__pyx_v_upper == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_upper = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":445
 *       return self.thisptr.ksize()
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 *       return self.thisptr.consume_string(s, lower, upper)             # <<<<<<<<<<<<<<
 *    def count(self, char* s):
 *       self.thisptr.count(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->consume_string(__pyx_v_s, __pyx_v_lower, __pyx_v_upper)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":446
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 *       return self.thisptr.consume_string(s, lower, upper)
 *    def count(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.count(s)
 *    def get_count(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_7count(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_7count(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":447
 *       return self.thisptr.consume_string(s, lower, upper)
 *    def count(self, char* s):
 *       self.thisptr.count(s)             # <<<<<<<<<<<<<<
 *    def get_count(self, char* s):
 *       return self.thisptr.get_count(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->count(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":448
 *    def count(self, char* s):
 *       self.thisptr.count(s)
 *    def get_count(self, char* s):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_count(s)
 *    def get(self, arg):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_8get_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_8get_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_count");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":449
 *       self.thisptr.count(s)
 *    def get_count(self, char* s):
 *       return self.thisptr.get_count(s)             # <<<<<<<<<<<<<<
 *    def get(self, arg):
 *       if isinstance(arg, str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_count(__pyx_v_s)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":450
 *    def get_count(self, char* s):
 *       return self.thisptr.get_count(s)
 *    def get(self, arg):             # <<<<<<<<<<<<<<
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_9get(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_9get(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get");

  /* "_khmermodule.pyx":451
 *       return self.thisptr.get_count(s)
 *    def get(self, arg):
 *       if isinstance(arg, str):             # <<<<<<<<<<<<<<
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyString_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":452
 *    def get(self, arg):
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_AsString(__pyx_v_arg); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_count(((char *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_khmermodule.pyx":454
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)             # <<<<<<<<<<<<<<
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_count(((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_4))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":455
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def __getitem__(self, arg):             # <<<<<<<<<<<<<<
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_10__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_10__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");

  /* "_khmermodule.pyx":456
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):             # <<<<<<<<<<<<<<
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyString_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":457
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_AsString(__pyx_v_arg); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_count(((char *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_khmermodule.pyx":459
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)             # <<<<<<<<<<<<<<
 *    def get_max_count(self, char* s, lower=0, upper=0):
 *       return self.thisptr.get_max_count(s, lower, upper)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_count(((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_4))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":460
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def get_max_count(self, char* s, lower=0, upper=0):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_max_count(s, lower, upper)
 *    def get_min_count(self, char* s, lower=0, upper=0):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_11get_max_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_11get_max_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  PyObject *__pyx_v_lower = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_1;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__lower,&__pyx_n_s__upper,0};
  __Pyx_RefNannySetupContext("get_max_count");
  {
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_max_count") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_lower = values[1];
    __pyx_v_upper = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_max_count", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_max_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":461
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def get_max_count(self, char* s, lower=0, upper=0):
 *       return self.thisptr.get_max_count(s, lower, upper)             # <<<<<<<<<<<<<<
 *    def get_min_count(self, char* s, lower=0, upper=0):
 *       return self.thisptr.get_min_count(s, lower, upper)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_lower); if (unlikely((__pyx_t_1 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_upper); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_max_count(__pyx_v_s, __pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_max_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":462
 *    def get_max_count(self, char* s, lower=0, upper=0):
 *       return self.thisptr.get_max_count(s, lower, upper)
 *    def get_min_count(self, char* s, lower=0, upper=0):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_min_count(s, lower, upper)
 *    def hashsizes(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_12get_min_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_12get_min_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  PyObject *__pyx_v_lower = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_1;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__lower,&__pyx_n_s__upper,0};
  __Pyx_RefNannySetupContext("get_min_count");
  {
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_min_count") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_lower = values[1];
    __pyx_v_upper = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_min_count", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_min_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":463
 *       return self.thisptr.get_max_count(s, lower, upper)
 *    def get_min_count(self, char* s, lower=0, upper=0):
 *       return self.thisptr.get_min_count(s, lower, upper)             # <<<<<<<<<<<<<<
 *    def hashsizes(self):
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_lower); if (unlikely((__pyx_t_1 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_upper); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_min_count(__pyx_v_s, __pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_min_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":464
 *    def get_min_count(self, char* s, lower=0, upper=0):
 *       return self.thisptr.get_min_count(s, lower, upper)
 *    def hashsizes(self):             # <<<<<<<<<<<<<<
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()
 *       hashes = []
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_13hashsizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_13hashsizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::vector<__pyx_t_5khmer_6_khmer_HashIntoType> __pyx_v_res;
  PyObject *__pyx_v_hashes = NULL;
  std::vector<__pyx_t_5khmer_6_khmer_HashIntoType>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hashsizes");

  /* "_khmermodule.pyx":465
 *       return self.thisptr.get_min_count(s, lower, upper)
 *    def hashsizes(self):
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()             # <<<<<<<<<<<<<<
 *       hashes = []
 * 
 */
  __pyx_v_res = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_tablesizes();

  /* "_khmermodule.pyx":466
 *    def hashsizes(self):
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()
 *       hashes = []             # <<<<<<<<<<<<<<
 * 
 *       cdef vector[HashIntoType].iterator it = res.begin()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_hashes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_khmermodule.pyx":468
 *       hashes = []
 * 
 *       cdef vector[HashIntoType].iterator it = res.begin()             # <<<<<<<<<<<<<<
 *       while it != res.end():
 *          hashes.append(deref(it))
 */
  __pyx_v_it = __pyx_v_res.begin();

  /* "_khmermodule.pyx":469
 * 
 *       cdef vector[HashIntoType].iterator it = res.begin()
 *       while it != res.end():             # <<<<<<<<<<<<<<
 *          hashes.append(deref(it))
 *          inc(it)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != __pyx_v_res.end());
    if (!__pyx_t_2) break;

    /* "_khmermodule.pyx":470
 *       cdef vector[HashIntoType].iterator it = res.begin()
 *       while it != res.end():
 *          hashes.append(deref(it))             # <<<<<<<<<<<<<<
 *          inc(it)
 *       return hashes
 */
    if (unlikely(((PyObject *)__pyx_v_hashes) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyLong_FromUnsignedLongLong((*__pyx_v_it)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyList_Append(__pyx_v_hashes, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_khmermodule.pyx":471
 *       while it != res.end():
 *          hashes.append(deref(it))
 *          inc(it)             # <<<<<<<<<<<<<<
 *       return hashes
 *    def output_fasta_kmer_pos_freq(self, char* input, char* output):
 */
    (++__pyx_v_it);
  }

  /* "_khmermodule.pyx":472
 *          hashes.append(deref(it))
 *          inc(it)
 *       return hashes             # <<<<<<<<<<<<<<
 *    def output_fasta_kmer_pos_freq(self, char* input, char* output):
 *       self.thisptr.output_fasta_kmer_pos_freq(input, output)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_hashes));
  __pyx_r = ((PyObject *)__pyx_v_hashes);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.hashsizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hashes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":473
 *          inc(it)
 *       return hashes
 *    def output_fasta_kmer_pos_freq(self, char* input, char* output):             # <<<<<<<<<<<<<<
 *       self.thisptr.output_fasta_kmer_pos_freq(input, output)
 *    def abundance_distribution(self, char* filename, _new_hashbits hb, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_14output_fasta_kmer_pos_freq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_14output_fasta_kmer_pos_freq(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_input;
  char *__pyx_v_output;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__input,&__pyx_n_s__output,0};
  __Pyx_RefNannySetupContext("output_fasta_kmer_pos_freq");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__output);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_fasta_kmer_pos_freq", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "output_fasta_kmer_pos_freq") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_input = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_input) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_output = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_output) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("output_fasta_kmer_pos_freq", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.output_fasta_kmer_pos_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":474
 *       return hashes
 *    def output_fasta_kmer_pos_freq(self, char* input, char* output):
 *       self.thisptr.output_fasta_kmer_pos_freq(input, output)             # <<<<<<<<<<<<<<
 *    def abundance_distribution(self, char* filename, _new_hashbits hb, callback_obj=None):
 *       cdef Hashbits* hbits = <Hashbits*>hb.thisptr
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->output_fasta_kmer_pos_freq(__pyx_v_input, __pyx_v_output);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":475
 *    def output_fasta_kmer_pos_freq(self, char* input, char* output):
 *       self.thisptr.output_fasta_kmer_pos_freq(input, output)
 *    def abundance_distribution(self, char* filename, _new_hashbits hb, callback_obj=None):             # <<<<<<<<<<<<<<
 *       cdef Hashbits* hbits = <Hashbits*>hb.thisptr
 * 
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_15abundance_distribution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_15abundance_distribution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  struct __pyx_obj_5khmer_6_khmer__new_hashbits *__pyx_v_hb = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::Hashbits *__pyx_v_hbits;
  PyObject *__pyx_v_dist = NULL;
  __pyx_t_5khmer_6_khmer_HashIntoType *__pyx_v_cdist;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5khmer_6_khmer_HashIntoType *__pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__hb,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("abundance_distribution");
  {
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hb);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("abundance_distribution", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "abundance_distribution") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_hb = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)values[1]);
    __pyx_v_callback_obj = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("abundance_distribution", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.abundance_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hb), __pyx_ptype_5khmer_6_khmer__new_hashbits, 1, "hb", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":476
 *       self.thisptr.output_fasta_kmer_pos_freq(input, output)
 *    def abundance_distribution(self, char* filename, _new_hashbits hb, callback_obj=None):
 *       cdef Hashbits* hbits = <Hashbits*>hb.thisptr             # <<<<<<<<<<<<<<
 * 
 *       global _callback_obj
 */
  __pyx_v_hbits = ((khmer::Hashbits *)__pyx_v_hb->thisptr);

  /* "_khmermodule.pyx":479
 * 
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":480
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       dist = []
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":482
 *          _callback_obj = callback_obj
 * 
 *       dist = []             # <<<<<<<<<<<<<<
 *       cdist = self.thisptr.abundance_distribution(filename, hbits, _report_fn, <void*>_callback_obj)
 *       for i in range(MAX_BIGCOUNT+1):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_dist = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":483
 * 
 *       dist = []
 *       cdist = self.thisptr.abundance_distribution(filename, hbits, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       for i in range(MAX_BIGCOUNT+1):
 *          dist.append(cdist[i])
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->abundance_distribution(__pyx_v_filename, __pyx_v_hbits, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cdist = __pyx_t_3;

  /* "_khmermodule.pyx":484
 *       dist = []
 *       cdist = self.thisptr.abundance_distribution(filename, hbits, _report_fn, <void*>_callback_obj)
 *       for i in range(MAX_BIGCOUNT+1):             # <<<<<<<<<<<<<<
 *          dist.append(cdist[i])
 *       return dist
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 65536; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "_khmermodule.pyx":485
 *       cdist = self.thisptr.abundance_distribution(filename, hbits, _report_fn, <void*>_callback_obj)
 *       for i in range(MAX_BIGCOUNT+1):
 *          dist.append(cdist[i])             # <<<<<<<<<<<<<<
 *       return dist
 *    def fasta_file_to_minmax(self, char* inputfile, unsigned int total_reads,
 */
    if (unlikely(((PyObject *)__pyx_v_dist) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = PyLong_FromUnsignedLongLong((__pyx_v_cdist[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyList_Append(__pyx_v_dist, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "_khmermodule.pyx":486
 *       for i in range(MAX_BIGCOUNT+1):
 *          dist.append(cdist[i])
 *       return dist             # <<<<<<<<<<<<<<
 *    def fasta_file_to_minmax(self, char* inputfile, unsigned int total_reads,
 *                             new_readmask readmask=None, callback_obj=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dist));
  __pyx_r = ((PyObject *)__pyx_v_dist);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.abundance_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":487
 *          dist.append(cdist[i])
 *       return dist
 *    def fasta_file_to_minmax(self, char* inputfile, unsigned int total_reads,             # <<<<<<<<<<<<<<
 *                             new_readmask readmask=None, callback_obj=None):
 *       global _callback_obj
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_16fasta_file_to_minmax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_16fasta_file_to_minmax(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_inputfile;
  unsigned int __pyx_v_total_reads;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::ReadMaskTable *__pyx_v_rm;
  khmer::MinMaxTable *__pyx_v_ret_minmax;
  struct __pyx_obj_5khmer_6_khmer_new_minmax *__pyx_v_return_minmax = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  khmer::MinMaxTable *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__inputfile,&__pyx_n_s__total_reads,&__pyx_n_s__readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("fasta_file_to_minmax");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":488
 *       return dist
 *    def fasta_file_to_minmax(self, char* inputfile, unsigned int total_reads,
 *                             new_readmask readmask=None, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[2] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__inputfile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__total_reads);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fasta_file_to_minmax", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__readmask);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "fasta_file_to_minmax") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inputfile = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_inputfile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_total_reads = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_total_reads == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[2]);
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fasta_file_to_minmax", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.fasta_file_to_minmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":490
 *                             new_readmask readmask=None, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":491
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       cdef ReadMaskTable* rm=NULL
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":493
 *          _callback_obj = callback_obj
 * 
 *       cdef ReadMaskTable* rm=NULL             # <<<<<<<<<<<<<<
 *       if readmask is not None:
 *          rm = <ReadMaskTable*> readmask.thisptr
 */
  __pyx_v_rm = NULL;

  /* "_khmermodule.pyx":494
 * 
 *       cdef ReadMaskTable* rm=NULL
 *       if readmask is not None:             # <<<<<<<<<<<<<<
 *          rm = <ReadMaskTable*> readmask.thisptr
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":495
 *       cdef ReadMaskTable* rm=NULL
 *       if readmask is not None:
 *          rm = <ReadMaskTable*> readmask.thisptr             # <<<<<<<<<<<<<<
 * 
 *       cdef MinMaxTable * ret_minmax = self.thisptr.fasta_file_to_minmax(inputfile,
 */
    __pyx_v_rm = ((khmer::ReadMaskTable *)__pyx_v_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":501
 *                                                                         rm,
 *                                                                         _report_fn,
 *                                                                         <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       return_minmax = new_minmax()
 *       return_minmax.thisptr = ret_minmax
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->fasta_file_to_minmax(__pyx_v_inputfile, __pyx_v_total_reads, __pyx_v_rm, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ret_minmax = __pyx_t_3;

  /* "_khmermodule.pyx":502
 *                                                                         _report_fn,
 *                                                                         <void*>_callback_obj)
 *       return_minmax = new_minmax()             # <<<<<<<<<<<<<<
 *       return_minmax.thisptr = ret_minmax
 *       return return_minmax
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_minmax)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_return_minmax = ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":503
 *                                                                         <void*>_callback_obj)
 *       return_minmax = new_minmax()
 *       return_minmax.thisptr = ret_minmax             # <<<<<<<<<<<<<<
 *       return return_minmax
 *    def filter_fasta_file_any(self, new_minmax minmax, BoundedCounterType threshold,
 */
  __pyx_v_return_minmax->thisptr = __pyx_v_ret_minmax;

  /* "_khmermodule.pyx":504
 *       return_minmax = new_minmax()
 *       return_minmax.thisptr = ret_minmax
 *       return return_minmax             # <<<<<<<<<<<<<<
 *    def filter_fasta_file_any(self, new_minmax minmax, BoundedCounterType threshold,
 *                              new_readmask in_readmask=None, callback_obj=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_return_minmax));
  __pyx_r = ((PyObject *)__pyx_v_return_minmax);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.fasta_file_to_minmax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_return_minmax);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":505
 *       return_minmax.thisptr = ret_minmax
 *       return return_minmax
 *    def filter_fasta_file_any(self, new_minmax minmax, BoundedCounterType threshold,             # <<<<<<<<<<<<<<
 *                              new_readmask in_readmask=None, callback_obj=None):
 *       global _callback_obj
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_17filter_fasta_file_any(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_17filter_fasta_file_any(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_6_khmer_new_minmax *__pyx_v_minmax = 0;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_threshold;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_in_readmask = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::ReadMaskTable *__pyx_v_in_rm;
  khmer::ReadMaskTable *__pyx_v_c_readmask;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  khmer::ReadMaskTable *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__minmax,&__pyx_n_s__threshold,&__pyx_n_s__in_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("filter_fasta_file_any");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":506
 *       return return_minmax
 *    def filter_fasta_file_any(self, new_minmax minmax, BoundedCounterType threshold,
 *                              new_readmask in_readmask=None, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[2] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minmax);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threshold);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_any", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__in_readmask);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "filter_fasta_file_any") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_minmax = ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)values[0]);
    __pyx_v_threshold = __Pyx_PyInt_AsUnsignedShort(values[1]); if (unlikely((__pyx_v_threshold == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[2]);
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_fasta_file_any", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_minmax), __pyx_ptype_5khmer_6_khmer_new_minmax, 1, "minmax", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 505; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "in_readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":508
 *                              new_readmask in_readmask=None, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":509
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":511
 *          _callback_obj = callback_obj
 * 
 *       cdef ReadMaskTable* in_rm=NULL             # <<<<<<<<<<<<<<
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 */
  __pyx_v_in_rm = NULL;

  /* "_khmermodule.pyx":512
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:             # <<<<<<<<<<<<<<
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_any(minmax.thisptr[0], threshold, in_rm, _report_fn, <void*>_callback_obj)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_in_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":513
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr             # <<<<<<<<<<<<<<
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_any(minmax.thisptr[0], threshold, in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()
 */
    __pyx_v_in_rm = ((khmer::ReadMaskTable *)__pyx_v_in_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":514
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_any(minmax.thisptr[0], threshold, in_rm, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->filter_fasta_file_any((__pyx_v_minmax->thisptr[0]), __pyx_v_threshold, __pyx_v_in_rm, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_readmask = __pyx_t_3;

  /* "_khmermodule.pyx":515
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_any(minmax.thisptr[0], threshold, in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()             # <<<<<<<<<<<<<<
 *       readmask.thisptr = c_readmask
 *       return readmask
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_readmask)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":516
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_any(minmax.thisptr[0], threshold, in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask             # <<<<<<<<<<<<<<
 *       return readmask
 *    def filter_fasta_file_all(self, new_minmax minmax, BoundedCounterType threshold,
 */
  __pyx_v_readmask->thisptr = __pyx_v_c_readmask;

  /* "_khmermodule.pyx":517
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 *       return readmask             # <<<<<<<<<<<<<<
 *    def filter_fasta_file_all(self, new_minmax minmax, BoundedCounterType threshold,
 *                              new_readmask in_readmask=None, callback_obj=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_readmask));
  __pyx_r = ((PyObject *)__pyx_v_readmask);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_any", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_readmask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":518
 *       readmask.thisptr = c_readmask
 *       return readmask
 *    def filter_fasta_file_all(self, new_minmax minmax, BoundedCounterType threshold,             # <<<<<<<<<<<<<<
 *                              new_readmask in_readmask=None, callback_obj=None):
 *       global _callback_obj
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_18filter_fasta_file_all(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_18filter_fasta_file_all(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_6_khmer_new_minmax *__pyx_v_minmax = 0;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_threshold;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_in_readmask = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::ReadMaskTable *__pyx_v_in_rm;
  khmer::ReadMaskTable *__pyx_v_c_readmask;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  khmer::ReadMaskTable *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__minmax,&__pyx_n_s__threshold,&__pyx_n_s__in_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("filter_fasta_file_all");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":519
 *       return readmask
 *    def filter_fasta_file_all(self, new_minmax minmax, BoundedCounterType threshold,
 *                              new_readmask in_readmask=None, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[2] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minmax);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threshold);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_all", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__in_readmask);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "filter_fasta_file_all") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_minmax = ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)values[0]);
    __pyx_v_threshold = __Pyx_PyInt_AsUnsignedShort(values[1]); if (unlikely((__pyx_v_threshold == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[2]);
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_fasta_file_all", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_minmax), __pyx_ptype_5khmer_6_khmer_new_minmax, 1, "minmax", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "in_readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":521
 *                              new_readmask in_readmask=None, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":522
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":524
 *          _callback_obj = callback_obj
 * 
 *       cdef ReadMaskTable* in_rm=NULL             # <<<<<<<<<<<<<<
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 */
  __pyx_v_in_rm = NULL;

  /* "_khmermodule.pyx":525
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:             # <<<<<<<<<<<<<<
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_all(minmax.thisptr[0], threshold,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_in_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":526
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr             # <<<<<<<<<<<<<<
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_all(minmax.thisptr[0], threshold,
 *                                         in_rm, _report_fn, <void*>_callback_obj)
 */
    __pyx_v_in_rm = ((khmer::ReadMaskTable *)__pyx_v_in_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":528
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_all(minmax.thisptr[0], threshold,
 *                                         in_rm, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->filter_fasta_file_all((__pyx_v_minmax->thisptr[0]), __pyx_v_threshold, __pyx_v_in_rm, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_readmask = __pyx_t_3;

  /* "_khmermodule.pyx":529
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_all(minmax.thisptr[0], threshold,
 *                                         in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()             # <<<<<<<<<<<<<<
 *       readmask.thisptr = c_readmask
 *       return readmask
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_readmask)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":530
 *                                         in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask             # <<<<<<<<<<<<<<
 *       return readmask
 *    def filter_fasta_file_limit_n(self, char* filename, new_minmax minmax,
 */
  __pyx_v_readmask->thisptr = __pyx_v_c_readmask;

  /* "_khmermodule.pyx":531
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 *       return readmask             # <<<<<<<<<<<<<<
 *    def filter_fasta_file_limit_n(self, char* filename, new_minmax minmax,
 *                                  BoundedCounterType threshold, BoundedCounterType n,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_readmask));
  __pyx_r = ((PyObject *)__pyx_v_readmask);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_readmask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":532
 *       readmask.thisptr = c_readmask
 *       return readmask
 *    def filter_fasta_file_limit_n(self, char* filename, new_minmax minmax,             # <<<<<<<<<<<<<<
 *                                  BoundedCounterType threshold, BoundedCounterType n,
 *                                  new_readmask in_readmask=None, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_19filter_fasta_file_limit_n(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_19filter_fasta_file_limit_n(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  struct __pyx_obj_5khmer_6_khmer_new_minmax *__pyx_v_minmax = 0;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_threshold;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_n;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_in_readmask = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::ReadMaskTable *__pyx_v_in_rm;
  khmer::ReadMaskTable *__pyx_v_c_readmask;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  khmer::ReadMaskTable *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__minmax,&__pyx_n_s__threshold,&__pyx_n_s__n,&__pyx_n_s__in_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("filter_fasta_file_limit_n");
  {
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "_khmermodule.pyx":534
 *    def filter_fasta_file_limit_n(self, char* filename, new_minmax minmax,
 *                                  BoundedCounterType threshold, BoundedCounterType n,
 *                                  new_readmask in_readmask=None, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[4] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minmax);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_limit_n", 0, 4, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threshold);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_limit_n", 0, 4, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_limit_n", 0, 4, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__in_readmask);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "filter_fasta_file_limit_n") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_minmax = ((struct __pyx_obj_5khmer_6_khmer_new_minmax *)values[1]);
    __pyx_v_threshold = __Pyx_PyInt_AsUnsignedShort(values[2]); if (unlikely((__pyx_v_threshold == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsUnsignedShort(values[3]); if (unlikely((__pyx_v_n == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[4]);
    __pyx_v_callback_obj = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_fasta_file_limit_n", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_limit_n", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_minmax), __pyx_ptype_5khmer_6_khmer_new_minmax, 1, "minmax", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "in_readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":536
 *                                  new_readmask in_readmask=None, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":537
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":539
 *          _callback_obj = callback_obj
 * 
 *       cdef ReadMaskTable* in_rm=NULL             # <<<<<<<<<<<<<<
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 */
  __pyx_v_in_rm = NULL;

  /* "_khmermodule.pyx":540
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:             # <<<<<<<<<<<<<<
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_limit_n(filename, minmax.thisptr[0],
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_in_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":541
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr             # <<<<<<<<<<<<<<
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_limit_n(filename, minmax.thisptr[0],
 *                                                                                threshold, n,
 */
    __pyx_v_in_rm = ((khmer::ReadMaskTable *)__pyx_v_in_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":544
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_limit_n(filename, minmax.thisptr[0],
 *                                                                                threshold, n,
 *                                                           in_rm, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->filter_fasta_file_limit_n(__pyx_v_filename, (__pyx_v_minmax->thisptr[0]), __pyx_v_threshold, __pyx_v_n, __pyx_v_in_rm, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_readmask = __pyx_t_3;

  /* "_khmermodule.pyx":545
 *                                                                                threshold, n,
 *                                                           in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()             # <<<<<<<<<<<<<<
 *       readmask.thisptr = c_readmask
 *       return readmask
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_readmask)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":546
 *                                                           in_rm, _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask             # <<<<<<<<<<<<<<
 *       return readmask
 *    def filter_fasta_file_run(self, char* inputfile, unsigned int total_reads,
 */
  __pyx_v_readmask->thisptr = __pyx_v_c_readmask;

  /* "_khmermodule.pyx":547
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 *       return readmask             # <<<<<<<<<<<<<<
 *    def filter_fasta_file_run(self, char* inputfile, unsigned int total_reads,
 *                              BoundedCounterType threshold, unsigned int runlength,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_readmask));
  __pyx_r = ((PyObject *)__pyx_v_readmask);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_limit_n", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_readmask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":548
 *       readmask.thisptr = c_readmask
 *       return readmask
 *    def filter_fasta_file_run(self, char* inputfile, unsigned int total_reads,             # <<<<<<<<<<<<<<
 *                              BoundedCounterType threshold, unsigned int runlength,
 *                              new_readmask in_readmask=None, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_20filter_fasta_file_run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_20filter_fasta_file_run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_inputfile;
  unsigned int __pyx_v_total_reads;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_threshold;
  unsigned int __pyx_v_runlength;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_in_readmask = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::ReadMaskTable *__pyx_v_in_rm;
  khmer::ReadMaskTable *__pyx_v_c_readmask;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  khmer::ReadMaskTable *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__inputfile,&__pyx_n_s__total_reads,&__pyx_n_s__threshold,&__pyx_n_s__runlength,&__pyx_n_s__in_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("filter_fasta_file_run");
  {
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "_khmermodule.pyx":550
 *    def filter_fasta_file_run(self, char* inputfile, unsigned int total_reads,
 *                              BoundedCounterType threshold, unsigned int runlength,
 *                              new_readmask in_readmask=None, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[4] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__inputfile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__total_reads);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_run", 0, 4, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threshold);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_run", 0, 4, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__runlength);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_fasta_file_run", 0, 4, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__in_readmask);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "filter_fasta_file_run") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inputfile = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_inputfile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_total_reads = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_total_reads == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_threshold = __Pyx_PyInt_AsUnsignedShort(values[2]); if (unlikely((__pyx_v_threshold == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_runlength = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_runlength == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[4]);
    __pyx_v_callback_obj = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_fasta_file_run", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "in_readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":552
 *                              new_readmask in_readmask=None, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":553
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":555
 *          _callback_obj = callback_obj
 * 
 *       cdef ReadMaskTable* in_rm=NULL             # <<<<<<<<<<<<<<
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 */
  __pyx_v_in_rm = NULL;

  /* "_khmermodule.pyx":556
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:             # <<<<<<<<<<<<<<
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_run(inputfile, total_reads,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_in_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":557
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr             # <<<<<<<<<<<<<<
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_run(inputfile, total_reads,
 *                                                                            threshold, runlength, in_rm,
 */
    __pyx_v_in_rm = ((khmer::ReadMaskTable *)__pyx_v_in_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":560
 *       cdef ReadMaskTable * c_readmask = self.thisptr.filter_fasta_file_run(inputfile, total_reads,
 *                                                                            threshold, runlength, in_rm,
 *                                                                            _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->filter_fasta_file_run(__pyx_v_inputfile, __pyx_v_total_reads, __pyx_v_threshold, __pyx_v_runlength, __pyx_v_in_rm, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c_readmask = __pyx_t_3;

  /* "_khmermodule.pyx":561
 *                                                                            threshold, runlength, in_rm,
 *                                                                            _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()             # <<<<<<<<<<<<<<
 *       readmask.thisptr = c_readmask
 *       return readmask
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_readmask)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":562
 *                                                                            _report_fn, <void*>_callback_obj)
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask             # <<<<<<<<<<<<<<
 *       return readmask
 *    def fasta_count_kmers_by_position(self, char* inputfile, unsigned int max_read_len,
 */
  __pyx_v_readmask->thisptr = __pyx_v_c_readmask;

  /* "_khmermodule.pyx":563
 *       readmask = new_readmask()
 *       readmask.thisptr = c_readmask
 *       return readmask             # <<<<<<<<<<<<<<
 *    def fasta_count_kmers_by_position(self, char* inputfile, unsigned int max_read_len,
 *                                      BoundedCounterType limit_by_count=0,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_readmask));
  __pyx_r = ((PyObject *)__pyx_v_readmask);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.filter_fasta_file_run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_readmask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":564
 *       readmask.thisptr = c_readmask
 *       return readmask
 *    def fasta_count_kmers_by_position(self, char* inputfile, unsigned int max_read_len,             # <<<<<<<<<<<<<<
 *                                      BoundedCounterType limit_by_count=0,
 *                                      new_readmask in_readmask=None,
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_21fasta_count_kmers_by_position(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_21fasta_count_kmers_by_position(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_inputfile;
  unsigned int __pyx_v_max_read_len;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_limit_by_count;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_in_readmask = 0;
  PyObject *__pyx_v_callback_obj = 0;
  khmer::ReadMaskTable *__pyx_v_in_rm;
  PyObject *__pyx_v_positions = NULL;
  __pyx_t_5khmer_6_khmer_HashIntoType *__pyx_v_cpositions;
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5khmer_6_khmer_HashIntoType *__pyx_t_3;
  unsigned int __pyx_t_4;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__inputfile,&__pyx_n_s__max_read_len,&__pyx_n_s__limit_by_count,&__pyx_n_s__in_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("fasta_count_kmers_by_position");
  {
    PyObject* values[5] = {0,0,0,0,0};

    /* "_khmermodule.pyx":566
 *    def fasta_count_kmers_by_position(self, char* inputfile, unsigned int max_read_len,
 *                                      BoundedCounterType limit_by_count=0,
 *                                      new_readmask in_readmask=None,             # <<<<<<<<<<<<<<
 *                                      callback_obj=None):
 *       global _callback_obj
 */
    values[3] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);

    /* "_khmermodule.pyx":567
 *                                      BoundedCounterType limit_by_count=0,
 *                                      new_readmask in_readmask=None,
 *                                      callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__inputfile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_read_len);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fasta_count_kmers_by_position", 0, 2, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__limit_by_count);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__in_readmask);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "fasta_count_kmers_by_position") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inputfile = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_inputfile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_read_len = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_max_read_len == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_limit_by_count = __Pyx_PyInt_AsUnsignedShort(values[2]); if (unlikely((__pyx_v_limit_by_count == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_limit_by_count = ((__pyx_t_5khmer_6_khmer_BoundedCounterType)0);
    }
    __pyx_v_in_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[3]);
    __pyx_v_callback_obj = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fasta_count_kmers_by_position", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.fasta_count_kmers_by_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "in_readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":569
 *                                      callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":570
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":572
 *          _callback_obj = callback_obj
 * 
 *       cdef ReadMaskTable* in_rm=NULL             # <<<<<<<<<<<<<<
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 */
  __pyx_v_in_rm = NULL;

  /* "_khmermodule.pyx":573
 * 
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:             # <<<<<<<<<<<<<<
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       positions = []
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_in_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":574
 *       cdef ReadMaskTable* in_rm=NULL
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr             # <<<<<<<<<<<<<<
 *       positions = []
 *       cpositions = self.thisptr.fasta_count_kmers_by_position(inputfile, max_read_len,
 */
    __pyx_v_in_rm = ((khmer::ReadMaskTable *)__pyx_v_in_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":575
 *       if in_readmask is not None:
 *          in_rm = <ReadMaskTable*> in_readmask.thisptr
 *       positions = []             # <<<<<<<<<<<<<<
 *       cpositions = self.thisptr.fasta_count_kmers_by_position(inputfile, max_read_len,
 *                                                               limit_by_count, in_rm,
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_positions = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":578
 *       cpositions = self.thisptr.fasta_count_kmers_by_position(inputfile, max_read_len,
 *                                                               limit_by_count, in_rm,
 *                                                               _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       for i in range(max_read_len):
 *          positions.append(cpositions[i])
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->fasta_count_kmers_by_position(__pyx_v_inputfile, __pyx_v_max_read_len, __pyx_v_limit_by_count, __pyx_v_in_rm, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cpositions = __pyx_t_3;

  /* "_khmermodule.pyx":579
 *                                                               limit_by_count, in_rm,
 *                                                               _report_fn, <void*>_callback_obj)
 *       for i in range(max_read_len):             # <<<<<<<<<<<<<<
 *          positions.append(cpositions[i])
 *       return positions
 */
  __pyx_t_4 = __pyx_v_max_read_len;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "_khmermodule.pyx":580
 *                                                               _report_fn, <void*>_callback_obj)
 *       for i in range(max_read_len):
 *          positions.append(cpositions[i])             # <<<<<<<<<<<<<<
 *       return positions
 *    def consume_fasta(self, char* filename, HashIntoType lower_bound=0,
 */
    if (unlikely(((PyObject *)__pyx_v_positions) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = PyLong_FromUnsignedLongLong((__pyx_v_cpositions[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyList_Append(__pyx_v_positions, __pyx_t_2); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "_khmermodule.pyx":581
 *       for i in range(max_read_len):
 *          positions.append(cpositions[i])
 *       return positions             # <<<<<<<<<<<<<<
 *    def consume_fasta(self, char* filename, HashIntoType lower_bound=0,
 *                      HashIntoType upper_bound=0, new_readmask readmask=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_positions));
  __pyx_r = ((PyObject *)__pyx_v_positions);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.fasta_count_kmers_by_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_positions);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":582
 *          positions.append(cpositions[i])
 *       return positions
 *    def consume_fasta(self, char* filename, HashIntoType lower_bound=0,             # <<<<<<<<<<<<<<
 *                      HashIntoType upper_bound=0, new_readmask readmask=None,
 *                      bool update_readmask=1, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_22consume_fasta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_22consume_fasta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_lower_bound;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_upper_bound;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = 0;
  bool __pyx_v_update_readmask;
  PyObject *__pyx_v_callback_obj = 0;
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  khmer::ReadMaskTable *__pyx_v_rm;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__lower_bound,&__pyx_n_s__upper_bound,&__pyx_n_s__readmask,&__pyx_n_s__update_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("consume_fasta");
  {
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "_khmermodule.pyx":583
 *       return positions
 *    def consume_fasta(self, char* filename, HashIntoType lower_bound=0,
 *                      HashIntoType upper_bound=0, new_readmask readmask=None,             # <<<<<<<<<<<<<<
 *                      bool update_readmask=1, callback_obj=None):
 *       global _callback_obj
 */
    values[3] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);

    /* "_khmermodule.pyx":584
 *    def consume_fasta(self, char* filename, HashIntoType lower_bound=0,
 *                      HashIntoType upper_bound=0, new_readmask readmask=None,
 *                      bool update_readmask=1, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       cdef unsigned long long n_consumed
 */
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower_bound);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper_bound);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__readmask);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__update_readmask);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_fasta") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_lower_bound = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_lower_bound == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lower_bound = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    if (values[2]) {
      __pyx_v_upper_bound = __Pyx_PyInt_AsUnsignedLongLong(values[2]); if (unlikely((__pyx_v_upper_bound == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_upper_bound = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[3]);
    if (values[4]) {
      __pyx_v_update_readmask = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_update_readmask == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_update_readmask = ((bool)1);
    }
    __pyx_v_callback_obj = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_fasta", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.consume_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":588
 *       cdef unsigned long long n_consumed
 *       cdef unsigned int total_reads
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       cdef ReadMaskTable* rm=NULL
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":589
 *       cdef unsigned int total_reads
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       cdef ReadMaskTable* rm=NULL
 *       if readmask is not None:
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":590
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       cdef ReadMaskTable* rm=NULL             # <<<<<<<<<<<<<<
 *       if readmask is not None:
 *          rm = <ReadMaskTable*> readmask.thisptr
 */
  __pyx_v_rm = NULL;

  /* "_khmermodule.pyx":591
 *          _callback_obj = callback_obj
 *       cdef ReadMaskTable* rm=NULL
 *       if readmask is not None:             # <<<<<<<<<<<<<<
 *          rm = <ReadMaskTable*> readmask.thisptr
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed, lower_bound,
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_readmask) != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":592
 *       cdef ReadMaskTable* rm=NULL
 *       if readmask is not None:
 *          rm = <ReadMaskTable*> readmask.thisptr             # <<<<<<<<<<<<<<
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed, lower_bound,
 *                                  upper_bound, &rm, update_readmask,
 */
    __pyx_v_rm = ((khmer::ReadMaskTable *)__pyx_v_readmask->thisptr);
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "_khmermodule.pyx":595
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed, lower_bound,
 *                                  upper_bound, &rm, update_readmask,
 *                                  _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       return total_reads, n_consumed
 *    def consume_fasta_build_readmask(self, char* filename, HashIntoType lower_bound=0,
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->consume_fasta(__pyx_v_filename, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_v_lower_bound, __pyx_v_upper_bound, (&__pyx_v_rm), __pyx_v_update_readmask, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_khmermodule.pyx":596
 *                                  upper_bound, &rm, update_readmask,
 *                                  _report_fn, <void*>_callback_obj)
 *       return total_reads, n_consumed             # <<<<<<<<<<<<<<
 *    def consume_fasta_build_readmask(self, char* filename, HashIntoType lower_bound=0,
 *                                     HashIntoType upper_bound=0, callback_obj=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.consume_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":597
 *                                  _report_fn, <void*>_callback_obj)
 *       return total_reads, n_consumed
 *    def consume_fasta_build_readmask(self, char* filename, HashIntoType lower_bound=0,             # <<<<<<<<<<<<<<
 *                                     HashIntoType upper_bound=0, callback_obj=None):
 *       global _callback_obj
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_23consume_fasta_build_readmask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_23consume_fasta_build_readmask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_lower_bound;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_upper_bound;
  PyObject *__pyx_v_callback_obj = 0;
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  khmer::ReadMaskTable *__pyx_v_readmask;
  bool __pyx_v_update_readmask;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_rm = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__lower_bound,&__pyx_n_s__upper_bound,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("consume_fasta_build_readmask");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":598
 *       return total_reads, n_consumed
 *    def consume_fasta_build_readmask(self, char* filename, HashIntoType lower_bound=0,
 *                                     HashIntoType upper_bound=0, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower_bound);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper_bound);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_fasta_build_readmask") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_lower_bound = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_lower_bound == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lower_bound = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    if (values[2]) {
      __pyx_v_upper_bound = __Pyx_PyInt_AsUnsignedLongLong(values[2]); if (unlikely((__pyx_v_upper_bound == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_upper_bound = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_fasta_build_readmask", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.consume_fasta_build_readmask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":600
 *                                     HashIntoType upper_bound=0, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       cdef unsigned long long n_consumed
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":601
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       cdef unsigned long long n_consumed
 *       cdef unsigned int total_reads
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":604
 *       cdef unsigned long long n_consumed
 *       cdef unsigned int total_reads
 *       cdef ReadMaskTable * readmask = NULL             # <<<<<<<<<<<<<<
 *       cdef bool update_readmask = 1
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed,
 */
  __pyx_v_readmask = NULL;

  /* "_khmermodule.pyx":605
 *       cdef unsigned int total_reads
 *       cdef ReadMaskTable * readmask = NULL
 *       cdef bool update_readmask = 1             # <<<<<<<<<<<<<<
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed,
 *                                  lower_bound, upper_bound, &readmask, update_readmask,
 */
  __pyx_v_update_readmask = 1;

  /* "_khmermodule.pyx":608
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed,
 *                                  lower_bound, upper_bound, &readmask, update_readmask,
 *                                  _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       rm = new_readmask()
 *       rm.thisptr = readmask
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->consume_fasta(__pyx_v_filename, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_v_lower_bound, __pyx_v_upper_bound, (&__pyx_v_readmask), __pyx_v_update_readmask, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_khmermodule.pyx":609
 *                                  lower_bound, upper_bound, &readmask, update_readmask,
 *                                  _report_fn, <void*>_callback_obj)
 *       rm = new_readmask()             # <<<<<<<<<<<<<<
 *       rm.thisptr = readmask
 *       return total_reads, n_consumed, rm
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer_new_readmask)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_rm = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":610
 *                                  _report_fn, <void*>_callback_obj)
 *       rm = new_readmask()
 *       rm.thisptr = readmask             # <<<<<<<<<<<<<<
 *       return total_reads, n_consumed, rm
 *    def fasta_dump_kmers_by_abundance(self, char* inputfile, new_readmask rm,
 */
  __pyx_v_rm->thisptr = __pyx_v_readmask;

  /* "_khmermodule.pyx":611
 *       rm = new_readmask()
 *       rm.thisptr = readmask
 *       return total_reads, n_consumed, rm             # <<<<<<<<<<<<<<
 *    def fasta_dump_kmers_by_abundance(self, char* inputfile, new_readmask rm,
 *                                      BoundedCounterType limit_by_count, callback_obj=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_rm));
  PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_rm));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rm));
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.consume_fasta_build_readmask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rm);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":612
 *       rm.thisptr = readmask
 *       return total_reads, n_consumed, rm
 *    def fasta_dump_kmers_by_abundance(self, char* inputfile, new_readmask rm,             # <<<<<<<<<<<<<<
 *                                      BoundedCounterType limit_by_count, callback_obj=None):
 *       global _callback_obj
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_24fasta_dump_kmers_by_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_24fasta_dump_kmers_by_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_inputfile;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_rm = 0;
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_limit_by_count;
  PyObject *__pyx_v_callback_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__inputfile,&__pyx_n_s__rm,&__pyx_n_s__limit_by_count,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("fasta_dump_kmers_by_abundance");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":613
 *       return total_reads, n_consumed, rm
 *    def fasta_dump_kmers_by_abundance(self, char* inputfile, new_readmask rm,
 *                                      BoundedCounterType limit_by_count, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__inputfile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rm);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fasta_dump_kmers_by_abundance", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__limit_by_count);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fasta_dump_kmers_by_abundance", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "fasta_dump_kmers_by_abundance") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inputfile = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_inputfile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rm = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[1]);
    __pyx_v_limit_by_count = __Pyx_PyInt_AsUnsignedShort(values[2]); if (unlikely((__pyx_v_limit_by_count == (unsigned short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fasta_dump_kmers_by_abundance", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.fasta_dump_kmers_by_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rm), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "rm", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":615
 *                                      BoundedCounterType limit_by_count, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       self.thisptr.fasta_dump_kmers_by_abundance(inputfile, rm.thisptr, limit_by_count,
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":616
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       self.thisptr.fasta_dump_kmers_by_abundance(inputfile, rm.thisptr, limit_by_count,
 *                                                  _report_fn, <void*>_callback_obj)
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":618
 *          _callback_obj = callback_obj
 *       self.thisptr.fasta_dump_kmers_by_abundance(inputfile, rm.thisptr, limit_by_count,
 *                                                  _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *    def set_use_bigcount(self, bool b):
 *       self.thisptr.set_use_bigcount(b)
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->fasta_dump_kmers_by_abundance(__pyx_v_inputfile, __pyx_v_rm->thisptr, __pyx_v_limit_by_count, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.fasta_dump_kmers_by_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":619
 *       self.thisptr.fasta_dump_kmers_by_abundance(inputfile, rm.thisptr, limit_by_count,
 *                                                  _report_fn, <void*>_callback_obj)
 *    def set_use_bigcount(self, bool b):             # <<<<<<<<<<<<<<
 *       self.thisptr.set_use_bigcount(b)
 *    def get_use_bigcount(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_25set_use_bigcount(PyObject *__pyx_v_self, PyObject *__pyx_arg_b); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_25set_use_bigcount(PyObject *__pyx_v_self, PyObject *__pyx_arg_b) {
  bool __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_use_bigcount");
  assert(__pyx_arg_b); {
    __pyx_v_b = __Pyx_PyObject_IsTrue(__pyx_arg_b); if (unlikely((__pyx_v_b == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.set_use_bigcount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":620
 *                                                  _report_fn, <void*>_callback_obj)
 *    def set_use_bigcount(self, bool b):
 *       self.thisptr.set_use_bigcount(b)             # <<<<<<<<<<<<<<
 *    def get_use_bigcount(self):
 *       return self.thisptr.get_use_bigcount()
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->set_use_bigcount(__pyx_v_b);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":621
 *    def set_use_bigcount(self, bool b):
 *       self.thisptr.set_use_bigcount(b)
 *    def get_use_bigcount(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.get_use_bigcount()
 *    def max_hamming1_count(self, char* kmer):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_26get_use_bigcount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_26get_use_bigcount(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_use_bigcount");

  /* "_khmermodule.pyx":622
 *       self.thisptr.set_use_bigcount(b)
 *    def get_use_bigcount(self):
 *       return self.thisptr.get_use_bigcount()             # <<<<<<<<<<<<<<
 *    def max_hamming1_count(self, char* kmer):
 *       return self.thisptr.max_hamming1_count(kmer)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_use_bigcount()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_use_bigcount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":623
 *    def get_use_bigcount(self):
 *       return self.thisptr.get_use_bigcount()
 *    def max_hamming1_count(self, char* kmer):             # <<<<<<<<<<<<<<
 *       return self.thisptr.max_hamming1_count(kmer)
 *    def trim_on_abundance(self, seq, unsigned int min_count):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_27max_hamming1_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_kmer); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_27max_hamming1_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_kmer) {
  char *__pyx_v_kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max_hamming1_count");
  assert(__pyx_arg_kmer); {
    __pyx_v_kmer = PyBytes_AsString(__pyx_arg_kmer); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.max_hamming1_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":624
 *       return self.thisptr.get_use_bigcount()
 *    def max_hamming1_count(self, char* kmer):
 *       return self.thisptr.max_hamming1_count(kmer)             # <<<<<<<<<<<<<<
 *    def trim_on_abundance(self, seq, unsigned int min_count):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_abundance(seq, min_count)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->max_hamming1_count(__pyx_v_kmer)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.max_hamming1_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":625
 *    def max_hamming1_count(self, char* kmer):
 *       return self.thisptr.max_hamming1_count(kmer)
 *    def trim_on_abundance(self, seq, unsigned int min_count):             # <<<<<<<<<<<<<<
 *       cdef unsigned int trim_at = self.thisptr.trim_on_abundance(seq, min_count)
 *       return seq[0:trim_at], trim_at
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_28trim_on_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_28trim_on_abundance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  unsigned int __pyx_v_min_count;
  unsigned int __pyx_v_trim_at;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__seq,&__pyx_n_s__min_count,0};
  __Pyx_RefNannySetupContext("trim_on_abundance");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__seq);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_count);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_on_abundance", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "trim_on_abundance") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_seq = values[0];
    __pyx_v_min_count = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_min_count == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trim_on_abundance", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.trim_on_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":626
 *       return self.thisptr.max_hamming1_count(kmer)
 *    def trim_on_abundance(self, seq, unsigned int min_count):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_abundance(seq, min_count)             # <<<<<<<<<<<<<<
 *       return seq[0:trim_at], trim_at
 *    def get_kmer_abund_abs_deviation(self, char* filename, float mean):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_trim_at = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->trim_on_abundance(__pyx_t_1, __pyx_v_min_count);

  /* "_khmermodule.pyx":627
 *    def trim_on_abundance(self, seq, unsigned int min_count):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_abundance(seq, min_count)
 *       return seq[0:trim_at], trim_at             # <<<<<<<<<<<<<<
 *    def get_kmer_abund_abs_deviation(self, char* filename, float mean):
 *       cdef float abs_dev = 0.0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PySequence_GetSlice(__pyx_v_seq, 0, __pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_v_trim_at); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.trim_on_abundance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":628
 *       cdef unsigned int trim_at = self.thisptr.trim_on_abundance(seq, min_count)
 *       return seq[0:trim_at], trim_at
 *    def get_kmer_abund_abs_deviation(self, char* filename, float mean):             # <<<<<<<<<<<<<<
 *       cdef float abs_dev = 0.0
 *       self.thisptr.get_kmer_abund_abs_deviation(filename, mean, abs_dev)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_29get_kmer_abund_abs_deviation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_29get_kmer_abund_abs_deviation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  float __pyx_v_mean;
  float __pyx_v_abs_dev;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__mean,0};
  __Pyx_RefNannySetupContext("get_kmer_abund_abs_deviation");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__mean);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_kmer_abund_abs_deviation", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "get_kmer_abund_abs_deviation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_mean = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_mean == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_kmer_abund_abs_deviation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_kmer_abund_abs_deviation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":629
 *       return seq[0:trim_at], trim_at
 *    def get_kmer_abund_abs_deviation(self, char* filename, float mean):
 *       cdef float abs_dev = 0.0             # <<<<<<<<<<<<<<
 *       self.thisptr.get_kmer_abund_abs_deviation(filename, mean, abs_dev)
 *       return abs_dev
 */
  __pyx_v_abs_dev = 0.0;

  /* "_khmermodule.pyx":630
 *    def get_kmer_abund_abs_deviation(self, char* filename, float mean):
 *       cdef float abs_dev = 0.0
 *       self.thisptr.get_kmer_abund_abs_deviation(filename, mean, abs_dev)             # <<<<<<<<<<<<<<
 *       return abs_dev
 *    def get_kmer_abund_mean(self, char* filename):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_kmer_abund_abs_deviation(__pyx_v_filename, __pyx_v_mean, __pyx_v_abs_dev);

  /* "_khmermodule.pyx":631
 *       cdef float abs_dev = 0.0
 *       self.thisptr.get_kmer_abund_abs_deviation(filename, mean, abs_dev)
 *       return abs_dev             # <<<<<<<<<<<<<<
 *    def get_kmer_abund_mean(self, char* filename):
 *       cdef unsigned long long total = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_abs_dev); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_kmer_abund_abs_deviation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":632
 *       self.thisptr.get_kmer_abund_abs_deviation(filename, mean, abs_dev)
 *       return abs_dev
 *    def get_kmer_abund_mean(self, char* filename):             # <<<<<<<<<<<<<<
 *       cdef unsigned long long total = 0
 *       cdef unsigned long long count = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_30get_kmer_abund_mean(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_30get_kmer_abund_mean(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  unsigned PY_LONG_LONG __pyx_v_total;
  unsigned PY_LONG_LONG __pyx_v_count;
  float __pyx_v_mean;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_kmer_abund_mean");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_kmer_abund_mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":633
 *       return abs_dev
 *    def get_kmer_abund_mean(self, char* filename):
 *       cdef unsigned long long total = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned long long count = 0
 *       cdef float mean = 0.0
 */
  __pyx_v_total = 0;

  /* "_khmermodule.pyx":634
 *    def get_kmer_abund_mean(self, char* filename):
 *       cdef unsigned long long total = 0
 *       cdef unsigned long long count = 0             # <<<<<<<<<<<<<<
 *       cdef float mean = 0.0
 *       self.thisptr.get_kmer_abund_mean(filename, total, count, mean)
 */
  __pyx_v_count = 0;

  /* "_khmermodule.pyx":635
 *       cdef unsigned long long total = 0
 *       cdef unsigned long long count = 0
 *       cdef float mean = 0.0             # <<<<<<<<<<<<<<
 *       self.thisptr.get_kmer_abund_mean(filename, total, count, mean)
 *       return total, count, mean
 */
  __pyx_v_mean = 0.0;

  /* "_khmermodule.pyx":636
 *       cdef unsigned long long count = 0
 *       cdef float mean = 0.0
 *       self.thisptr.get_kmer_abund_mean(filename, total, count, mean)             # <<<<<<<<<<<<<<
 *       return total, count, mean
 *    def get_median_count(self, s):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_kmer_abund_mean(__pyx_v_filename, __pyx_v_total, __pyx_v_count, __pyx_v_mean);

  /* "_khmermodule.pyx":637
 *       cdef float mean = 0.0
 *       self.thisptr.get_kmer_abund_mean(filename, total, count, mean)
 *       return total, count, mean             # <<<<<<<<<<<<<<
 *    def get_median_count(self, s):
 *       cdef BoundedCounterType med = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(__pyx_v_total); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyLong_FromUnsignedLongLong(__pyx_v_count); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_mean); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_kmer_abund_mean", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":638
 *       self.thisptr.get_kmer_abund_mean(filename, total, count, mean)
 *       return total, count, mean
 *    def get_median_count(self, s):             # <<<<<<<<<<<<<<
 *       cdef BoundedCounterType med = 0
 *       cdef float average = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_31get_median_count(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_18_new_counting_hash_31get_median_count(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  __pyx_t_5khmer_6_khmer_BoundedCounterType __pyx_v_med;
  float __pyx_v_average;
  float __pyx_v_stddev;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_median_count");

  /* "_khmermodule.pyx":639
 *       return total, count, mean
 *    def get_median_count(self, s):
 *       cdef BoundedCounterType med = 0             # <<<<<<<<<<<<<<
 *       cdef float average = 0
 *       cdef float stddev = 0
 */
  __pyx_v_med = 0;

  /* "_khmermodule.pyx":640
 *    def get_median_count(self, s):
 *       cdef BoundedCounterType med = 0
 *       cdef float average = 0             # <<<<<<<<<<<<<<
 *       cdef float stddev = 0
 *       self.thisptr.get_median_count(s, med, average, stddev)
 */
  __pyx_v_average = 0.0;

  /* "_khmermodule.pyx":641
 *       cdef BoundedCounterType med = 0
 *       cdef float average = 0
 *       cdef float stddev = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.get_median_count(s, med, average, stddev)
 *       return med, average, stddev
 */
  __pyx_v_stddev = 0.0;

  /* "_khmermodule.pyx":642
 *       cdef float average = 0
 *       cdef float stddev = 0
 *       self.thisptr.get_median_count(s, med, average, stddev)             # <<<<<<<<<<<<<<
 *       return med, average, stddev
 * 
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)__pyx_v_self)->thisptr->get_median_count(__pyx_t_1, __pyx_v_med, __pyx_v_average, __pyx_v_stddev);

  /* "_khmermodule.pyx":643
 *       cdef float stddev = 0
 *       self.thisptr.get_median_count(s, med, average, stddev)
 *       return med, average, stddev             # <<<<<<<<<<<<<<
 * 
 * def forward_hash(char* s, WordLength k):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_med); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_average); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_stddev); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._khmer._new_counting_hash.get_median_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":645
 *       return med, average, stddev
 * 
 * def forward_hash(char* s, WordLength k):             # <<<<<<<<<<<<<<
 *    return _hash(s, k)
 * def forward_hash_no_rc(char* s, WordLength k):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_1forward_hash(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_6_khmer_1forward_hash = {__Pyx_NAMESTR("forward_hash"), (PyCFunction)__pyx_pf_5khmer_6_khmer_1forward_hash, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5khmer_6_khmer_1forward_hash(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  __pyx_t_5khmer_6_khmer_WordLength __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__k,0};
  __Pyx_RefNannySetupContext("forward_hash");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__k);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("forward_hash", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "forward_hash") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_k = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_k == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forward_hash", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.forward_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":646
 * 
 * def forward_hash(char* s, WordLength k):
 *    return _hash(s, k)             # <<<<<<<<<<<<<<
 * def forward_hash_no_rc(char* s, WordLength k):
 *    return _hash_forward(s, k)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(khmer::_hash(__pyx_v_s, __pyx_v_k)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.forward_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":647
 * def forward_hash(char* s, WordLength k):
 *    return _hash(s, k)
 * def forward_hash_no_rc(char* s, WordLength k):             # <<<<<<<<<<<<<<
 *    return _hash_forward(s, k)
 * def reverse_hash(HashIntoType h, WordLength k):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_2forward_hash_no_rc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_6_khmer_2forward_hash_no_rc = {__Pyx_NAMESTR("forward_hash_no_rc"), (PyCFunction)__pyx_pf_5khmer_6_khmer_2forward_hash_no_rc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5khmer_6_khmer_2forward_hash_no_rc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  __pyx_t_5khmer_6_khmer_WordLength __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__k,0};
  __Pyx_RefNannySetupContext("forward_hash_no_rc");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__k);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("forward_hash_no_rc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "forward_hash_no_rc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_k = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_k == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forward_hash_no_rc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.forward_hash_no_rc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":648
 *    return _hash(s, k)
 * def forward_hash_no_rc(char* s, WordLength k):
 *    return _hash_forward(s, k)             # <<<<<<<<<<<<<<
 * def reverse_hash(HashIntoType h, WordLength k):
 *    cdef string s = _revhash(h, k)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(khmer::_hash_forward(__pyx_v_s, __pyx_v_k)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.forward_hash_no_rc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":649
 * def forward_hash_no_rc(char* s, WordLength k):
 *    return _hash_forward(s, k)
 * def reverse_hash(HashIntoType h, WordLength k):             # <<<<<<<<<<<<<<
 *    cdef string s = _revhash(h, k)
 *    cdef char *cstr = <char *>malloc(s.length() + 1)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_3reverse_hash(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5khmer_6_khmer_3reverse_hash = {__Pyx_NAMESTR("reverse_hash"), (PyCFunction)__pyx_pf_5khmer_6_khmer_3reverse_hash, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_5khmer_6_khmer_3reverse_hash(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_h;
  __pyx_t_5khmer_6_khmer_WordLength __pyx_v_k;
  std::string __pyx_v_s;
  char *__pyx_v_cstr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__h,&__pyx_n_s__k,0};
  __Pyx_RefNannySetupContext("reverse_hash");
  __pyx_self = __pyx_self;
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__h);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__k);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reverse_hash", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "reverse_hash") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_h = __Pyx_PyInt_AsUnsignedLongLong(values[0]); if (unlikely((__pyx_v_h == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_k = __Pyx_PyInt_AsUnsignedChar(values[1]); if (unlikely((__pyx_v_k == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reverse_hash", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer.reverse_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":650
 *    return _hash_forward(s, k)
 * def reverse_hash(HashIntoType h, WordLength k):
 *    cdef string s = _revhash(h, k)             # <<<<<<<<<<<<<<
 *    cdef char *cstr = <char *>malloc(s.length() + 1)
 *    strcpy(cstr, s.c_str())
 */
  __pyx_v_s = khmer::_revhash(__pyx_v_h, __pyx_v_k);

  /* "_khmermodule.pyx":651
 * def reverse_hash(HashIntoType h, WordLength k):
 *    cdef string s = _revhash(h, k)
 *    cdef char *cstr = <char *>malloc(s.length() + 1)             # <<<<<<<<<<<<<<
 *    strcpy(cstr, s.c_str())
 *    return cstr
 */
  __pyx_v_cstr = ((char *)malloc((__pyx_v_s.length() + 1)));

  /* "_khmermodule.pyx":652
 *    cdef string s = _revhash(h, k)
 *    cdef char *cstr = <char *>malloc(s.length() + 1)
 *    strcpy(cstr, s.c_str())             # <<<<<<<<<<<<<<
 *    return cstr
 * 
 */
  strcpy(__pyx_v_cstr, __pyx_v_s.c_str());

  /* "_khmermodule.pyx":653
 *    cdef char *cstr = <char *>malloc(s.length() + 1)
 *    strcpy(cstr, s.c_str())
 *    return cstr             # <<<<<<<<<<<<<<
 * 
 * cdef class _new_subsetpartition
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(__pyx_v_cstr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer.reverse_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":659
 * cdef class _new_hashbits:
 *    cdef Hashbits *thisptr
 *    def __cinit__(self, WordLength k, list primes):             # <<<<<<<<<<<<<<
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()
 *       for prime in primes:
 */

static int __pyx_pf_5khmer_6_khmer_13_new_hashbits___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_13_new_hashbits___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_WordLength __pyx_v_k;
  PyObject *__pyx_v_primes = 0;
  std::vector<__pyx_t_5khmer_6_khmer_HashIntoType> __pyx_v_v;
  PyObject *__pyx_v_prime = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__k,&__pyx_n_s__primes,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__k);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__primes);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_k = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_k == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_primes = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_primes), (&PyList_Type), 1, "primes", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":660
 *    cdef Hashbits *thisptr
 *    def __cinit__(self, WordLength k, list primes):
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()             # <<<<<<<<<<<<<<
 *       for prime in primes:
 *          v.push_back(prime)
 */
  __pyx_v_v = std::vector<__pyx_t_5khmer_6_khmer_HashIntoType>();

  /* "_khmermodule.pyx":661
 *    def __cinit__(self, WordLength k, list primes):
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()
 *       for prime in primes:             # <<<<<<<<<<<<<<
 *          v.push_back(prime)
 *       self.thisptr = new Hashbits(k, v)
 */
  if (unlikely(((PyObject *)__pyx_v_primes) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = ((PyObject *)__pyx_v_primes); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++;
    __Pyx_XDECREF(__pyx_v_prime);
    __pyx_v_prime = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "_khmermodule.pyx":662
 *       cdef vector[HashIntoType] v = vector[HashIntoType]()
 *       for prime in primes:
 *          v.push_back(prime)             # <<<<<<<<<<<<<<
 *       self.thisptr = new Hashbits(k, v)
 *    def n_occupied(self):
 */
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_prime); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_khmermodule.pyx":663
 *       for prime in primes:
 *          v.push_back(prime)
 *       self.thisptr = new Hashbits(k, v)             # <<<<<<<<<<<<<<
 *    def n_occupied(self):
 *       return self.thisptr.n_occupied(0, 0)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr = new khmer::Hashbits(__pyx_v_k, __pyx_v_v);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_prime);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":664
 *          v.push_back(prime)
 *       self.thisptr = new Hashbits(k, v)
 *    def n_occupied(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_occupied(0, 0)
 *    def n_unique_kmers(self, HashIntoType a=0, HashIntoType b=0):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_1n_occupied(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_1n_occupied(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_occupied");

  /* "_khmermodule.pyx":665
 *       self.thisptr = new Hashbits(k, v)
 *    def n_occupied(self):
 *       return self.thisptr.n_occupied(0, 0)             # <<<<<<<<<<<<<<
 *    def n_unique_kmers(self, HashIntoType a=0, HashIntoType b=0):
 *       return self.thisptr.n_kmers(a, b)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->n_occupied(0, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.n_occupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":666
 *    def n_occupied(self):
 *       return self.thisptr.n_occupied(0, 0)
 *    def n_unique_kmers(self, HashIntoType a=0, HashIntoType b=0):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_kmers(a, b)
 *    def ksize(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_2n_unique_kmers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_2n_unique_kmers(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_a;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,0};
  __Pyx_RefNannySetupContext("n_unique_kmers");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "n_unique_kmers") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_a = __Pyx_PyInt_AsUnsignedLongLong(values[0]); if (unlikely((__pyx_v_a == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_a = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    if (values[1]) {
      __pyx_v_b = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_b == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_b = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("n_unique_kmers", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.n_unique_kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":667
 *       return self.thisptr.n_occupied(0, 0)
 *    def n_unique_kmers(self, HashIntoType a=0, HashIntoType b=0):
 *       return self.thisptr.n_kmers(a, b)             # <<<<<<<<<<<<<<
 *    def ksize(self):
 *       return self.thisptr.ksize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->n_kmers(__pyx_v_a, __pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.n_unique_kmers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":668
 *    def n_unique_kmers(self, HashIntoType a=0, HashIntoType b=0):
 *       return self.thisptr.n_kmers(a, b)
 *    def ksize(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.ksize()
 *    def count(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_3ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_3ksize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ksize");

  /* "_khmermodule.pyx":669
 *       return self.thisptr.n_kmers(a, b)
 *    def ksize(self):
 *       return self.thisptr.ksize()             # <<<<<<<<<<<<<<
 *    def count(self, char* s):
 *       self.thisptr.count(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->ksize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.ksize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":670
 *    def ksize(self):
 *       return self.thisptr.ksize()
 *    def count(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.count(s)
 *    def count(self, HashIntoType n):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_4count(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_4count(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":671
 *       return self.thisptr.ksize()
 *    def count(self, char* s):
 *       self.thisptr.count(s)             # <<<<<<<<<<<<<<
 *    def count(self, HashIntoType n):
 *       self.thisptr.count(n)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->count(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":672
 *    def count(self, char* s):
 *       self.thisptr.count(s)
 *    def count(self, HashIntoType n):             # <<<<<<<<<<<<<<
 *       self.thisptr.count(n)
 *    def get(self, arg):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_5count(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_5count(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count");
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_AsUnsignedLongLong(__pyx_arg_n); if (unlikely((__pyx_v_n == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":673
 *       self.thisptr.count(s)
 *    def count(self, HashIntoType n):
 *       self.thisptr.count(n)             # <<<<<<<<<<<<<<
 *    def get(self, arg):
 *       if isinstance(arg, str):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->count(__pyx_v_n);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":674
 *    def count(self, HashIntoType n):
 *       self.thisptr.count(n)
 *    def get(self, arg):             # <<<<<<<<<<<<<<
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_6get(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_6get(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get");

  /* "_khmermodule.pyx":675
 *       self.thisptr.count(n)
 *    def get(self, arg):
 *       if isinstance(arg, str):             # <<<<<<<<<<<<<<
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyString_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":676
 *    def get(self, arg):
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_AsString(__pyx_v_arg); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->get_count(((char *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_khmermodule.pyx":678
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)             # <<<<<<<<<<<<<<
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->get_count(((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_4))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":679
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def __getitem__(self, arg):             # <<<<<<<<<<<<<<
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  char *__pyx_t_3;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__");

  /* "_khmermodule.pyx":680
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):             # <<<<<<<<<<<<<<
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyString_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "_khmermodule.pyx":681
 *    def __getitem__(self, arg):
 *       if isinstance(arg, str):
 *          return self.thisptr.get_count(<char*>arg)             # <<<<<<<<<<<<<<
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_AsString(__pyx_v_arg); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->get_count(((char *)__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "_khmermodule.pyx":683
 *          return self.thisptr.get_count(<char*>arg)
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)             # <<<<<<<<<<<<<<
 *    def n_tags(self):
 *       return self.thisptr.n_tags()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedLongLong(__pyx_v_arg); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->get_count(((__pyx_t_5khmer_6_khmer_HashIntoType)__pyx_t_4))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":684
 *       else:
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def n_tags(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr.n_tags()
 *    def save(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_8n_tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_8n_tags(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_tags");

  /* "_khmermodule.pyx":685
 *          return self.thisptr.get_count(<HashIntoType>arg)
 *    def n_tags(self):
 *       return self.thisptr.n_tags()             # <<<<<<<<<<<<<<
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->n_tags()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.n_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":686
 *    def n_tags(self):
 *       return self.thisptr.n_tags()
 *    def save(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_9save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_9save(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":687
 *       return self.thisptr.n_tags()
 *    def save(self, char* s):
 *       self.thisptr.save(s)             # <<<<<<<<<<<<<<
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->save(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":688
 *    def save(self, char* s):
 *       self.thisptr.save(s)
 *    def load(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.load(s)
 *    def save_tagset(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_10load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_10load(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":689
 *       self.thisptr.save(s)
 *    def load(self, char* s):
 *       self.thisptr.load(s)             # <<<<<<<<<<<<<<
 *    def save_tagset(self, char* s):
 *       self.thisptr.save_tagset(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->load(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":690
 *    def load(self, char* s):
 *       self.thisptr.load(s)
 *    def save_tagset(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.save_tagset(s)
 *    def load_tagset(self, char* s, bool clear_tags=1):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_11save_tagset(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_11save_tagset(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_tagset");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.save_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":691
 *       self.thisptr.load(s)
 *    def save_tagset(self, char* s):
 *       self.thisptr.save_tagset(s)             # <<<<<<<<<<<<<<
 *    def load_tagset(self, char* s, bool clear_tags=1):
 *       self.thisptr.load_tagset(s, clear_tags)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->save_tagset(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":692
 *    def save_tagset(self, char* s):
 *       self.thisptr.save_tagset(s)
 *    def load_tagset(self, char* s, bool clear_tags=1):             # <<<<<<<<<<<<<<
 *       self.thisptr.load_tagset(s, clear_tags)
 *    def count_kmers_within_radius(self, char* kmer,
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_12load_tagset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_12load_tagset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  bool __pyx_v_clear_tags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__clear_tags,0};
  __Pyx_RefNannySetupContext("load_tagset");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__clear_tags);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "load_tagset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_clear_tags = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_clear_tags == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_clear_tags = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_tagset", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.load_tagset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":693
 *       self.thisptr.save_tagset(s)
 *    def load_tagset(self, char* s, bool clear_tags=1):
 *       self.thisptr.load_tagset(s, clear_tags)             # <<<<<<<<<<<<<<
 *    def count_kmers_within_radius(self, char* kmer,
 *                                  unsigned int n1=0, unsigned int n2=0):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->load_tagset(__pyx_v_s, __pyx_v_clear_tags);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":694
 *    def load_tagset(self, char* s, bool clear_tags=1):
 *       self.thisptr.load_tagset(s, clear_tags)
 *    def count_kmers_within_radius(self, char* kmer,             # <<<<<<<<<<<<<<
 *                                  unsigned int n1=0, unsigned int n2=0):
 *       cdef HashIntoType h1 = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_13count_kmers_within_radius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_13count_kmers_within_radius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_kmer;
  unsigned int __pyx_v_n1;
  unsigned int __pyx_v_n2;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_h1;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_h2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__kmer,&__pyx_n_s__n1,&__pyx_n_s__n2,0};
  __Pyx_RefNannySetupContext("count_kmers_within_radius");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n1);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n2);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "count_kmers_within_radius") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kmer = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_n1 = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_n1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_n1 = ((unsigned int)0);
    }
    if (values[2]) {
      __pyx_v_n2 = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_n2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_n2 = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_kmers_within_radius", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count_kmers_within_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":696
 *    def count_kmers_within_radius(self, char* kmer,
 *                                  unsigned int n1=0, unsigned int n2=0):
 *       cdef HashIntoType h1 = 0             # <<<<<<<<<<<<<<
 *       cdef HashIntoType h2 = 0
 *       _hash(kmer, self.thisptr.ksize(), h1, h2)
 */
  __pyx_v_h1 = 0;

  /* "_khmermodule.pyx":697
 *                                  unsigned int n1=0, unsigned int n2=0):
 *       cdef HashIntoType h1 = 0
 *       cdef HashIntoType h2 = 0             # <<<<<<<<<<<<<<
 *       _hash(kmer, self.thisptr.ksize(), h1, h2)
 *       return self.thisptr.count_kmers_within_radius(h1, h2, n1, n2)
 */
  __pyx_v_h2 = 0;

  /* "_khmermodule.pyx":698
 *       cdef HashIntoType h1 = 0
 *       cdef HashIntoType h2 = 0
 *       _hash(kmer, self.thisptr.ksize(), h1, h2)             # <<<<<<<<<<<<<<
 *       return self.thisptr.count_kmers_within_radius(h1, h2, n1, n2)
 *    def calc_connected_graph_size(self, char * kmer,
 */
  khmer::_hash(__pyx_v_kmer, ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->ksize(), __pyx_v_h1, __pyx_v_h2);

  /* "_khmermodule.pyx":699
 *       cdef HashIntoType h2 = 0
 *       _hash(kmer, self.thisptr.ksize(), h1, h2)
 *       return self.thisptr.count_kmers_within_radius(h1, h2, n1, n2)             # <<<<<<<<<<<<<<
 *    def calc_connected_graph_size(self, char * kmer,
 *                                  unsigned long long max_size=0,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->count_kmers_within_radius(__pyx_v_h1, __pyx_v_h2, __pyx_v_n1, __pyx_v_n2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count_kmers_within_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":700
 *       _hash(kmer, self.thisptr.ksize(), h1, h2)
 *       return self.thisptr.count_kmers_within_radius(h1, h2, n1, n2)
 *    def calc_connected_graph_size(self, char * kmer,             # <<<<<<<<<<<<<<
 *                                  unsigned long long max_size=0,
 *                                  bool break_on_circum=0):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_14calc_connected_graph_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_14calc_connected_graph_size(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_kmer;
  unsigned PY_LONG_LONG __pyx_v_max_size;
  bool __pyx_v_break_on_circum;
  std::set<__pyx_t_5khmer_6_khmer_HashIntoType> *__pyx_v_keeper;
  unsigned PY_LONG_LONG __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__kmer,&__pyx_n_s__max_size,&__pyx_n_s__break_on_circum,0};
  __Pyx_RefNannySetupContext("calc_connected_graph_size");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_size);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__break_on_circum);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "calc_connected_graph_size") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kmer = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_max_size = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_max_size == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_size = ((unsigned PY_LONG_LONG)0);
    }
    if (values[2]) {
      __pyx_v_break_on_circum = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_break_on_circum == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_break_on_circum = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_connected_graph_size", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.calc_connected_graph_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":703
 *                                  unsigned long long max_size=0,
 *                                  bool break_on_circum=0):
 *       cdef set[HashIntoType] *keeper = new set[HashIntoType]()             # <<<<<<<<<<<<<<
 *       cdef unsigned long long size = 0
 *       self.thisptr.calc_connected_graph_size(kmer, size, keeper[0],
 */
  __pyx_v_keeper = new std::set<__pyx_t_5khmer_6_khmer_HashIntoType>();

  /* "_khmermodule.pyx":704
 *                                  bool break_on_circum=0):
 *       cdef set[HashIntoType] *keeper = new set[HashIntoType]()
 *       cdef unsigned long long size = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.calc_connected_graph_size(kmer, size, keeper[0],
 *                                              max_size, break_on_circum)
 */
  __pyx_v_size = 0;

  /* "_khmermodule.pyx":706
 *       cdef unsigned long long size = 0
 *       self.thisptr.calc_connected_graph_size(kmer, size, keeper[0],
 *                                              max_size, break_on_circum)             # <<<<<<<<<<<<<<
 *       return size
 *    def consume_partitioned_fasta(self, char* filename, callback_obj=None):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->calc_connected_graph_size(__pyx_v_kmer, __pyx_v_size, (__pyx_v_keeper[0]), __pyx_v_max_size, __pyx_v_break_on_circum);

  /* "_khmermodule.pyx":707
 *       self.thisptr.calc_connected_graph_size(kmer, size, keeper[0],
 *                                              max_size, break_on_circum)
 *       return size             # <<<<<<<<<<<<<<
 *    def consume_partitioned_fasta(self, char* filename, callback_obj=None):
 *       global _callback_obj
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(__pyx_v_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.calc_connected_graph_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":708
 *                                              max_size, break_on_circum)
 *       return size
 *    def consume_partitioned_fasta(self, char* filename, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_15consume_partitioned_fasta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_15consume_partitioned_fasta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  PyObject *__pyx_v_callback_obj = 0;
  unsigned int __pyx_v_total_reads;
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("consume_partitioned_fasta");
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_partitioned_fasta") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_partitioned_fasta", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_partitioned_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":710
 *    def consume_partitioned_fasta(self, char* filename, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":711
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       cdef unsigned int total_reads = 0
 *       cdef unsigned long long n_consumed = 0
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":712
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned long long n_consumed = 0
 *       self.thisptr.consume_partitioned_fasta(filename, total_reads,
 */
  __pyx_v_total_reads = 0;

  /* "_khmermodule.pyx":713
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0
 *       cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.consume_partitioned_fasta(filename, total_reads,
 *                                              n_consumed, _report_fn, <void*>_callback_obj)
 */
  __pyx_v_n_consumed = 0;

  /* "_khmermodule.pyx":715
 *       cdef unsigned long long n_consumed = 0
 *       self.thisptr.consume_partitioned_fasta(filename, total_reads,
 *                                              n_consumed, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 * 
 *       return total_reads, n_consumed
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->consume_partitioned_fasta(__pyx_v_filename, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_khmermodule.pyx":717
 *                                              n_consumed, _report_fn, <void*>_callback_obj)
 * 
 *       return total_reads, n_consumed             # <<<<<<<<<<<<<<
 *    def consume_fasta_and_traverse(self, char* filename, unsigned int radius,
 *                                   unsigned int big_threshold, unsigned int transfer_threshold,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_partitioned_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":718
 * 
 *       return total_reads, n_consumed
 *    def consume_fasta_and_traverse(self, char* filename, unsigned int radius,             # <<<<<<<<<<<<<<
 *                                   unsigned int big_threshold, unsigned int transfer_threshold,
 *                                   _new_counting_hash ch):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_16consume_fasta_and_traverse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_16consume_fasta_and_traverse(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  unsigned int __pyx_v_radius;
  unsigned int __pyx_v_big_threshold;
  unsigned int __pyx_v_transfer_threshold;
  struct __pyx_obj_5khmer_6_khmer__new_counting_hash *__pyx_v_ch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__radius,&__pyx_n_s__big_threshold,&__pyx_n_s__transfer_threshold,&__pyx_n_s__ch,0};
  __Pyx_RefNannySetupContext("consume_fasta_and_traverse");
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__radius);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_fasta_and_traverse", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_threshold);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_fasta_and_traverse", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__transfer_threshold);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_fasta_and_traverse", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ch);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("consume_fasta_and_traverse", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_fasta_and_traverse") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_radius == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_big_threshold = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_big_threshold == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_transfer_threshold = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_transfer_threshold == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ch = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_fasta_and_traverse", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta_and_traverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ch), __pyx_ptype_5khmer_6_khmer__new_counting_hash, 1, "ch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":722
 *                                   _new_counting_hash ch):
 *       self.thisptr.consume_fasta_and_traverse(filename, radius, big_threshold, transfer_threshold,
 *                                               ch.thisptr[0])             # <<<<<<<<<<<<<<
 *    def traverse_from_reads(self, char* filename, unsigned int radius,
 *                            unsigned int big_threshold, unsigned int transfer_threshold,
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->consume_fasta_and_traverse(__pyx_v_filename, __pyx_v_radius, __pyx_v_big_threshold, __pyx_v_transfer_threshold, (__pyx_v_ch->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta_and_traverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":723
 *       self.thisptr.consume_fasta_and_traverse(filename, radius, big_threshold, transfer_threshold,
 *                                               ch.thisptr[0])
 *    def traverse_from_reads(self, char* filename, unsigned int radius,             # <<<<<<<<<<<<<<
 *                            unsigned int big_threshold, unsigned int transfer_threshold,
 *                            _new_counting_hash ch):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_17traverse_from_reads(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_17traverse_from_reads(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  unsigned int __pyx_v_radius;
  unsigned int __pyx_v_big_threshold;
  unsigned int __pyx_v_transfer_threshold;
  struct __pyx_obj_5khmer_6_khmer__new_counting_hash *__pyx_v_ch = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__radius,&__pyx_n_s__big_threshold,&__pyx_n_s__transfer_threshold,&__pyx_n_s__ch,0};
  __Pyx_RefNannySetupContext("traverse_from_reads");
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__radius);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("traverse_from_reads", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__big_threshold);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("traverse_from_reads", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__transfer_threshold);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("traverse_from_reads", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ch);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("traverse_from_reads", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "traverse_from_reads") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_radius == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_big_threshold = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_big_threshold == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_transfer_threshold = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_transfer_threshold == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ch = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("traverse_from_reads", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.traverse_from_reads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ch), __pyx_ptype_5khmer_6_khmer__new_counting_hash, 1, "ch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":727
 *                            _new_counting_hash ch):
 *       self.thisptr.traverse_from_reads(filename, radius, big_threshold, transfer_threshold,
 *                            ch.thisptr[0])             # <<<<<<<<<<<<<<
 *    def consume_fasta_and_tag_with_stoptags(self, char* filename, callback_obj=None):
 *       global _callback_obj
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->traverse_from_reads(__pyx_v_filename, __pyx_v_radius, __pyx_v_big_threshold, __pyx_v_transfer_threshold, (__pyx_v_ch->thisptr[0]));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.traverse_from_reads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":728
 *       self.thisptr.traverse_from_reads(filename, radius, big_threshold, transfer_threshold,
 *                            ch.thisptr[0])
 *    def consume_fasta_and_tag_with_stoptags(self, char* filename, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_18consume_fasta_and_tag_with_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_18consume_fasta_and_tag_with_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  PyObject *__pyx_v_callback_obj = 0;
  unsigned int __pyx_v_total_reads;
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("consume_fasta_and_tag_with_stoptags");
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_fasta_and_tag_with_stoptags") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_fasta_and_tag_with_stoptags", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta_and_tag_with_stoptags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":730
 *    def consume_fasta_and_tag_with_stoptags(self, char* filename, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":731
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       cdef unsigned int total_reads = 0
 *       cdef unsigned long long n_consumed = 0
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":732
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned long long n_consumed = 0
 *       self.thisptr.consume_fasta_and_tag_with_stoptags(filename, total_reads, n_consumed,
 */
  __pyx_v_total_reads = 0;

  /* "_khmermodule.pyx":733
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0
 *       cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.consume_fasta_and_tag_with_stoptags(filename, total_reads, n_consumed,
 *                                                        _report_fn, <void*>_callback_obj)
 */
  __pyx_v_n_consumed = 0;

  /* "_khmermodule.pyx":735
 *       cdef unsigned long long n_consumed = 0
 *       self.thisptr.consume_fasta_and_tag_with_stoptags(filename, total_reads, n_consumed,
 *                                                        _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       return total_reads, n_consumed
 *    def consume_fasta_and_tag(self, char* filename, callback_obj=None):
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->consume_fasta_and_tag_with_stoptags(__pyx_v_filename, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_khmermodule.pyx":736
 *       self.thisptr.consume_fasta_and_tag_with_stoptags(filename, total_reads, n_consumed,
 *                                                        _report_fn, <void*>_callback_obj)
 *       return total_reads, n_consumed             # <<<<<<<<<<<<<<
 *    def consume_fasta_and_tag(self, char* filename, callback_obj=None):
 *       global _callback_obj
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta_and_tag_with_stoptags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":737
 *                                                        _report_fn, <void*>_callback_obj)
 *       return total_reads, n_consumed
 *    def consume_fasta_and_tag(self, char* filename, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_19consume_fasta_and_tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_19consume_fasta_and_tag(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  PyObject *__pyx_v_callback_obj = 0;
  unsigned int __pyx_v_total_reads;
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("consume_fasta_and_tag");
  {
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_fasta_and_tag") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_fasta_and_tag", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta_and_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":739
 *    def consume_fasta_and_tag(self, char* filename, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":740
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       cdef unsigned int total_reads = 0
 *       cdef unsigned long long n_consumed = 0
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":741
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned long long n_consumed = 0
 *       self.thisptr.consume_fasta_and_tag(filename, total_reads, n_consumed,
 */
  __pyx_v_total_reads = 0;

  /* "_khmermodule.pyx":742
 *          _callback_obj = callback_obj
 *       cdef unsigned int total_reads = 0
 *       cdef unsigned long long n_consumed = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.consume_fasta_and_tag(filename, total_reads, n_consumed,
 *                                          _report_fn, <void*>_callback_obj)
 */
  __pyx_v_n_consumed = 0;

  /* "_khmermodule.pyx":744
 *       cdef unsigned long long n_consumed = 0
 *       self.thisptr.consume_fasta_and_tag(filename, total_reads, n_consumed,
 *                                          _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *       return total_reads, n_consumed
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->consume_fasta_and_tag(__pyx_v_filename, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "_khmermodule.pyx":745
 *       self.thisptr.consume_fasta_and_tag(filename, total_reads, n_consumed,
 *                                          _report_fn, <void*>_callback_obj)
 *       return total_reads, n_consumed             # <<<<<<<<<<<<<<
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 *       return self.thisptr.consume_string(s, lower, upper)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_total_reads); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_n_consumed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta_and_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":746
 *                                          _report_fn, <void*>_callback_obj)
 *       return total_reads, n_consumed
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):             # <<<<<<<<<<<<<<
 *       return self.thisptr.consume_string(s, lower, upper)
 *    def consume_fasta(self, char* filename, HashIntoType lower=0,
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_20consume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_20consume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_s;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_lower;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_upper;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s,&__pyx_n_s__lower,&__pyx_n_s__upper,0};
  __Pyx_RefNannySetupContext("consume");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_s = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_lower = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_lower == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lower = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    if (values[2]) {
      __pyx_v_upper = __Pyx_PyInt_AsUnsignedLongLong(values[2]); if (unlikely((__pyx_v_upper == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_upper = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":747
 *       return total_reads, n_consumed
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 *       return self.thisptr.consume_string(s, lower, upper)             # <<<<<<<<<<<<<<
 *    def consume_fasta(self, char* filename, HashIntoType lower=0,
 *                      HashIntoType upper=0, new_readmask readmask=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->consume_string(__pyx_v_s, __pyx_v_lower, __pyx_v_upper)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":748
 *    def consume(self, char* s, HashIntoType lower = 0, HashIntoType upper = 0):
 *       return self.thisptr.consume_string(s, lower, upper)
 *    def consume_fasta(self, char* filename, HashIntoType lower=0,             # <<<<<<<<<<<<<<
 *                      HashIntoType upper=0, new_readmask readmask=None,
 *                      bool update_readmask=1, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_21consume_fasta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_21consume_fasta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_lower;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_upper;
  struct __pyx_obj_5khmer_6_khmer_new_readmask *__pyx_v_readmask = 0;
  bool __pyx_v_update_readmask;
  PyObject *__pyx_v_callback_obj = 0;
  unsigned PY_LONG_LONG __pyx_v_n_consumed;
  unsigned int __pyx_v_total_reads;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__lower,&__pyx_n_s__upper,&__pyx_n_s__readmask,&__pyx_n_s__update_readmask,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("consume_fasta");
  {
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "_khmermodule.pyx":749
 *       return self.thisptr.consume_string(s, lower, upper)
 *    def consume_fasta(self, char* filename, HashIntoType lower=0,
 *                      HashIntoType upper=0, new_readmask readmask=None,             # <<<<<<<<<<<<<<
 *                      bool update_readmask=1, callback_obj=None):
 *       global _callback_obj
 */
    values[3] = (PyObject *)((struct __pyx_obj_5khmer_6_khmer_new_readmask *)Py_None);

    /* "_khmermodule.pyx":750
 *    def consume_fasta(self, char* filename, HashIntoType lower=0,
 *                      HashIntoType upper=0, new_readmask readmask=None,
 *                      bool update_readmask=1, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       cdef unsigned long long n_consumed
 */
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__lower);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__upper);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__readmask);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__update_readmask);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "consume_fasta") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[1]) {
      __pyx_v_lower = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_lower == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_lower = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    if (values[2]) {
      __pyx_v_upper = __Pyx_PyInt_AsUnsignedLongLong(values[2]); if (unlikely((__pyx_v_upper == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_upper = ((__pyx_t_5khmer_6_khmer_HashIntoType)0);
    }
    __pyx_v_readmask = ((struct __pyx_obj_5khmer_6_khmer_new_readmask *)values[3]);
    if (values[4]) {
      __pyx_v_update_readmask = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_update_readmask == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_update_readmask = ((bool)1);
    }
    __pyx_v_callback_obj = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("consume_fasta", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_readmask), __pyx_ptype_5khmer_6_khmer_new_readmask, 1, "readmask", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":755
 *       cdef unsigned int total_reads
 * 
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":756
 * 
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed, lower, upper,
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":759
 * 
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed, lower, upper,
 *                                  NULL, update_readmask, _report_fn, <void*>callback_obj)             # <<<<<<<<<<<<<<
 *       return n_consumed, total_reads
 *    def do_subset_partition(self, HashIntoType start, HashIntoType end, bool break_stop=0,
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->consume_fasta(__pyx_v_filename, __pyx_v_total_reads, __pyx_v_n_consumed, __pyx_v_lower, __pyx_v_upper, NULL, __pyx_v_update_readmask, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_v_callback_obj)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":760
 *       self.thisptr.consume_fasta(filename, total_reads, n_consumed, lower, upper,
 *                                  NULL, update_readmask, _report_fn, <void*>callback_obj)
 *       return n_consumed, total_reads             # <<<<<<<<<<<<<<
 *    def do_subset_partition(self, HashIntoType start, HashIntoType end, bool break_stop=0,
 *                            callback_obj=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLongLong(__pyx_v_n_consumed); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_v_total_reads); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.consume_fasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":761
 *                                  NULL, update_readmask, _report_fn, <void*>callback_obj)
 *       return n_consumed, total_reads
 *    def do_subset_partition(self, HashIntoType start, HashIntoType end, bool break_stop=0,             # <<<<<<<<<<<<<<
 *                            callback_obj=None):
 *       subset = _new_subsetpartition(self)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_22do_subset_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_22do_subset_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_start;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_end;
  bool __pyx_v_break_stop;
  PyObject *__pyx_v_callback_obj = 0;
  struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *__pyx_v_subset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__start,&__pyx_n_s__end,&__pyx_n_s__break_stop,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("do_subset_partition");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":762
 *       return n_consumed, total_reads
 *    def do_subset_partition(self, HashIntoType start, HashIntoType end, bool break_stop=0,
 *                            callback_obj=None):             # <<<<<<<<<<<<<<
 *       subset = _new_subsetpartition(self)
 *       subset.do_partition(start, end, break_stop, callback_obj)
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__start);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("do_subset_partition", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__break_stop);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "do_subset_partition") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = __Pyx_PyInt_AsUnsignedLongLong(values[0]); if (unlikely((__pyx_v_start == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_end == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_break_stop = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_break_stop == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_break_stop = ((bool)0);
    }
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_subset_partition", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.do_subset_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":763
 *    def do_subset_partition(self, HashIntoType start, HashIntoType end, bool break_stop=0,
 *                            callback_obj=None):
 *       subset = _new_subsetpartition(self)             # <<<<<<<<<<<<<<
 *       subset.do_partition(start, end, break_stop, callback_obj)
 *       return subset
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer__new_subsetpartition)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v_subset = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":764
 *                            callback_obj=None):
 *       subset = _new_subsetpartition(self)
 *       subset.do_partition(start, end, break_stop, callback_obj)             # <<<<<<<<<<<<<<
 *       return subset
 *    def save_partitionmap(self, char* filename):
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_subset), __pyx_n_s__do_partition); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyLong_FromUnsignedLongLong(__pyx_v_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyLong_FromUnsignedLongLong(__pyx_v_end); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_break_stop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_callback_obj);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_callback_obj);
  __Pyx_GIVEREF(__pyx_v_callback_obj);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "_khmermodule.pyx":765
 *       subset = _new_subsetpartition(self)
 *       subset.do_partition(start, end, break_stop, callback_obj)
 *       return subset             # <<<<<<<<<<<<<<
 *    def save_partitionmap(self, char* filename):
 *       self.thisptr.partition.save_partitionmap(filename)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_subset));
  __pyx_r = ((PyObject *)__pyx_v_subset);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.do_subset_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_subset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":766
 *       subset.do_partition(start, end, break_stop, callback_obj)
 *       return subset
 *    def save_partitionmap(self, char* filename):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.save_partitionmap(filename)
 *    def save_subset_partitionmap(self, subset, char* filename):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_23save_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_23save_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_partitionmap");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.save_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":767
 *       return subset
 *    def save_partitionmap(self, char* filename):
 *       self.thisptr.partition.save_partitionmap(filename)             # <<<<<<<<<<<<<<
 *    def save_subset_partitionmap(self, subset, char* filename):
 *       subset.save_partitionmap(filename)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->save_partitionmap(__pyx_v_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":768
 *    def save_partitionmap(self, char* filename):
 *       self.thisptr.partition.save_partitionmap(filename)
 *    def save_subset_partitionmap(self, subset, char* filename):             # <<<<<<<<<<<<<<
 *       subset.save_partitionmap(filename)
 *    def load_subset_partitionmap(self, filename):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_24save_subset_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_24save_subset_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_subset = 0;
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__subset,&__pyx_n_s__filename,0};
  __Pyx_RefNannySetupContext("save_subset_partitionmap");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__subset);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_subset_partitionmap", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "save_subset_partitionmap") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_subset = values[0];
    __pyx_v_filename = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_subset_partitionmap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.save_subset_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":769
 *       self.thisptr.partition.save_partitionmap(filename)
 *    def save_subset_partitionmap(self, subset, char* filename):
 *       subset.save_partitionmap(filename)             # <<<<<<<<<<<<<<
 *    def load_subset_partitionmap(self, filename):
 *       cdef SubsetPartition * subset_p = new SubsetPartition(self.thisptr)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_subset, __pyx_n_s__save_partitionmap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.save_subset_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":770
 *    def save_subset_partitionmap(self, subset, char* filename):
 *       subset.save_partitionmap(filename)
 *    def load_subset_partitionmap(self, filename):             # <<<<<<<<<<<<<<
 *       cdef SubsetPartition * subset_p = new SubsetPartition(self.thisptr)
 *       subset_p.load_partitionmap(filename)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_25load_subset_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_25load_subset_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  khmer::SubsetPartition *__pyx_v_subset_p;
  struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *__pyx_v_subset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_subset_partitionmap");

  /* "_khmermodule.pyx":771
 *       subset.save_partitionmap(filename)
 *    def load_subset_partitionmap(self, filename):
 *       cdef SubsetPartition * subset_p = new SubsetPartition(self.thisptr)             # <<<<<<<<<<<<<<
 *       subset_p.load_partitionmap(filename)
 *       subset = _new_subsetpartition()
 */
  __pyx_v_subset_p = new khmer::SubsetPartition(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr);

  /* "_khmermodule.pyx":772
 *    def load_subset_partitionmap(self, filename):
 *       cdef SubsetPartition * subset_p = new SubsetPartition(self.thisptr)
 *       subset_p.load_partitionmap(filename)             # <<<<<<<<<<<<<<
 *       subset = _new_subsetpartition()
 *       subset.thisptr = subset_p
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_subset_p->load_partitionmap(__pyx_t_1);

  /* "_khmermodule.pyx":773
 *       cdef SubsetPartition * subset_p = new SubsetPartition(self.thisptr)
 *       subset_p.load_partitionmap(filename)
 *       subset = _new_subsetpartition()             # <<<<<<<<<<<<<<
 *       subset.thisptr = subset_p
 *       return subset
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer__new_subsetpartition)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_subset = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":774
 *       subset_p.load_partitionmap(filename)
 *       subset = _new_subsetpartition()
 *       subset.thisptr = subset_p             # <<<<<<<<<<<<<<
 *       return subset
 *    def load_partitionmap(self, filename):
 */
  __pyx_v_subset->thisptr = __pyx_v_subset_p;

  /* "_khmermodule.pyx":775
 *       subset = _new_subsetpartition()
 *       subset.thisptr = subset_p
 *       return subset             # <<<<<<<<<<<<<<
 *    def load_partitionmap(self, filename):
 *       self.thisptr.partition.load_partitionmap(filename)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_subset));
  __pyx_r = ((PyObject *)__pyx_v_subset);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.load_subset_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_subset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":776
 *       subset.thisptr = subset_p
 *       return subset
 *    def load_partitionmap(self, filename):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.load_partitionmap(filename)
 *    def _validate_subset_partitionmap(self, subset):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_26load_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_26load_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_partitionmap");

  /* "_khmermodule.pyx":777
 *       return subset
 *    def load_partitionmap(self, filename):
 *       self.thisptr.partition.load_partitionmap(filename)             # <<<<<<<<<<<<<<
 *    def _validate_subset_partitionmap(self, subset):
 *       subset._validate_pmap()
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->load_partitionmap(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.load_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":778
 *    def load_partitionmap(self, filename):
 *       self.thisptr.partition.load_partitionmap(filename)
 *    def _validate_subset_partitionmap(self, subset):             # <<<<<<<<<<<<<<
 *       subset._validate_pmap()
 *    def add_tag(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_27_validate_subset_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_subset); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_27_validate_subset_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_v_subset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_validate_subset_partitionmap");

  /* "_khmermodule.pyx":779
 *       self.thisptr.partition.load_partitionmap(filename)
 *    def _validate_subset_partitionmap(self, subset):
 *       subset._validate_pmap()             # <<<<<<<<<<<<<<
 *    def add_tag(self, char* s):
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_subset, __pyx_n_s___validate_pmap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits._validate_subset_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":780
 *    def _validate_subset_partitionmap(self, subset):
 *       subset._validate_pmap()
 *    def add_tag(self, char* s):             # <<<<<<<<<<<<<<
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 *       self.thisptr.add_tag(kmer)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_28add_tag(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_28add_tag(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_tag");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.add_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":781
 *       subset._validate_pmap()
 *    def add_tag(self, char* s):
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())             # <<<<<<<<<<<<<<
 *       self.thisptr.add_tag(kmer)
 *    def add_stop_tag(self, char* s):
 */
  __pyx_v_kmer = khmer::_hash(__pyx_v_s, ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->ksize());

  /* "_khmermodule.pyx":782
 *    def add_tag(self, char* s):
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 *       self.thisptr.add_tag(kmer)             # <<<<<<<<<<<<<<
 *    def add_stop_tag(self, char* s):
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->add_tag(__pyx_v_kmer);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":783
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 *       self.thisptr.add_tag(kmer)
 *    def add_stop_tag(self, char* s):             # <<<<<<<<<<<<<<
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 *       self.thisptr.add_stop_tag(kmer)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_29add_stop_tag(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_29add_stop_tag(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_stop_tag");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.add_stop_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":784
 *       self.thisptr.add_tag(kmer)
 *    def add_stop_tag(self, char* s):
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())             # <<<<<<<<<<<<<<
 *       self.thisptr.add_stop_tag(kmer)
 *    def load_stop_tags(self, char* filename):
 */
  __pyx_v_kmer = khmer::_hash(__pyx_v_s, ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->ksize());

  /* "_khmermodule.pyx":785
 *    def add_stop_tag(self, char* s):
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 *       self.thisptr.add_stop_tag(kmer)             # <<<<<<<<<<<<<<
 *    def load_stop_tags(self, char* filename):
 *       self.thisptr.load_stop_tags(filename)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->add_stop_tag(__pyx_v_kmer);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":786
 *       cdef HashIntoType kmer = _hash(s, self.thisptr.ksize())
 *       self.thisptr.add_stop_tag(kmer)
 *    def load_stop_tags(self, char* filename):             # <<<<<<<<<<<<<<
 *       self.thisptr.load_stop_tags(filename)
 *    def save_stop_tags(self, char* filename):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_30load_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_30load_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_stop_tags");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.load_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":787
 *       self.thisptr.add_stop_tag(kmer)
 *    def load_stop_tags(self, char* filename):
 *       self.thisptr.load_stop_tags(filename)             # <<<<<<<<<<<<<<
 *    def save_stop_tags(self, char* filename):
 *       self.thisptr.save_stop_tags(filename)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->load_stop_tags(__pyx_v_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":788
 *    def load_stop_tags(self, char* filename):
 *       self.thisptr.load_stop_tags(filename)
 *    def save_stop_tags(self, char* filename):             # <<<<<<<<<<<<<<
 *       self.thisptr.save_stop_tags(filename)
 *    def print_stop_tags(self, char* filename):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_31save_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_31save_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_stop_tags");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.save_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":789
 *       self.thisptr.load_stop_tags(filename)
 *    def save_stop_tags(self, char* filename):
 *       self.thisptr.save_stop_tags(filename)             # <<<<<<<<<<<<<<
 *    def print_stop_tags(self, char* filename):
 *       self.thisptr.print_stop_tags(filename)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->save_stop_tags(__pyx_v_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":790
 *    def save_stop_tags(self, char* filename):
 *       self.thisptr.save_stop_tags(filename)
 *    def print_stop_tags(self, char* filename):             # <<<<<<<<<<<<<<
 *       self.thisptr.print_stop_tags(filename)
 *    def output_partitions(self, infile, outfile, bool output_unassigned=0, callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_32print_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_32print_stop_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_stop_tags");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 790; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.print_stop_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":791
 *       self.thisptr.save_stop_tags(filename)
 *    def print_stop_tags(self, char* filename):
 *       self.thisptr.print_stop_tags(filename)             # <<<<<<<<<<<<<<
 *    def output_partitions(self, infile, outfile, bool output_unassigned=0, callback_obj=None):
 *       global _callback_obj
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->print_stop_tags(__pyx_v_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":792
 *    def print_stop_tags(self, char* filename):
 *       self.thisptr.print_stop_tags(filename)
 *    def output_partitions(self, infile, outfile, bool output_unassigned=0, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_33output_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_33output_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_infile = 0;
  PyObject *__pyx_v_outfile = 0;
  bool __pyx_v_output_unassigned;
  PyObject *__pyx_v_callback_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__infile,&__pyx_n_s__outfile,&__pyx_n_s__output_unassigned,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("output_partitions");
  {
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__infile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outfile);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_partitions", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__output_unassigned);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "output_partitions") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_infile = values[0];
    __pyx_v_outfile = values[1];
    if (values[2]) {
      __pyx_v_output_unassigned = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_output_unassigned == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_output_unassigned = ((bool)0);
    }
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("output_partitions", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.output_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":794
 *    def output_partitions(self, infile, outfile, bool output_unassigned=0, callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       return self.thisptr.partition.output_partitioned_file(infile, outfile,
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":795
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       return self.thisptr.partition.output_partitioned_file(infile, outfile,
 *                                                             output_unassigned,
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":796
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       return self.thisptr.partition.output_partitioned_file(infile, outfile,             # <<<<<<<<<<<<<<
 *                                                             output_unassigned,
 *                                                             _report_fn, <void*>_callback_obj)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_AsString(__pyx_v_infile); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyBytes_AsString(__pyx_v_outfile); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":798
 *       return self.thisptr.partition.output_partitioned_file(infile, outfile,
 *                                                             output_unassigned,
 *                                                             _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *    def count_partitions(self):
 *       cdef unsigned int n_partitions = 0
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->output_partitioned_file(__pyx_t_2, __pyx_t_3, __pyx_v_output_unassigned, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_4)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.output_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":799
 *                                                             output_unassigned,
 *                                                             _report_fn, <void*>_callback_obj)
 *    def count_partitions(self):             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_34count_partitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_34count_partitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned int __pyx_v_n_partitions;
  unsigned int __pyx_v_n_unassigned;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_partitions");

  /* "_khmermodule.pyx":800
 *                                                             _report_fn, <void*>_callback_obj)
 *    def count_partitions(self):
 *       cdef unsigned int n_partitions = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_unassigned = 0
 *       self.thisptr.partition.count_partitions(n_partitions, n_unassigned)
 */
  __pyx_v_n_partitions = 0;

  /* "_khmermodule.pyx":801
 *    def count_partitions(self):
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned
 */
  __pyx_v_n_unassigned = 0;

  /* "_khmermodule.pyx":802
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0
 *       self.thisptr.partition.count_partitions(n_partitions, n_unassigned)             # <<<<<<<<<<<<<<
 *       return n_partitions, n_unassigned
 *    def subset_count_partitions(self, _new_subsetpartition subset_obj):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->count_partitions(__pyx_v_n_partitions, __pyx_v_n_unassigned);

  /* "_khmermodule.pyx":803
 *       cdef unsigned int n_unassigned = 0
 *       self.thisptr.partition.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned             # <<<<<<<<<<<<<<
 *    def subset_count_partitions(self, _new_subsetpartition subset_obj):
 *       cdef unsigned int n_partitions = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_n_partitions); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_n_unassigned); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":804
 *       self.thisptr.partition.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned
 *    def subset_count_partitions(self, _new_subsetpartition subset_obj):             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_35subset_count_partitions(PyObject *__pyx_v_self, PyObject *__pyx_v_subset_obj); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_35subset_count_partitions(PyObject *__pyx_v_self, PyObject *__pyx_v_subset_obj) {
  unsigned int __pyx_v_n_partitions;
  unsigned int __pyx_v_n_unassigned;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subset_count_partitions");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subset_obj), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "subset_obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":805
 *       return n_partitions, n_unassigned
 *    def subset_count_partitions(self, _new_subsetpartition subset_obj):
 *       cdef unsigned int n_partitions = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_unassigned = 0
 *       subset_obj.thisptr.count_partitions(n_partitions, n_unassigned)
 */
  __pyx_v_n_partitions = 0;

  /* "_khmermodule.pyx":806
 *    def subset_count_partitions(self, _new_subsetpartition subset_obj):
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0             # <<<<<<<<<<<<<<
 *       subset_obj.thisptr.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned
 */
  __pyx_v_n_unassigned = 0;

  /* "_khmermodule.pyx":807
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0
 *       subset_obj.thisptr.count_partitions(n_partitions, n_unassigned)             # <<<<<<<<<<<<<<
 *       return n_partitions, n_unassigned
 *    def merge_subset_from_disk(self, char* filename):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_subset_obj)->thisptr->count_partitions(__pyx_v_n_partitions, __pyx_v_n_unassigned);

  /* "_khmermodule.pyx":808
 *       cdef unsigned int n_unassigned = 0
 *       subset_obj.thisptr.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned             # <<<<<<<<<<<<<<
 *    def merge_subset_from_disk(self, char* filename):
 *       self.thisptr.partition.merge_from_disk(filename)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_n_partitions); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_n_unassigned); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.subset_count_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":809
 *       subset_obj.thisptr.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned
 *    def merge_subset_from_disk(self, char* filename):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.merge_from_disk(filename)
 *    def merge_subset(self, _new_subsetpartition subset_obj):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_36merge_subset_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_36merge_subset_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge_subset_from_disk");
  assert(__pyx_arg_filename); {
    __pyx_v_filename = PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.merge_subset_from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":810
 *       return n_partitions, n_unassigned
 *    def merge_subset_from_disk(self, char* filename):
 *       self.thisptr.partition.merge_from_disk(filename)             # <<<<<<<<<<<<<<
 *    def merge_subset(self, _new_subsetpartition subset_obj):
 *       self.thisptr.partition.merge(subset_obj.thisptr)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->merge_from_disk(__pyx_v_filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":811
 *    def merge_subset_from_disk(self, char* filename):
 *       self.thisptr.partition.merge_from_disk(filename)
 *    def merge_subset(self, _new_subsetpartition subset_obj):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.merge(subset_obj.thisptr)
 *    def merge2_subset(self, _new_subsetpartition s1, _new_subsetpartition s2):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_37merge_subset(PyObject *__pyx_v_self, PyObject *__pyx_v_subset_obj); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_37merge_subset(PyObject *__pyx_v_self, PyObject *__pyx_v_subset_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge_subset");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subset_obj), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "subset_obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":812
 *       self.thisptr.partition.merge_from_disk(filename)
 *    def merge_subset(self, _new_subsetpartition subset_obj):
 *       self.thisptr.partition.merge(subset_obj.thisptr)             # <<<<<<<<<<<<<<
 *    def merge2_subset(self, _new_subsetpartition s1, _new_subsetpartition s2):
 *       s1.thisptr.merge(s2.thisptr)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->merge(((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_subset_obj)->thisptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.merge_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":813
 *    def merge_subset(self, _new_subsetpartition subset_obj):
 *       self.thisptr.partition.merge(subset_obj.thisptr)
 *    def merge2_subset(self, _new_subsetpartition s1, _new_subsetpartition s2):             # <<<<<<<<<<<<<<
 *       s1.thisptr.merge(s2.thisptr)
 *    def merge2_subset_from_disk(self, subset_obj, char* filename):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_38merge2_subset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_38merge2_subset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *__pyx_v_s1 = 0;
  struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *__pyx_v_s2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__s1,&__pyx_n_s__s2,0};
  __Pyx_RefNannySetupContext("merge2_subset");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("merge2_subset", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "merge2_subset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_s1 = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)values[0]);
    __pyx_v_s2 = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge2_subset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.merge2_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s1), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "s1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s2), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "s2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":814
 *       self.thisptr.partition.merge(subset_obj.thisptr)
 *    def merge2_subset(self, _new_subsetpartition s1, _new_subsetpartition s2):
 *       s1.thisptr.merge(s2.thisptr)             # <<<<<<<<<<<<<<
 *    def merge2_subset_from_disk(self, subset_obj, char* filename):
 *       subset_obj.thisptr.merge_from_disk(filename)
 */
  __pyx_v_s1->thisptr->merge(__pyx_v_s2->thisptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.merge2_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":815
 *    def merge2_subset(self, _new_subsetpartition s1, _new_subsetpartition s2):
 *       s1.thisptr.merge(s2.thisptr)
 *    def merge2_subset_from_disk(self, subset_obj, char* filename):             # <<<<<<<<<<<<<<
 *       subset_obj.thisptr.merge_from_disk(filename)
 *    def join_partitions_by_path(self, char* sequence):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_39merge2_subset_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_39merge2_subset_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_subset_obj = 0;
  char *__pyx_v_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__subset_obj,&__pyx_n_s__filename,0};
  __Pyx_RefNannySetupContext("merge2_subset_from_disk");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__subset_obj);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("merge2_subset_from_disk", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "merge2_subset_from_disk") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_subset_obj = values[0];
    __pyx_v_filename = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge2_subset_from_disk", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 815; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.merge2_subset_from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":816
 *       s1.thisptr.merge(s2.thisptr)
 *    def merge2_subset_from_disk(self, subset_obj, char* filename):
 *       subset_obj.thisptr.merge_from_disk(filename)             # <<<<<<<<<<<<<<
 *    def join_partitions_by_path(self, char* sequence):
 *       self.thisptr.partition.join_partitions_by_path(sequence)
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_subset_obj, __pyx_n_s__thisptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__merge_from_disk); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.merge2_subset_from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":817
 *    def merge2_subset_from_disk(self, subset_obj, char* filename):
 *       subset_obj.thisptr.merge_from_disk(filename)
 *    def join_partitions_by_path(self, char* sequence):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.join_partitions_by_path(sequence)
 *    def divide_tags_into_subsets(self, unsigned int subset_size):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_40join_partitions_by_path(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_40join_partitions_by_path(PyObject *__pyx_v_self, PyObject *__pyx_arg_sequence) {
  char *__pyx_v_sequence;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("join_partitions_by_path");
  assert(__pyx_arg_sequence); {
    __pyx_v_sequence = PyBytes_AsString(__pyx_arg_sequence); if (unlikely((!__pyx_v_sequence) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.join_partitions_by_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":818
 *       subset_obj.thisptr.merge_from_disk(filename)
 *    def join_partitions_by_path(self, char* sequence):
 *       self.thisptr.partition.join_partitions_by_path(sequence)             # <<<<<<<<<<<<<<
 *    def divide_tags_into_subsets(self, unsigned int subset_size):
 *       subsets = []
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->join_partitions_by_path(__pyx_v_sequence);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":819
 *    def join_partitions_by_path(self, char* sequence):
 *       self.thisptr.partition.join_partitions_by_path(sequence)
 *    def divide_tags_into_subsets(self, unsigned int subset_size):             # <<<<<<<<<<<<<<
 *       subsets = []
 *       cdef set[HashIntoType] divvy
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_41divide_tags_into_subsets(PyObject *__pyx_v_self, PyObject *__pyx_arg_subset_size); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_41divide_tags_into_subsets(PyObject *__pyx_v_self, PyObject *__pyx_arg_subset_size) {
  unsigned int __pyx_v_subset_size;
  PyObject *__pyx_v_subsets = NULL;
  std::set<__pyx_t_5khmer_6_khmer_HashIntoType> __pyx_v_divvy;
  std::set<__pyx_t_5khmer_6_khmer_HashIntoType>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("divide_tags_into_subsets");
  assert(__pyx_arg_subset_size); {
    __pyx_v_subset_size = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_subset_size); if (unlikely((__pyx_v_subset_size == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.divide_tags_into_subsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":820
 *       self.thisptr.partition.join_partitions_by_path(sequence)
 *    def divide_tags_into_subsets(self, unsigned int subset_size):
 *       subsets = []             # <<<<<<<<<<<<<<
 *       cdef set[HashIntoType] divvy
 *       self.thisptr.divide_tags_into_subsets(subset_size, divvy)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_subsets = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_khmermodule.pyx":822
 *       subsets = []
 *       cdef set[HashIntoType] divvy
 *       self.thisptr.divide_tags_into_subsets(subset_size, divvy)             # <<<<<<<<<<<<<<
 *       cdef set[HashIntoType].iterator it = divvy.begin()
 *       while it != divvy.end():
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->divide_tags_into_subsets(__pyx_v_subset_size, __pyx_v_divvy);

  /* "_khmermodule.pyx":823
 *       cdef set[HashIntoType] divvy
 *       self.thisptr.divide_tags_into_subsets(subset_size, divvy)
 *       cdef set[HashIntoType].iterator it = divvy.begin()             # <<<<<<<<<<<<<<
 *       while it != divvy.end():
 *          subsets.append(deref(it))
 */
  __pyx_v_it = __pyx_v_divvy.begin();

  /* "_khmermodule.pyx":824
 *       self.thisptr.divide_tags_into_subsets(subset_size, divvy)
 *       cdef set[HashIntoType].iterator it = divvy.begin()
 *       while it != divvy.end():             # <<<<<<<<<<<<<<
 *          subsets.append(deref(it))
 *          inc(it)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != __pyx_v_divvy.end());
    if (!__pyx_t_2) break;

    /* "_khmermodule.pyx":825
 *       cdef set[HashIntoType].iterator it = divvy.begin()
 *       while it != divvy.end():
 *          subsets.append(deref(it))             # <<<<<<<<<<<<<<
 *          inc(it)
 *       return subsets
 */
    if (unlikely(((PyObject *)__pyx_v_subsets) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyLong_FromUnsignedLongLong((*__pyx_v_it)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyList_Append(__pyx_v_subsets, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_khmermodule.pyx":826
 *       while it != divvy.end():
 *          subsets.append(deref(it))
 *          inc(it)             # <<<<<<<<<<<<<<
 *       return subsets
 *    def kmer_degree(self, char* s):
 */
    (++__pyx_v_it);
  }

  /* "_khmermodule.pyx":827
 *          subsets.append(deref(it))
 *          inc(it)
 *       return subsets             # <<<<<<<<<<<<<<
 *    def kmer_degree(self, char* s):
 *       return self.thisptr.kmer_degree(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_subsets));
  __pyx_r = ((PyObject *)__pyx_v_subsets);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.divide_tags_into_subsets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_subsets);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":828
 *          inc(it)
 *       return subsets
 *    def kmer_degree(self, char* s):             # <<<<<<<<<<<<<<
 *       return self.thisptr.kmer_degree(s)
 *    def set_partition_id(self, char* kmer, PartitionID p):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_42kmer_degree(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_42kmer_degree(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kmer_degree");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.kmer_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":829
 *       return subsets
 *    def kmer_degree(self, char* s):
 *       return self.thisptr.kmer_degree(s)             # <<<<<<<<<<<<<<
 *    def set_partition_id(self, char* kmer, PartitionID p):
 *       self.thisptr.partition.set_partition_id(kmer, p)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->kmer_degree(__pyx_v_s)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.kmer_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":830
 *    def kmer_degree(self, char* s):
 *       return self.thisptr.kmer_degree(s)
 *    def set_partition_id(self, char* kmer, PartitionID p):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.set_partition_id(kmer, p)
 *    def join_partitions(self, PartitionID p1, PartitionID p2):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_43set_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_43set_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_kmer;
  __pyx_t_5khmer_6_khmer_PartitionID __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__kmer,&__pyx_n_s__p,0};
  __Pyx_RefNannySetupContext("set_partition_id");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__p);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_partition_id", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "set_partition_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_kmer = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_p = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_p == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_partition_id", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.set_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":831
 *       return self.thisptr.kmer_degree(s)
 *    def set_partition_id(self, char* kmer, PartitionID p):
 *       self.thisptr.partition.set_partition_id(kmer, p)             # <<<<<<<<<<<<<<
 *    def join_partitions(self, PartitionID p1, PartitionID p2):
 *       self.thisptr.partition.join_partitions(p1, p2)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->set_partition_id(__pyx_v_kmer, __pyx_v_p);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":832
 *    def set_partition_id(self, char* kmer, PartitionID p):
 *       self.thisptr.partition.set_partition_id(kmer, p)
 *    def join_partitions(self, PartitionID p1, PartitionID p2):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.join_partitions(p1, p2)
 *    def get_partition_id(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_44join_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_44join_partitions(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_PartitionID __pyx_v_p1;
  __pyx_t_5khmer_6_khmer_PartitionID __pyx_v_p2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__p1,&__pyx_n_s__p2,0};
  __Pyx_RefNannySetupContext("join_partitions");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__p1);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__p2);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("join_partitions", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "join_partitions") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p1 = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_p1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_p2 = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_p2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join_partitions", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.join_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":833
 *       self.thisptr.partition.set_partition_id(kmer, p)
 *    def join_partitions(self, PartitionID p1, PartitionID p2):
 *       self.thisptr.partition.join_partitions(p1, p2)             # <<<<<<<<<<<<<<
 *    def get_partition_id(self, char* s):
 *       return self.thisptr.partition.get_partition_id(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->join_partitions(__pyx_v_p1, __pyx_v_p2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":834
 *    def join_partitions(self, PartitionID p1, PartitionID p2):
 *       self.thisptr.partition.join_partitions(p1, p2)
 *    def get_partition_id(self, char* s):             # <<<<<<<<<<<<<<
 *       return self.thisptr.partition.get_partition_id(s)
 *    def is_single_partition(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_45get_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_45get_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_partition_id");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.get_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":835
 *       self.thisptr.partition.join_partitions(p1, p2)
 *    def get_partition_id(self, char* s):
 *       return self.thisptr.partition.get_partition_id(s)             # <<<<<<<<<<<<<<
 *    def is_single_partition(self, char* s):
 *       return self.thisptr.partition.is_single_partition(s)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->get_partition_id(__pyx_v_s)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.get_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":836
 *    def get_partition_id(self, char* s):
 *       return self.thisptr.partition.get_partition_id(s)
 *    def is_single_partition(self, char* s):             # <<<<<<<<<<<<<<
 *       return self.thisptr.partition.is_single_partition(s)
 *    def _set_tag_density(self, unsigned int d):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_46is_single_partition(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_46is_single_partition(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_single_partition");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.is_single_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":837
 *       return self.thisptr.partition.get_partition_id(s)
 *    def is_single_partition(self, char* s):
 *       return self.thisptr.partition.is_single_partition(s)             # <<<<<<<<<<<<<<
 *    def _set_tag_density(self, unsigned int d):
 *       self.thisptr._set_tag_density(d)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->is_single_partition(__pyx_v_s)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.is_single_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":838
 *    def is_single_partition(self, char* s):
 *       return self.thisptr.partition.is_single_partition(s)
 *    def _set_tag_density(self, unsigned int d):             # <<<<<<<<<<<<<<
 *       self.thisptr._set_tag_density(d)
 *    def _get_tag_density(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_47_set_tag_density(PyObject *__pyx_v_self, PyObject *__pyx_arg_d); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_47_set_tag_density(PyObject *__pyx_v_self, PyObject *__pyx_arg_d) {
  unsigned int __pyx_v_d;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_tag_density");
  assert(__pyx_arg_d); {
    __pyx_v_d = __Pyx_PyInt_AsUnsignedInt(__pyx_arg_d); if (unlikely((__pyx_v_d == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits._set_tag_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":839
 *       return self.thisptr.partition.is_single_partition(s)
 *    def _set_tag_density(self, unsigned int d):
 *       self.thisptr._set_tag_density(d)             # <<<<<<<<<<<<<<
 *    def _get_tag_density(self):
 *       return self.thisptr._get_tag_density()
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->_set_tag_density(__pyx_v_d);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":840
 *    def _set_tag_density(self, unsigned int d):
 *       self.thisptr._set_tag_density(d)
 *    def _get_tag_density(self):             # <<<<<<<<<<<<<<
 *       return self.thisptr._get_tag_density()
 *    def trim_on_degree(self, seq, unsigned int max_degree):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_48_get_tag_density(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_48_get_tag_density(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_tag_density");

  /* "_khmermodule.pyx":841
 *       self.thisptr._set_tag_density(d)
 *    def _get_tag_density(self):
 *       return self.thisptr._get_tag_density()             # <<<<<<<<<<<<<<
 *    def trim_on_degree(self, seq, unsigned int max_degree):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_degree(seq, max_degree)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->_get_tag_density()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits._get_tag_density", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":842
 *    def _get_tag_density(self):
 *       return self.thisptr._get_tag_density()
 *    def trim_on_degree(self, seq, unsigned int max_degree):             # <<<<<<<<<<<<<<
 *       cdef unsigned int trim_at = self.thisptr.trim_on_degree(seq, max_degree)
 *       trim_seq = seq[0:trim_at]
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_49trim_on_degree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_49trim_on_degree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  unsigned int __pyx_v_max_degree;
  unsigned int __pyx_v_trim_at;
  PyObject *__pyx_v_trim_seq = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__seq,&__pyx_n_s__max_degree,0};
  __Pyx_RefNannySetupContext("trim_on_degree");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__seq);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_degree);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_on_degree", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "trim_on_degree") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_seq = values[0];
    __pyx_v_max_degree = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_max_degree == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trim_on_degree", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":843
 *       return self.thisptr._get_tag_density()
 *    def trim_on_degree(self, seq, unsigned int max_degree):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_degree(seq, max_degree)             # <<<<<<<<<<<<<<
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_trim_at = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->trim_on_degree(__pyx_t_1, __pyx_v_max_degree);

  /* "_khmermodule.pyx":844
 *    def trim_on_degree(self, seq, unsigned int max_degree):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_degree(seq, max_degree)
 *       trim_seq = seq[0:trim_at]             # <<<<<<<<<<<<<<
 *       return trim_seq, trim_at
 *    def trim_on_sodd(self, seq, unsigned int max_sodd):
 */
  __pyx_t_2 = __Pyx_PySequence_GetSlice(__pyx_v_seq, 0, __pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_trim_seq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":845
 *       cdef unsigned int trim_at = self.thisptr.trim_on_degree(seq, max_degree)
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at             # <<<<<<<<<<<<<<
 *    def trim_on_sodd(self, seq, unsigned int max_sodd):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_sodd(seq, max_sodd)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_trim_seq);
  __Pyx_GIVEREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trim_seq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":846
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 *    def trim_on_sodd(self, seq, unsigned int max_sodd):             # <<<<<<<<<<<<<<
 *       cdef unsigned int trim_at = self.thisptr.trim_on_sodd(seq, max_sodd)
 *       trim_seq = seq[0:trim_at]
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_50trim_on_sodd(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_50trim_on_sodd(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  unsigned int __pyx_v_max_sodd;
  unsigned int __pyx_v_trim_at;
  PyObject *__pyx_v_trim_seq = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__seq,&__pyx_n_s__max_sodd,0};
  __Pyx_RefNannySetupContext("trim_on_sodd");
  {
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__seq);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_sodd);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_on_sodd", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "trim_on_sodd") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_seq = values[0];
    __pyx_v_max_sodd = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_max_sodd == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trim_on_sodd", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 846; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_sodd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":847
 *       return trim_seq, trim_at
 *    def trim_on_sodd(self, seq, unsigned int max_sodd):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_sodd(seq, max_sodd)             # <<<<<<<<<<<<<<
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_trim_at = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->trim_on_sodd(__pyx_t_1, __pyx_v_max_sodd);

  /* "_khmermodule.pyx":848
 *    def trim_on_sodd(self, seq, unsigned int max_sodd):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_sodd(seq, max_sodd)
 *       trim_seq = seq[0:trim_at]             # <<<<<<<<<<<<<<
 *       return trim_seq, trim_at
 *    def trim_on_stoptags(self, seq):
 */
  __pyx_t_2 = __Pyx_PySequence_GetSlice(__pyx_v_seq, 0, __pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_trim_seq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":849
 *       cdef unsigned int trim_at = self.thisptr.trim_on_sodd(seq, max_sodd)
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at             # <<<<<<<<<<<<<<
 *    def trim_on_stoptags(self, seq):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_stoptags(seq)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_trim_seq);
  __Pyx_GIVEREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_sodd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trim_seq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":850
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 *    def trim_on_stoptags(self, seq):             # <<<<<<<<<<<<<<
 *       cdef unsigned int trim_at = self.thisptr.trim_on_stoptags(seq)
 *       trim_seq = seq[0:trim_at]
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_51trim_on_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_v_seq); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_51trim_on_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_v_seq) {
  unsigned int __pyx_v_trim_at;
  PyObject *__pyx_v_trim_seq = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trim_on_stoptags");

  /* "_khmermodule.pyx":851
 *       return trim_seq, trim_at
 *    def trim_on_stoptags(self, seq):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_stoptags(seq)             # <<<<<<<<<<<<<<
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_trim_at = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->trim_on_stoptags(__pyx_t_1);

  /* "_khmermodule.pyx":852
 *    def trim_on_stoptags(self, seq):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_stoptags(seq)
 *       trim_seq = seq[0:trim_at]             # <<<<<<<<<<<<<<
 *       return trim_seq, trim_at
 *    def trim_on_density_explosion(self, seq, unsigned long radius, unsigned long max_volume):
 */
  __pyx_t_2 = __Pyx_PySequence_GetSlice(__pyx_v_seq, 0, __pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_trim_seq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":853
 *       cdef unsigned int trim_at = self.thisptr.trim_on_stoptags(seq)
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at             # <<<<<<<<<<<<<<
 *    def trim_on_density_explosion(self, seq, unsigned long radius, unsigned long max_volume):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_density_explosion(seq, radius, max_volume)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_trim_seq);
  __Pyx_GIVEREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_stoptags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trim_seq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":854
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 *    def trim_on_density_explosion(self, seq, unsigned long radius, unsigned long max_volume):             # <<<<<<<<<<<<<<
 *       cdef unsigned int trim_at = self.thisptr.trim_on_density_explosion(seq, radius, max_volume)
 *       trim_seq = seq[0:trim_at]
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_52trim_on_density_explosion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_52trim_on_density_explosion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  unsigned long __pyx_v_radius;
  unsigned long __pyx_v_max_volume;
  unsigned int __pyx_v_trim_at;
  PyObject *__pyx_v_trim_seq = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__seq,&__pyx_n_s__radius,&__pyx_n_s__max_volume,0};
  __Pyx_RefNannySetupContext("trim_on_density_explosion");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__seq);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__radius);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_on_density_explosion", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_volume);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trim_on_density_explosion", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "trim_on_density_explosion") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_seq = values[0];
    __pyx_v_radius = __Pyx_PyInt_AsUnsignedLong(values[1]); if (unlikely((__pyx_v_radius == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_volume = __Pyx_PyInt_AsUnsignedLong(values[2]); if (unlikely((__pyx_v_max_volume == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trim_on_density_explosion", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_density_explosion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":855
 *       return trim_seq, trim_at
 *    def trim_on_density_explosion(self, seq, unsigned long radius, unsigned long max_volume):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_density_explosion(seq, radius, max_volume)             # <<<<<<<<<<<<<<
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_trim_at = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->trim_on_density_explosion(__pyx_t_1, __pyx_v_radius, __pyx_v_max_volume);

  /* "_khmermodule.pyx":856
 *    def trim_on_density_explosion(self, seq, unsigned long radius, unsigned long max_volume):
 *       cdef unsigned int trim_at = self.thisptr.trim_on_density_explosion(seq, radius, max_volume)
 *       trim_seq = seq[0:trim_at]             # <<<<<<<<<<<<<<
 *       return trim_seq, trim_at
 *    def identify_stoptags_by_position(self, seq):
 */
  __pyx_t_2 = __Pyx_PySequence_GetSlice(__pyx_v_seq, 0, __pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_trim_seq = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":857
 *       cdef unsigned int trim_at = self.thisptr.trim_on_density_explosion(seq, radius, max_volume)
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at             # <<<<<<<<<<<<<<
 *    def identify_stoptags_by_position(self, seq):
 *       cdef vector[unsigned int] posns
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_trim_at); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_trim_seq);
  __Pyx_GIVEREF(__pyx_v_trim_seq);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.trim_on_density_explosion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trim_seq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":858
 *       trim_seq = seq[0:trim_at]
 *       return trim_seq, trim_at
 *    def identify_stoptags_by_position(self, seq):             # <<<<<<<<<<<<<<
 *       cdef vector[unsigned int] posns
 *       self.thisptr.identify_stop_tags_by_position(seq, posns)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_53identify_stoptags_by_position(PyObject *__pyx_v_self, PyObject *__pyx_v_seq); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_53identify_stoptags_by_position(PyObject *__pyx_v_self, PyObject *__pyx_v_seq) {
  std::vector<unsigned int> __pyx_v_posns;
  PyObject *__pyx_v_poslist = NULL;
  std::vector<unsigned int>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("identify_stoptags_by_position");

  /* "_khmermodule.pyx":860
 *    def identify_stoptags_by_position(self, seq):
 *       cdef vector[unsigned int] posns
 *       self.thisptr.identify_stop_tags_by_position(seq, posns)             # <<<<<<<<<<<<<<
 *       poslist = []
 *       cdef vector[unsigned int].iterator it = posns.begin()
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->identify_stop_tags_by_position(__pyx_t_1, __pyx_v_posns);

  /* "_khmermodule.pyx":861
 *       cdef vector[unsigned int] posns
 *       self.thisptr.identify_stop_tags_by_position(seq, posns)
 *       poslist = []             # <<<<<<<<<<<<<<
 *       cdef vector[unsigned int].iterator it = posns.begin()
 *       while it != posns.end():
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_poslist = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":862
 *       self.thisptr.identify_stop_tags_by_position(seq, posns)
 *       poslist = []
 *       cdef vector[unsigned int].iterator it = posns.begin()             # <<<<<<<<<<<<<<
 *       while it != posns.end():
 *          poslist.append(deref(it))
 */
  __pyx_v_it = __pyx_v_posns.begin();

  /* "_khmermodule.pyx":863
 *       poslist = []
 *       cdef vector[unsigned int].iterator it = posns.begin()
 *       while it != posns.end():             # <<<<<<<<<<<<<<
 *          poslist.append(deref(it))
 *          inc(it)
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_it != __pyx_v_posns.end());
    if (!__pyx_t_3) break;

    /* "_khmermodule.pyx":864
 *       cdef vector[unsigned int].iterator it = posns.begin()
 *       while it != posns.end():
 *          poslist.append(deref(it))             # <<<<<<<<<<<<<<
 *          inc(it)
 *       return poslist
 */
    if (unlikely(((PyObject *)__pyx_v_poslist) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = PyLong_FromUnsignedLong((*__pyx_v_it)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyList_Append(__pyx_v_poslist, __pyx_t_2); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "_khmermodule.pyx":865
 *       while it != posns.end():
 *          poslist.append(deref(it))
 *          inc(it)             # <<<<<<<<<<<<<<
 *       return poslist
 *    def hashsizes(self):
 */
    (++__pyx_v_it);
  }

  /* "_khmermodule.pyx":866
 *          poslist.append(deref(it))
 *          inc(it)
 *       return poslist             # <<<<<<<<<<<<<<
 *    def hashsizes(self):
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_poslist));
  __pyx_r = ((PyObject *)__pyx_v_poslist);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.identify_stoptags_by_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_poslist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":867
 *          inc(it)
 *       return poslist
 *    def hashsizes(self):             # <<<<<<<<<<<<<<
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()
 *       hashes = []
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_54hashsizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_54hashsizes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::vector<__pyx_t_5khmer_6_khmer_HashIntoType> __pyx_v_res;
  PyObject *__pyx_v_hashes = NULL;
  std::vector<__pyx_t_5khmer_6_khmer_HashIntoType>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hashsizes");

  /* "_khmermodule.pyx":868
 *       return poslist
 *    def hashsizes(self):
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()             # <<<<<<<<<<<<<<
 *       hashes = []
 * 
 */
  __pyx_v_res = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->get_tablesizes();

  /* "_khmermodule.pyx":869
 *    def hashsizes(self):
 *       cdef vector[HashIntoType] res = self.thisptr.get_tablesizes()
 *       hashes = []             # <<<<<<<<<<<<<<
 * 
 *       cdef vector[HashIntoType].iterator it = res.begin()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_hashes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_khmermodule.pyx":871
 *       hashes = []
 * 
 *       cdef vector[HashIntoType].iterator it = res.begin()             # <<<<<<<<<<<<<<
 *       while it != res.end():
 *          hashes.append(deref(it))
 */
  __pyx_v_it = __pyx_v_res.begin();

  /* "_khmermodule.pyx":872
 * 
 *       cdef vector[HashIntoType].iterator it = res.begin()
 *       while it != res.end():             # <<<<<<<<<<<<<<
 *          hashes.append(deref(it))
 *          inc(it)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != __pyx_v_res.end());
    if (!__pyx_t_2) break;

    /* "_khmermodule.pyx":873
 *       cdef vector[HashIntoType].iterator it = res.begin()
 *       while it != res.end():
 *          hashes.append(deref(it))             # <<<<<<<<<<<<<<
 *          inc(it)
 *       return hashes
 */
    if (unlikely(((PyObject *)__pyx_v_hashes) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyLong_FromUnsignedLongLong((*__pyx_v_it)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyList_Append(__pyx_v_hashes, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_khmermodule.pyx":874
 *       while it != res.end():
 *          hashes.append(deref(it))
 *          inc(it)             # <<<<<<<<<<<<<<
 *       return hashes
 *    def extract_unique_paths(self, seq, unsigned int min_length, float min_unique_f):
 */
    (++__pyx_v_it);
  }

  /* "_khmermodule.pyx":875
 *          hashes.append(deref(it))
 *          inc(it)
 *       return hashes             # <<<<<<<<<<<<<<
 *    def extract_unique_paths(self, seq, unsigned int min_length, float min_unique_f):
 *       cdef vector[string] results
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_hashes));
  __pyx_r = ((PyObject *)__pyx_v_hashes);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.hashsizes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hashes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":876
 *          inc(it)
 *       return hashes
 *    def extract_unique_paths(self, seq, unsigned int min_length, float min_unique_f):             # <<<<<<<<<<<<<<
 *       cdef vector[string] results
 *       cdef char* cstr
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_55extract_unique_paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_55extract_unique_paths(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seq = 0;
  unsigned int __pyx_v_min_length;
  float __pyx_v_min_unique_f;
  std::vector<std::string> __pyx_v_results;
  char *__pyx_v_cstr;
  std::string __pyx_v_s;
  PyObject *__pyx_v_res = NULL;
  std::vector<std::string>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__seq,&__pyx_n_s__min_length,&__pyx_n_s__min_unique_f,0};
  __Pyx_RefNannySetupContext("extract_unique_paths");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__seq);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_length);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_unique_paths", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_unique_f);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extract_unique_paths", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "extract_unique_paths") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_seq = values[0];
    __pyx_v_min_length = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_min_length == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_min_unique_f = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_min_unique_f == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_unique_paths", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.extract_unique_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":880
 *       cdef char* cstr
 *       cdef string s
 *       self.thisptr.extract_unique_paths(seq, min_length, min_unique_f, results)             # <<<<<<<<<<<<<<
 *       res = []
 *       cdef vector[string].iterator it = <vector[string].iterator> results.begin()
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_seq); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->extract_unique_paths(__pyx_t_1, __pyx_v_min_length, __pyx_v_min_unique_f, __pyx_v_results);

  /* "_khmermodule.pyx":881
 *       cdef string s
 *       self.thisptr.extract_unique_paths(seq, min_length, min_unique_f, results)
 *       res = []             # <<<<<<<<<<<<<<
 *       cdef vector[string].iterator it = <vector[string].iterator> results.begin()
 *       while it != results.end():
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_v_res = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "_khmermodule.pyx":882
 *       self.thisptr.extract_unique_paths(seq, min_length, min_unique_f, results)
 *       res = []
 *       cdef vector[string].iterator it = <vector[string].iterator> results.begin()             # <<<<<<<<<<<<<<
 *       while it != results.end():
 *          s = deref(it)
 */
  __pyx_v_it = ((std::vector<std::string>::iterator)__pyx_v_results.begin());

  /* "_khmermodule.pyx":883
 *       res = []
 *       cdef vector[string].iterator it = <vector[string].iterator> results.begin()
 *       while it != results.end():             # <<<<<<<<<<<<<<
 *          s = deref(it)
 *          cstr = <char*>malloc(s.length()+1)
 */
  while (1) {
    __pyx_t_3 = (__pyx_v_it != __pyx_v_results.end());
    if (!__pyx_t_3) break;

    /* "_khmermodule.pyx":884
 *       cdef vector[string].iterator it = <vector[string].iterator> results.begin()
 *       while it != results.end():
 *          s = deref(it)             # <<<<<<<<<<<<<<
 *          cstr = <char*>malloc(s.length()+1)
 *          strcpy(cstr, s.c_str())
 */
    __pyx_v_s = (*__pyx_v_it);

    /* "_khmermodule.pyx":885
 *       while it != results.end():
 *          s = deref(it)
 *          cstr = <char*>malloc(s.length()+1)             # <<<<<<<<<<<<<<
 *          strcpy(cstr, s.c_str())
 *          res.append(cstr)
 */
    __pyx_v_cstr = ((char *)malloc((__pyx_v_s.length() + 1)));

    /* "_khmermodule.pyx":886
 *          s = deref(it)
 *          cstr = <char*>malloc(s.length()+1)
 *          strcpy(cstr, s.c_str())             # <<<<<<<<<<<<<<
 *          res.append(cstr)
 *          inc(it)
 */
    strcpy(__pyx_v_cstr, __pyx_v_s.c_str());

    /* "_khmermodule.pyx":887
 *          cstr = <char*>malloc(s.length()+1)
 *          strcpy(cstr, s.c_str())
 *          res.append(cstr)             # <<<<<<<<<<<<<<
 *          inc(it)
 *       return res
 */
    if (unlikely(((PyObject *)__pyx_v_res) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_2 = PyBytes_FromString(__pyx_v_cstr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_4 = PyList_Append(__pyx_v_res, ((PyObject *)__pyx_t_2)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

    /* "_khmermodule.pyx":888
 *          strcpy(cstr, s.c_str())
 *          res.append(cstr)
 *          inc(it)             # <<<<<<<<<<<<<<
 *       return res
 *    def filter_if_present(self, char* infile, char* output, callback_obj=None):
 */
    (++__pyx_v_it);
  }

  /* "_khmermodule.pyx":889
 *          res.append(cstr)
 *          inc(it)
 *       return res             # <<<<<<<<<<<<<<
 *    def filter_if_present(self, char* infile, char* output, callback_obj=None):
 *       global _callback_obj
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.extract_unique_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":890
 *          inc(it)
 *       return res
 *    def filter_if_present(self, char* infile, char* output, callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 * 
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_56filter_if_present(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_56filter_if_present(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_infile;
  char *__pyx_v_output;
  PyObject *__pyx_v_callback_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__infile,&__pyx_n_s__output,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("filter_if_present");
  {
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__infile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__output);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("filter_if_present", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "filter_if_present") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_infile = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_infile) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_output = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_output) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_if_present", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 890; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.filter_if_present", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":893
 *       global _callback_obj
 * 
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 * 
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":894
 * 
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.filter_if_present(infile, output, _report_fn, <void*>_callback_obj)
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":896
 *          _callback_obj = callback_obj
 * 
 *       self.thisptr.filter_if_present(infile, output, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *    def _validate_partitionmap(self):
 *       self.thisptr.partition._validate_pmap()
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->filter_if_present(__pyx_v_infile, __pyx_v_output, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.filter_if_present", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":897
 * 
 *       self.thisptr.filter_if_present(infile, output, _report_fn, <void*>_callback_obj)
 *    def _validate_partitionmap(self):             # <<<<<<<<<<<<<<
 *       self.thisptr.partition._validate_pmap()
 *    def hitraverse_to_stoptags(self, char* filename, _new_counting_hash ch, unsigned int cutoff):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_57_validate_partitionmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_57_validate_partitionmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_validate_partitionmap");

  /* "_khmermodule.pyx":898
 *       self.thisptr.filter_if_present(infile, output, _report_fn, <void*>_callback_obj)
 *    def _validate_partitionmap(self):
 *       self.thisptr.partition._validate_pmap()             # <<<<<<<<<<<<<<
 *    def hitraverse_to_stoptags(self, char* filename, _new_counting_hash ch, unsigned int cutoff):
 *       self.thisptr.hitraverse_to_stoptags(filename, ch.thisptr[0], cutoff)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->_validate_pmap();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":899
 *    def _validate_partitionmap(self):
 *       self.thisptr.partition._validate_pmap()
 *    def hitraverse_to_stoptags(self, char* filename, _new_counting_hash ch, unsigned int cutoff):             # <<<<<<<<<<<<<<
 *       self.thisptr.hitraverse_to_stoptags(filename, ch.thisptr[0], cutoff)
 *    def find_radius_for_volume(self, char* kmer, unsigned long max_count, unsigned long max_radius):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_58hitraverse_to_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_58hitraverse_to_stoptags(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_filename;
  struct __pyx_obj_5khmer_6_khmer__new_counting_hash *__pyx_v_ch = 0;
  unsigned int __pyx_v_cutoff;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__filename,&__pyx_n_s__ch,&__pyx_n_s__cutoff,0};
  __Pyx_RefNannySetupContext("hitraverse_to_stoptags");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__filename);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ch);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hitraverse_to_stoptags", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cutoff);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("hitraverse_to_stoptags", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "hitraverse_to_stoptags") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ch = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)values[1]);
    __pyx_v_cutoff = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_cutoff == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("hitraverse_to_stoptags", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.hitraverse_to_stoptags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ch), __pyx_ptype_5khmer_6_khmer__new_counting_hash, 1, "ch", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":900
 *       self.thisptr.partition._validate_pmap()
 *    def hitraverse_to_stoptags(self, char* filename, _new_counting_hash ch, unsigned int cutoff):
 *       self.thisptr.hitraverse_to_stoptags(filename, ch.thisptr[0], cutoff)             # <<<<<<<<<<<<<<
 *    def find_radius_for_volume(self, char* kmer, unsigned long max_count, unsigned long max_radius):
 *       cdef HashIntoType kmer_f, kmer_r
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->hitraverse_to_stoptags(__pyx_v_filename, (__pyx_v_ch->thisptr[0]), __pyx_v_cutoff);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.hitraverse_to_stoptags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":901
 *    def hitraverse_to_stoptags(self, char* filename, _new_counting_hash ch, unsigned int cutoff):
 *       self.thisptr.hitraverse_to_stoptags(filename, ch.thisptr[0], cutoff)
 *    def find_radius_for_volume(self, char* kmer, unsigned long max_count, unsigned long max_radius):             # <<<<<<<<<<<<<<
 *       cdef HashIntoType kmer_f, kmer_r
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_59find_radius_for_volume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_59find_radius_for_volume(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_kmer;
  unsigned long __pyx_v_max_count;
  unsigned long __pyx_v_max_radius;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer_f;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5khmer_6_khmer_WordLength __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__kmer,&__pyx_n_s__max_count,&__pyx_n_s__max_radius,0};
  __Pyx_RefNannySetupContext("find_radius_for_volume");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_count);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("find_radius_for_volume", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_radius);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("find_radius_for_volume", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "find_radius_for_volume") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_kmer = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_count = __Pyx_PyInt_AsUnsignedLong(values[1]); if (unlikely((__pyx_v_max_count == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_radius = __Pyx_PyInt_AsUnsignedLong(values[2]); if (unlikely((__pyx_v_max_radius == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_radius_for_volume", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.find_radius_for_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":903
 *    def find_radius_for_volume(self, char* kmer, unsigned long max_count, unsigned long max_radius):
 *       cdef HashIntoType kmer_f, kmer_r
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)             # <<<<<<<<<<<<<<
 *       return self.thisptr.find_radius_for_volume(kmer_f, kmer_r, max_count, max_radius)
 *    def count_kmers_on_radius(self, char* kmer, unsigned int radius, unsigned int max_volume):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__ksize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  khmer::_hash(__pyx_v_kmer, __pyx_t_3, __pyx_v_kmer_f, __pyx_v_kmer_r);

  /* "_khmermodule.pyx":904
 *       cdef HashIntoType kmer_f, kmer_r
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)
 *       return self.thisptr.find_radius_for_volume(kmer_f, kmer_r, max_count, max_radius)             # <<<<<<<<<<<<<<
 *    def count_kmers_on_radius(self, char* kmer, unsigned int radius, unsigned int max_volume):
 *       cdef HashIntoType kmer_f, kmer_r
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->find_radius_for_volume(__pyx_v_kmer_f, __pyx_v_kmer_r, __pyx_v_max_count, __pyx_v_max_radius)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.find_radius_for_volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":905
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)
 *       return self.thisptr.find_radius_for_volume(kmer_f, kmer_r, max_count, max_radius)
 *    def count_kmers_on_radius(self, char* kmer, unsigned int radius, unsigned int max_volume):             # <<<<<<<<<<<<<<
 *       cdef HashIntoType kmer_f, kmer_r
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_60count_kmers_on_radius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_60count_kmers_on_radius(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_kmer;
  unsigned int __pyx_v_radius;
  unsigned int __pyx_v_max_volume;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer_f;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5khmer_6_khmer_WordLength __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__kmer,&__pyx_n_s__radius,&__pyx_n_s__max_volume,0};
  __Pyx_RefNannySetupContext("count_kmers_on_radius");
  {
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__radius);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count_kmers_on_radius", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_volume);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("count_kmers_on_radius", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "count_kmers_on_radius") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_kmer = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_kmer) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_radius = __Pyx_PyInt_AsUnsignedInt(values[1]); if (unlikely((__pyx_v_radius == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_volume = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_max_volume == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_kmers_on_radius", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count_kmers_on_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":907
 *    def count_kmers_on_radius(self, char* kmer, unsigned int radius, unsigned int max_volume):
 *       cdef HashIntoType kmer_f, kmer_r
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)             # <<<<<<<<<<<<<<
 *       return self.thisptr.count_kmers_on_radius(kmer_f, kmer_r, radius, max_volume)
 *    def repartition_largest_partition(self, _new_subsetpartition subset_o,
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__ksize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  khmer::_hash(__pyx_v_kmer, __pyx_t_3, __pyx_v_kmer_f, __pyx_v_kmer_r);

  /* "_khmermodule.pyx":908
 *       cdef HashIntoType kmer_f, kmer_r
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)
 *       return self.thisptr.count_kmers_on_radius(kmer_f, kmer_r, radius, max_volume)             # <<<<<<<<<<<<<<
 *    def repartition_largest_partition(self, _new_subsetpartition subset_o,
 *                                      _new_counting_hash counting_o,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyLong_FromUnsignedLong(((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->count_kmers_on_radius(__pyx_v_kmer_f, __pyx_v_kmer_r, __pyx_v_radius, __pyx_v_max_volume)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.count_kmers_on_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":909
 *       _hash(kmer, self.ksize(), kmer_f, kmer_r)
 *       return self.thisptr.count_kmers_on_radius(kmer_f, kmer_r, radius, max_volume)
 *    def repartition_largest_partition(self, _new_subsetpartition subset_o,             # <<<<<<<<<<<<<<
 *                                      _new_counting_hash counting_o,
 *                                      unsigned int distance,
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_61repartition_largest_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_61repartition_largest_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *__pyx_v_subset_o = 0;
  struct __pyx_obj_5khmer_6_khmer__new_counting_hash *__pyx_v_counting_o = 0;
  unsigned int __pyx_v_distance;
  unsigned int __pyx_v_threshold;
  unsigned int __pyx_v_frequency;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__subset_o,&__pyx_n_s__counting_o,&__pyx_n_s__distance,&__pyx_n_s__threshold,&__pyx_n_s__frequency,0};
  __Pyx_RefNannySetupContext("repartition_largest_partition");
  {
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__subset_o);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__counting_o);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__distance);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__threshold);
        if (likely(values[3])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__frequency);
        if (likely(values[4])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "repartition_largest_partition") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_subset_o = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)values[0]);
    __pyx_v_counting_o = ((struct __pyx_obj_5khmer_6_khmer__new_counting_hash *)values[1]);
    __pyx_v_distance = __Pyx_PyInt_AsUnsignedInt(values[2]); if (unlikely((__pyx_v_distance == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 911; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_threshold = __Pyx_PyInt_AsUnsignedInt(values[3]); if (unlikely((__pyx_v_threshold == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_frequency = __Pyx_PyInt_AsUnsignedInt(values[4]); if (unlikely((__pyx_v_frequency == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("repartition_largest_partition", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.repartition_largest_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_subset_o);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subset_o), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "subset_o", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_counting_o), __pyx_ptype_5khmer_6_khmer__new_counting_hash, 1, "counting_o", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":913
 *                                      unsigned int distance,
 *                                      unsigned int threshold, unsigned int frequency):
 *       if subset_o is None:             # <<<<<<<<<<<<<<
 *          subset_o = _new_subsetpartition()
 *          subset_o.thisptr = self.thisptr.partition
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_subset_o) == Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":914
 *                                      unsigned int threshold, unsigned int frequency):
 *       if subset_o is None:
 *          subset_o = _new_subsetpartition()             # <<<<<<<<<<<<<<
 *          subset_o.thisptr = self.thisptr.partition
 *       return subset_o.thisptr.repartition_largest_partition(distance, threshold, frequency,
 */
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer__new_subsetpartition)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_v_subset_o));
    __pyx_v_subset_o = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "_khmermodule.pyx":915
 *       if subset_o is None:
 *          subset_o = _new_subsetpartition()
 *          subset_o.thisptr = self.thisptr.partition             # <<<<<<<<<<<<<<
 *       return subset_o.thisptr.repartition_largest_partition(distance, threshold, frequency,
 *                                                      counting_o.thisptr[0])
 */
    __pyx_v_subset_o->thisptr = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":916
 *          subset_o = _new_subsetpartition()
 *          subset_o.thisptr = self.thisptr.partition
 *       return subset_o.thisptr.repartition_largest_partition(distance, threshold, frequency,             # <<<<<<<<<<<<<<
 *                                                      counting_o.thisptr[0])
 *    def subset_partition_size_distribution(self, _new_subsetpartition subset_o):
 */
  __Pyx_XDECREF(__pyx_r);

  /* "_khmermodule.pyx":917
 *          subset_o.thisptr = self.thisptr.partition
 *       return subset_o.thisptr.repartition_largest_partition(distance, threshold, frequency,
 *                                                      counting_o.thisptr[0])             # <<<<<<<<<<<<<<
 *    def subset_partition_size_distribution(self, _new_subsetpartition subset_o):
 *       cdef map[unsigned long long, unsigned long long] *d = new map[unsigned long long, unsigned long long]()
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_subset_o->thisptr->repartition_largest_partition(__pyx_v_distance, __pyx_v_threshold, __pyx_v_frequency, (__pyx_v_counting_o->thisptr[0]))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.repartition_largest_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_subset_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":918
 *       return subset_o.thisptr.repartition_largest_partition(distance, threshold, frequency,
 *                                                      counting_o.thisptr[0])
 *    def subset_partition_size_distribution(self, _new_subsetpartition subset_o):             # <<<<<<<<<<<<<<
 *       cdef map[unsigned long long, unsigned long long] *d = new map[unsigned long long, unsigned long long]()
 *       cdef unsigned int n_unassigned = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_62subset_partition_size_distribution(PyObject *__pyx_v_self, PyObject *__pyx_v_subset_o); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_62subset_partition_size_distribution(PyObject *__pyx_v_self, PyObject *__pyx_v_subset_o) {
  std::map<unsigned PY_LONG_LONG,unsigned PY_LONG_LONG> *__pyx_v_d;
  unsigned int __pyx_v_n_unassigned;
  std::map<unsigned PY_LONG_LONG,unsigned PY_LONG_LONG>::iterator __pyx_v_it;
  unsigned int __pyx_v_tempOne;
  unsigned int __pyx_v_tempTwo;
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subset_partition_size_distribution");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subset_o), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "subset_o", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":919
 *                                                      counting_o.thisptr[0])
 *    def subset_partition_size_distribution(self, _new_subsetpartition subset_o):
 *       cdef map[unsigned long long, unsigned long long] *d = new map[unsigned long long, unsigned long long]()             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_unassigned = 0
 *       subset_o.thisptr.partition_size_distribution(d[0], n_unassigned)
 */
  __pyx_v_d = new std::map<unsigned PY_LONG_LONG,unsigned PY_LONG_LONG>();

  /* "_khmermodule.pyx":920
 *    def subset_partition_size_distribution(self, _new_subsetpartition subset_o):
 *       cdef map[unsigned long long, unsigned long long] *d = new map[unsigned long long, unsigned long long]()
 *       cdef unsigned int n_unassigned = 0             # <<<<<<<<<<<<<<
 *       subset_o.thisptr.partition_size_distribution(d[0], n_unassigned)
 * 
 */
  __pyx_v_n_unassigned = 0;

  /* "_khmermodule.pyx":921
 *       cdef map[unsigned long long, unsigned long long] *d = new map[unsigned long long, unsigned long long]()
 *       cdef unsigned int n_unassigned = 0
 *       subset_o.thisptr.partition_size_distribution(d[0], n_unassigned)             # <<<<<<<<<<<<<<
 * 
 *       cdef pair[unsigned long long, unsigned long long] mypair
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_subset_o)->thisptr->partition_size_distribution((__pyx_v_d[0]), __pyx_v_n_unassigned);

  /* "_khmermodule.pyx":924
 * 
 *       cdef pair[unsigned long long, unsigned long long] mypair
 *       cdef map[unsigned long long, unsigned long long].iterator it = d.begin()             # <<<<<<<<<<<<<<
 *       cdef unsigned int tempOne = 0
 *       cdef unsigned int tempTwo = 0
 */
  __pyx_v_it = __pyx_v_d->begin();

  /* "_khmermodule.pyx":925
 *       cdef pair[unsigned long long, unsigned long long] mypair
 *       cdef map[unsigned long long, unsigned long long].iterator it = d.begin()
 *       cdef unsigned int tempOne = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned int tempTwo = 0
 *       dist = []
 */
  __pyx_v_tempOne = 0;

  /* "_khmermodule.pyx":926
 *       cdef map[unsigned long long, unsigned long long].iterator it = d.begin()
 *       cdef unsigned int tempOne = 0
 *       cdef unsigned int tempTwo = 0             # <<<<<<<<<<<<<<
 *       dist = []
 *       while it != d.end():
 */
  __pyx_v_tempTwo = 0;

  /* "_khmermodule.pyx":927
 *       cdef unsigned int tempOne = 0
 *       cdef unsigned int tempTwo = 0
 *       dist = []             # <<<<<<<<<<<<<<
 *       while it != d.end():
 *          tempOne = deref(it).first
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_khmermodule.pyx":928
 *       cdef unsigned int tempTwo = 0
 *       dist = []
 *       while it != d.end():             # <<<<<<<<<<<<<<
 *          tempOne = deref(it).first
 *          tempTwo = deref(it).second
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != __pyx_v_d->end());
    if (!__pyx_t_2) break;

    /* "_khmermodule.pyx":929
 *       dist = []
 *       while it != d.end():
 *          tempOne = deref(it).first             # <<<<<<<<<<<<<<
 *          tempTwo = deref(it).second
 *          dist.append((tempOne, tempTwo))
 */
    __pyx_v_tempOne = (*__pyx_v_it).first;

    /* "_khmermodule.pyx":930
 *       while it != d.end():
 *          tempOne = deref(it).first
 *          tempTwo = deref(it).second             # <<<<<<<<<<<<<<
 *          dist.append((tempOne, tempTwo))
 *          inc(it)
 */
    __pyx_v_tempTwo = (*__pyx_v_it).second;

    /* "_khmermodule.pyx":931
 *          tempOne = deref(it).first
 *          tempTwo = deref(it).second
 *          dist.append((tempOne, tempTwo))             # <<<<<<<<<<<<<<
 *          inc(it)
 * 
 */
    if (unlikely(((PyObject *)__pyx_v_dist) == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "append"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_tempOne); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyLong_FromUnsignedLong(__pyx_v_tempTwo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = PyList_Append(__pyx_v_dist, ((PyObject *)__pyx_t_4)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

    /* "_khmermodule.pyx":932
 *          tempTwo = deref(it).second
 *          dist.append((tempOne, tempTwo))
 *          inc(it)             # <<<<<<<<<<<<<<
 * 
 *       return dist, n_unassigned
 */
    (++__pyx_v_it);
  }

  /* "_khmermodule.pyx":934
 *          inc(it)
 * 
 *       return dist, n_unassigned             # <<<<<<<<<<<<<<
 *    def find_all_tags(self, char* kmer_s):
 *       cdef HashIntoType kmer
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_n_unassigned); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_INCREF(((PyObject *)__pyx_v_dist));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_dist));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_dist));
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.subset_partition_size_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":935
 * 
 *       return dist, n_unassigned
 *    def find_all_tags(self, char* kmer_s):             # <<<<<<<<<<<<<<
 *       cdef HashIntoType kmer
 *       cdef HashIntoType kmer_f
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_63find_all_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_kmer_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_63find_all_tags(PyObject *__pyx_v_self, PyObject *__pyx_arg_kmer_s) {
  char *__pyx_v_kmer_s;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer_f;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_kmer_r;
  struct __pyx_obj_5khmer_6_khmer__pre_partition_info *__pyx_v_ppi = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_all_tags");
  assert(__pyx_arg_kmer_s); {
    __pyx_v_kmer_s = PyBytes_AsString(__pyx_arg_kmer_s); if (unlikely((!__pyx_v_kmer_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.find_all_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":939
 *       cdef HashIntoType kmer_f
 *       cdef HashIntoType kmer_r
 *       kmer = _hash(kmer_s, self.thisptr.ksize(), kmer_f, kmer_r)             # <<<<<<<<<<<<<<
 *       ppi = _pre_partition_info(kmer)
 *       self.thisptr.partition.find_all_tags(kmer_f, kmer_r, ppi.thisptr.tagged_kmers,
 */
  __pyx_v_kmer = khmer::_hash(__pyx_v_kmer_s, ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->ksize(), __pyx_v_kmer_f, __pyx_v_kmer_r);

  /* "_khmermodule.pyx":940
 *       cdef HashIntoType kmer_r
 *       kmer = _hash(kmer_s, self.thisptr.ksize(), kmer_f, kmer_r)
 *       ppi = _pre_partition_info(kmer)             # <<<<<<<<<<<<<<
 *       self.thisptr.partition.find_all_tags(kmer_f, kmer_r, ppi.thisptr.tagged_kmers,
 *                                            self.thisptr.all_tags)
 */
  __pyx_t_1 = PyLong_FromUnsignedLongLong(__pyx_v_kmer); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5khmer_6_khmer__pre_partition_info)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_v_ppi = ((struct __pyx_obj_5khmer_6_khmer__pre_partition_info *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_khmermodule.pyx":942
 *       ppi = _pre_partition_info(kmer)
 *       self.thisptr.partition.find_all_tags(kmer_f, kmer_r, ppi.thisptr.tagged_kmers,
 *                                            self.thisptr.all_tags)             # <<<<<<<<<<<<<<
 * 
 *       self.thisptr.add_kmer_to_tags(kmer)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->find_all_tags(__pyx_v_kmer_f, __pyx_v_kmer_r, __pyx_v_ppi->thisptr->tagged_kmers, ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->all_tags);

  /* "_khmermodule.pyx":944
 *                                            self.thisptr.all_tags)
 * 
 *       self.thisptr.add_kmer_to_tags(kmer)             # <<<<<<<<<<<<<<
 * 
 *       return ppi
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->add_kmer_to_tags(__pyx_v_kmer);

  /* "_khmermodule.pyx":946
 *       self.thisptr.add_kmer_to_tags(kmer)
 * 
 *       return ppi             # <<<<<<<<<<<<<<
 *    def assign_partition_id(self, _pre_partition_info ppi_obj):
 *       cdef PartitionID p = self.thisptr.partition.assign_partition_id(ppi_obj.thisptr.kmer,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ppi));
  __pyx_r = ((PyObject *)__pyx_v_ppi);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.find_all_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ppi);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":947
 * 
 *       return ppi
 *    def assign_partition_id(self, _pre_partition_info ppi_obj):             # <<<<<<<<<<<<<<
 *       cdef PartitionID p = self.thisptr.partition.assign_partition_id(ppi_obj.thisptr.kmer,
 *                                                                       ppi_obj.thisptr.tagged_kmers)
 */

static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_64assign_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_v_ppi_obj); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_13_new_hashbits_64assign_partition_id(PyObject *__pyx_v_self, PyObject *__pyx_v_ppi_obj) {
  __pyx_t_5khmer_6_khmer_PartitionID __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_partition_id");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ppi_obj), __pyx_ptype_5khmer_6_khmer__pre_partition_info, 1, "ppi_obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":949
 *    def assign_partition_id(self, _pre_partition_info ppi_obj):
 *       cdef PartitionID p = self.thisptr.partition.assign_partition_id(ppi_obj.thisptr.kmer,
 *                                                                       ppi_obj.thisptr.tagged_kmers)             # <<<<<<<<<<<<<<
 *       return p
 * 
 */
  __pyx_v_p = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_self)->thisptr->partition->assign_partition_id(((struct __pyx_obj_5khmer_6_khmer__pre_partition_info *)__pyx_v_ppi_obj)->thisptr->kmer, ((struct __pyx_obj_5khmer_6_khmer__pre_partition_info *)__pyx_v_ppi_obj)->thisptr->tagged_kmers);

  /* "_khmermodule.pyx":950
 *       cdef PartitionID p = self.thisptr.partition.assign_partition_id(ppi_obj.thisptr.kmer,
 *                                                                       ppi_obj.thisptr.tagged_kmers)
 *       return p             # <<<<<<<<<<<<<<
 * 
 * cdef class _new_subsetpartition:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_p); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("khmer._khmer._new_hashbits.assign_partition_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":954
 * cdef class _new_subsetpartition:
 *    cdef SubsetPartition *thisptr
 *    def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *       if arg is not None:
 *          hb = <_new_hashbits> arg
 */

static int __pyx_pf_5khmer_6_khmer_20_new_subsetpartition___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_5khmer_6_khmer_20_new_subsetpartition___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  struct __pyx_obj_5khmer_6_khmer__new_hashbits *__pyx_v_hb = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__arg,0};
  __Pyx_RefNannySetupContext("__cinit__");
  {
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":955
 *    cdef SubsetPartition *thisptr
 *    def __cinit__(self, arg=None):
 *       if arg is not None:             # <<<<<<<<<<<<<<
 *          hb = <_new_hashbits> arg
 *          self.thisptr = new SubsetPartition(&hb.thisptr[0])
 */
  __pyx_t_1 = (__pyx_v_arg != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":956
 *    def __cinit__(self, arg=None):
 *       if arg is not None:
 *          hb = <_new_hashbits> arg             # <<<<<<<<<<<<<<
 *          self.thisptr = new SubsetPartition(&hb.thisptr[0])
 *    def merge(self, _new_subsetpartition sp):
 */
    __Pyx_INCREF(((PyObject *)((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_arg)));
    __pyx_v_hb = ((struct __pyx_obj_5khmer_6_khmer__new_hashbits *)__pyx_v_arg);

    /* "_khmermodule.pyx":957
 *       if arg is not None:
 *          hb = <_new_hashbits> arg
 *          self.thisptr = new SubsetPartition(&hb.thisptr[0])             # <<<<<<<<<<<<<<
 *    def merge(self, _new_subsetpartition sp):
 *       self.thisptr.merge(sp.thisptr)
 */
    ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr = new khmer::SubsetPartition((&(__pyx_v_hb->thisptr[0])));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = 0;
  __Pyx_XDECREF((PyObject *)__pyx_v_hb);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":958
 *          hb = <_new_hashbits> arg
 *          self.thisptr = new SubsetPartition(&hb.thisptr[0])
 *    def merge(self, _new_subsetpartition sp):             # <<<<<<<<<<<<<<
 *       self.thisptr.merge(sp.thisptr)
 *    def merge_from_disk(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_1merge(PyObject *__pyx_v_self, PyObject *__pyx_v_sp); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_1merge(PyObject *__pyx_v_self, PyObject *__pyx_v_sp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sp), __pyx_ptype_5khmer_6_khmer__new_subsetpartition, 1, "sp", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":959
 *          self.thisptr = new SubsetPartition(&hb.thisptr[0])
 *    def merge(self, _new_subsetpartition sp):
 *       self.thisptr.merge(sp.thisptr)             # <<<<<<<<<<<<<<
 *    def merge_from_disk(self, char* s):
 *       self.thisptr.merge_from_disk(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->merge(((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_sp)->thisptr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":960
 *    def merge(self, _new_subsetpartition sp):
 *       self.thisptr.merge(sp.thisptr)
 *    def merge_from_disk(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.merge_from_disk(s)
 *    def save_partitionmap(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_2merge_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_2merge_from_disk(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge_from_disk");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.merge_from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":961
 *       self.thisptr.merge(sp.thisptr)
 *    def merge_from_disk(self, char* s):
 *       self.thisptr.merge_from_disk(s)             # <<<<<<<<<<<<<<
 *    def save_partitionmap(self, char* s):
 *       self.thisptr.save_partitionmap(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->merge_from_disk(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":962
 *    def merge_from_disk(self, char* s):
 *       self.thisptr.merge_from_disk(s)
 *    def save_partitionmap(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.save_partitionmap(s)
 *    def load_partitionmap(self, char* s):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_3save_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_3save_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_partitionmap");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.save_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":963
 *       self.thisptr.merge_from_disk(s)
 *    def save_partitionmap(self, char* s):
 *       self.thisptr.save_partitionmap(s)             # <<<<<<<<<<<<<<
 *    def load_partitionmap(self, char* s):
 *       self.thisptr.load_partitionmap(s)
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->save_partitionmap(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":964
 *    def save_partitionmap(self, char* s):
 *       self.thisptr.save_partitionmap(s)
 *    def load_partitionmap(self, char* s):             # <<<<<<<<<<<<<<
 *       self.thisptr.load_partitionmap(s)
 *    def _validate_pmap(self):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_4load_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_4load_partitionmap(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_partitionmap");
  assert(__pyx_arg_s); {
    __pyx_v_s = PyBytes_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.load_partitionmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":965
 *       self.thisptr.save_partitionmap(s)
 *    def load_partitionmap(self, char* s):
 *       self.thisptr.load_partitionmap(s)             # <<<<<<<<<<<<<<
 *    def _validate_pmap(self):
 *       self.thisptr._validate_pmap()
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->load_partitionmap(__pyx_v_s);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":966
 *    def load_partitionmap(self, char* s):
 *       self.thisptr.load_partitionmap(s)
 *    def _validate_pmap(self):             # <<<<<<<<<<<<<<
 *       self.thisptr._validate_pmap()
 *    def do_partition(self, HashIntoType first_kmer, HashIntoType last_kmer, bool break_stop,
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_5_validate_pmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_5_validate_pmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_validate_pmap");

  /* "_khmermodule.pyx":967
 *       self.thisptr.load_partitionmap(s)
 *    def _validate_pmap(self):
 *       self.thisptr._validate_pmap()             # <<<<<<<<<<<<<<
 *    def do_partition(self, HashIntoType first_kmer, HashIntoType last_kmer, bool break_stop,
 *                     callback_obj=None):
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->_validate_pmap();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":968
 *    def _validate_pmap(self):
 *       self.thisptr._validate_pmap()
 *    def do_partition(self, HashIntoType first_kmer, HashIntoType last_kmer, bool break_stop,             # <<<<<<<<<<<<<<
 *                     callback_obj=None):
 *       global _callback_obj
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_6do_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_6do_partition(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_first_kmer;
  __pyx_t_5khmer_6_khmer_HashIntoType __pyx_v_last_kmer;
  bool __pyx_v_break_stop;
  PyObject *__pyx_v_callback_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__first_kmer,&__pyx_n_s__last_kmer,&__pyx_n_s__break_stop,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("do_partition");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":969
 *       self.thisptr._validate_pmap()
 *    def do_partition(self, HashIntoType first_kmer, HashIntoType last_kmer, bool break_stop,
 *                     callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__first_kmer);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__last_kmer);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("do_partition", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__break_stop);
        if (likely(values[2])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("do_partition", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "do_partition") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_first_kmer = __Pyx_PyInt_AsUnsignedLongLong(values[0]); if (unlikely((__pyx_v_first_kmer == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_last_kmer = __Pyx_PyInt_AsUnsignedLongLong(values[1]); if (unlikely((__pyx_v_last_kmer == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_break_stop = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_break_stop == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("do_partition", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.do_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":971
 *                     callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       self.thisptr.do_partition(first_kmer, last_kmer, break_stop, _report_fn, <void*>_callback_obj)
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":972
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       self.thisptr.do_partition(first_kmer, last_kmer, break_stop, _report_fn, <void*>_callback_obj)
 *    def count_partitions(self):
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":973
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       self.thisptr.do_partition(first_kmer, last_kmer, break_stop, _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 *    def count_partitions(self):
 *       cdef unsigned int n_partitions = 0
 */
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->do_partition(__pyx_v_first_kmer, __pyx_v_last_kmer, __pyx_v_break_stop, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.do_partition", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":974
 *          _callback_obj = callback_obj
 *       self.thisptr.do_partition(first_kmer, last_kmer, break_stop, _report_fn, <void*>_callback_obj)
 *    def count_partitions(self):             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_7count_partitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_7count_partitions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  unsigned int __pyx_v_n_partitions;
  unsigned int __pyx_v_n_unassigned;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_partitions");

  /* "_khmermodule.pyx":975
 *       self.thisptr.do_partition(first_kmer, last_kmer, break_stop, _report_fn, <void*>_callback_obj)
 *    def count_partitions(self):
 *       cdef unsigned int n_partitions = 0             # <<<<<<<<<<<<<<
 *       cdef unsigned int n_unassigned = 0
 *       self.thisptr.count_partitions(n_partitions, n_unassigned)
 */
  __pyx_v_n_partitions = 0;

  /* "_khmermodule.pyx":976
 *    def count_partitions(self):
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0             # <<<<<<<<<<<<<<
 *       self.thisptr.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned
 */
  __pyx_v_n_unassigned = 0;

  /* "_khmermodule.pyx":977
 *       cdef unsigned int n_partitions = 0
 *       cdef unsigned int n_unassigned = 0
 *       self.thisptr.count_partitions(n_partitions, n_unassigned)             # <<<<<<<<<<<<<<
 *       return n_partitions, n_unassigned
 *    def output_partitioned_file(self, infile, outfile,
 */
  ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->count_partitions(__pyx_v_n_partitions, __pyx_v_n_unassigned);

  /* "_khmermodule.pyx":978
 *       cdef unsigned int n_unassigned = 0
 *       self.thisptr.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned             # <<<<<<<<<<<<<<
 *    def output_partitioned_file(self, infile, outfile,
 *                                bool output_unassigned=0,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(__pyx_v_n_partitions); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_n_unassigned); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.count_partitions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_khmermodule.pyx":979
 *       self.thisptr.count_partitions(n_partitions, n_unassigned)
 *       return n_partitions, n_unassigned
 *    def output_partitioned_file(self, infile, outfile,             # <<<<<<<<<<<<<<
 *                                bool output_unassigned=0,
 *                                callback_obj=None):
 */

static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_8output_partitioned_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_8output_partitioned_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_infile = 0;
  PyObject *__pyx_v_outfile = 0;
  bool __pyx_v_output_unassigned;
  PyObject *__pyx_v_callback_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__infile,&__pyx_n_s__outfile,&__pyx_n_s__output_unassigned,&__pyx_n_s__callback_obj,0};
  __Pyx_RefNannySetupContext("output_partitioned_file");
  {
    PyObject* values[4] = {0,0,0,0};

    /* "_khmermodule.pyx":981
 *    def output_partitioned_file(self, infile, outfile,
 *                                bool output_unassigned=0,
 *                                callback_obj=None):             # <<<<<<<<<<<<<<
 *       global _callback_obj
 *       if callback_obj is not None:
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  0:
        values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__infile);
        if (likely(values[0])) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outfile);
        if (likely(values[1])) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("output_partitioned_file", 0, 2, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__output_unassigned);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__callback_obj);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "output_partitioned_file") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_infile = values[0];
    __pyx_v_outfile = values[1];
    if (values[2]) {
      __pyx_v_output_unassigned = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_output_unassigned == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_output_unassigned = ((bool)0);
    }
    __pyx_v_callback_obj = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("output_partitioned_file", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.output_partitioned_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "_khmermodule.pyx":983
 *                                callback_obj=None):
 *       global _callback_obj
 *       if callback_obj is not None:             # <<<<<<<<<<<<<<
 *          _callback_obj = callback_obj
 *       return self.thisptr.output_partitioned_file(infile, outfile,
 */
  __pyx_t_1 = (__pyx_v_callback_obj != Py_None);
  if (__pyx_t_1) {

    /* "_khmermodule.pyx":984
 *       global _callback_obj
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj             # <<<<<<<<<<<<<<
 *       return self.thisptr.output_partitioned_file(infile, outfile,
 *                                                   output_unassigned,
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, __pyx_v_callback_obj) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "_khmermodule.pyx":985
 *       if callback_obj is not None:
 *          _callback_obj = callback_obj
 *       return self.thisptr.output_partitioned_file(infile, outfile,             # <<<<<<<<<<<<<<
 *                                                   output_unassigned,
 *                                                   _report_fn, <void*>_callback_obj)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_AsString(__pyx_v_infile); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyBytes_AsString(__pyx_v_outfile); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":987
 *       return self.thisptr.output_partitioned_file(infile, outfile,
 *                                                   output_unassigned,
 *                                                   _report_fn, <void*>_callback_obj)             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s___callback_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((struct __pyx_obj_5khmer_6_khmer__new_subsetpartition *)__pyx_v_self)->thisptr->output_partitioned_file(__pyx_t_2, __pyx_t_3, __pyx_v_output_unassigned, __pyx_f_5khmer_6_khmer__report_fn, ((void *)__pyx_t_4)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("khmer._khmer._new_subsetpartition.output_partitioned_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5khmer_6_khmer__pre_partition_info(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_19_pre_partition_info___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer__pre_partition_info(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_6_khmer__pre_partition_info[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__pre_partition_info = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence__pre_partition_info = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__pre_partition_info = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer__pre_partition_info = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer__pre_partition_info = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer._pre_partition_info"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer__pre_partition_info), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer__pre_partition_info, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__pre_partition_info, /*tp_as_number*/
  &__pyx_tp_as_sequence__pre_partition_info, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__pre_partition_info, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer__pre_partition_info, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer__pre_partition_info, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer__pre_partition_info, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_6_khmer_new_ktable(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_10new_ktable___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer_new_ktable(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_5khmer_6_khmer_new_ktable(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_5khmer_6_khmer_new_ktable[] = {
  {__Pyx_NAMESTR("count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_1count, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_2consume, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_3get, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_5set, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_6set, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("forward_hash"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_7forward_hash, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("forward_hash_no_rc"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_8forward_hash_no_rc, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("reverse_hash"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_9reverse_hash, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("max_hash"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_10max_hash, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("n_entries"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_11n_entries, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("ksize"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_13ksize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_14clear, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("update"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_15update, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("intersect"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_ktable_16intersect, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_new_ktable = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_new_ktable = {
  __pyx_pf_5khmer_6_khmer_10new_ktable_12__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5khmer_6_khmer_new_ktable, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_new_ktable = {
  __pyx_pf_5khmer_6_khmer_10new_ktable_12__len__, /*mp_length*/
  __pyx_pf_5khmer_6_khmer_10new_ktable_4__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_new_ktable = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer_new_ktable = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer.new_ktable"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer_new_ktable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer_new_ktable, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_new_ktable, /*tp_as_number*/
  &__pyx_tp_as_sequence_new_ktable, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_new_ktable, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_new_ktable, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer_new_ktable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer_new_ktable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_6_khmer_new_readmask(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_12new_readmask___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer_new_readmask(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_6_khmer_new_readmask[] = {
  {__Pyx_NAMESTR("invert"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_1invert, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("tablesize"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_2tablesize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("n_kept"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_3n_kept, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_4get, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_5set, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("do_and"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_6do_and, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_7save, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_8load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_9merge, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter_fasta_file"), (PyCFunction)__pyx_pf_5khmer_6_khmer_12new_readmask_10filter_fasta_file, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_new_readmask = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_new_readmask = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_new_readmask = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_new_readmask = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer_new_readmask = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer.new_readmask"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer_new_readmask), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer_new_readmask, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_new_readmask, /*tp_as_number*/
  &__pyx_tp_as_sequence_new_readmask, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_new_readmask, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_new_readmask, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer_new_readmask, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer_new_readmask, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_6_khmer_new_minmax(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_10new_minmax___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer_new_minmax(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_6_khmer_new_minmax[] = {
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_1save, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_2load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_3merge, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("clear"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_4clear, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_min"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_5get_min, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_max"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_6get_max, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("add_max"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_7add_max, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("add_min"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_8add_min, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("tablesize"), (PyCFunction)__pyx_pf_5khmer_6_khmer_10new_minmax_9tablesize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_new_minmax = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_new_minmax = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_new_minmax = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_new_minmax = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer_new_minmax = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer.new_minmax"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer_new_minmax), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer_new_minmax, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_new_minmax, /*tp_as_number*/
  &__pyx_tp_as_sequence_new_minmax, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_new_minmax, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_new_minmax, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer_new_minmax, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer_new_minmax, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_6_khmer__new_hashbits(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_13_new_hashbits___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer__new_hashbits(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_5khmer_6_khmer__new_hashbits(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_5khmer_6_khmer__new_hashbits[] = {
  {__Pyx_NAMESTR("n_occupied"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_1n_occupied, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("n_unique_kmers"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_2n_unique_kmers, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("ksize"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_3ksize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_4count, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_5count, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_6get, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("n_tags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_8n_tags, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_9save, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_10load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save_tagset"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_11save_tagset, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_tagset"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_12load_tagset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count_kmers_within_radius"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_13count_kmers_within_radius, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("calc_connected_graph_size"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_14calc_connected_graph_size, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_partitioned_fasta"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_15consume_partitioned_fasta, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_fasta_and_traverse"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_16consume_fasta_and_traverse, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("traverse_from_reads"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_17traverse_from_reads, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_fasta_and_tag_with_stoptags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_18consume_fasta_and_tag_with_stoptags, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_fasta_and_tag"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_19consume_fasta_and_tag, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_20consume, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_fasta"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_21consume_fasta, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("do_subset_partition"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_22do_subset_partition, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_23save_partitionmap, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save_subset_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_24save_subset_partitionmap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_subset_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_25load_subset_partitionmap, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_26load_partitionmap, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_validate_subset_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_27_validate_subset_partitionmap, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("add_tag"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_28add_tag, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("add_stop_tag"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_29add_stop_tag, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_stop_tags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_30load_stop_tags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save_stop_tags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_31save_stop_tags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("print_stop_tags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_32print_stop_tags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("output_partitions"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_33output_partitions, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count_partitions"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_34count_partitions, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("subset_count_partitions"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_35subset_count_partitions, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge_subset_from_disk"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_36merge_subset_from_disk, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge_subset"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_37merge_subset, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge2_subset"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_38merge2_subset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge2_subset_from_disk"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_39merge2_subset_from_disk, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("join_partitions_by_path"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_40join_partitions_by_path, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("divide_tags_into_subsets"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_41divide_tags_into_subsets, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("kmer_degree"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_42kmer_degree, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_partition_id"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_43set_partition_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("join_partitions"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_44join_partitions, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_partition_id"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_45get_partition_id, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("is_single_partition"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_46is_single_partition, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_set_tag_density"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_47_set_tag_density, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_get_tag_density"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_48_get_tag_density, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("trim_on_degree"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_49trim_on_degree, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("trim_on_sodd"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_50trim_on_sodd, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("trim_on_stoptags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_51trim_on_stoptags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("trim_on_density_explosion"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_52trim_on_density_explosion, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("identify_stoptags_by_position"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_53identify_stoptags_by_position, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("hashsizes"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_54hashsizes, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("extract_unique_paths"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_55extract_unique_paths, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter_if_present"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_56filter_if_present, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_validate_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_57_validate_partitionmap, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("hitraverse_to_stoptags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_58hitraverse_to_stoptags, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find_radius_for_volume"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_59find_radius_for_volume, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count_kmers_on_radius"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_60count_kmers_on_radius, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("repartition_largest_partition"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_61repartition_largest_partition, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("subset_partition_size_distribution"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_62subset_partition_size_distribution, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("find_all_tags"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_63find_all_tags, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("assign_partition_id"), (PyCFunction)__pyx_pf_5khmer_6_khmer_13_new_hashbits_64assign_partition_id, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__new_hashbits = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence__new_hashbits = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5khmer_6_khmer__new_hashbits, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__new_hashbits = {
  0, /*mp_length*/
  __pyx_pf_5khmer_6_khmer_13_new_hashbits_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer__new_hashbits = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer__new_hashbits = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer._new_hashbits"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer__new_hashbits), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer__new_hashbits, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__new_hashbits, /*tp_as_number*/
  &__pyx_tp_as_sequence__new_hashbits, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__new_hashbits, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer__new_hashbits, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer__new_hashbits, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer__new_hashbits, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_6_khmer__new_counting_hash(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_18_new_counting_hash___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer__new_counting_hash(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_5khmer_6_khmer__new_counting_hash(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_5khmer_6_khmer__new_counting_hash[] = {
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_1save, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_2load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("n_occupied"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_3n_occupied, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("n_entries"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_4n_entries, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("ksize"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_5ksize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_6consume, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_7count, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_8get_count, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_9get, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_max_count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_11get_max_count, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_min_count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_12get_min_count, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("hashsizes"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_13hashsizes, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("output_fasta_kmer_pos_freq"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_14output_fasta_kmer_pos_freq, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("abundance_distribution"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_15abundance_distribution, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("fasta_file_to_minmax"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_16fasta_file_to_minmax, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter_fasta_file_any"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_17filter_fasta_file_any, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter_fasta_file_all"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_18filter_fasta_file_all, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter_fasta_file_limit_n"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_19filter_fasta_file_limit_n, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter_fasta_file_run"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_20filter_fasta_file_run, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("fasta_count_kmers_by_position"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_21fasta_count_kmers_by_position, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_fasta"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_22consume_fasta, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("consume_fasta_build_readmask"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_23consume_fasta_build_readmask, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("fasta_dump_kmers_by_abundance"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_24fasta_dump_kmers_by_abundance, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_use_bigcount"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_25set_use_bigcount, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_use_bigcount"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_26get_use_bigcount, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("max_hamming1_count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_27max_hamming1_count, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("trim_on_abundance"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_28trim_on_abundance, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_kmer_abund_abs_deviation"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_29get_kmer_abund_abs_deviation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_kmer_abund_mean"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_30get_kmer_abund_mean, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_median_count"), (PyCFunction)__pyx_pf_5khmer_6_khmer_18_new_counting_hash_31get_median_count, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__new_counting_hash = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence__new_counting_hash = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5khmer_6_khmer__new_counting_hash, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__new_counting_hash = {
  0, /*mp_length*/
  __pyx_pf_5khmer_6_khmer_18_new_counting_hash_10__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer__new_counting_hash = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer__new_counting_hash = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer._new_counting_hash"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer__new_counting_hash), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer__new_counting_hash, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__new_counting_hash, /*tp_as_number*/
  &__pyx_tp_as_sequence__new_counting_hash, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__new_counting_hash, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer__new_counting_hash, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer__new_counting_hash, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer__new_counting_hash, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_5khmer_6_khmer__new_subsetpartition(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pf_5khmer_6_khmer_20_new_subsetpartition___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5khmer_6_khmer__new_subsetpartition(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5khmer_6_khmer__new_subsetpartition[] = {
  {__Pyx_NAMESTR("merge"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_1merge, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("merge_from_disk"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_2merge_from_disk, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_3save_partitionmap, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load_partitionmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_4load_partitionmap, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_validate_pmap"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_5_validate_pmap, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("do_partition"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_6do_partition, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("count_partitions"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_7count_partitions, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("output_partitioned_file"), (PyCFunction)__pyx_pf_5khmer_6_khmer_20_new_subsetpartition_8output_partitioned_file, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__new_subsetpartition = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence__new_subsetpartition = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__new_subsetpartition = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer__new_subsetpartition = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_5khmer_6_khmer__new_subsetpartition = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("khmer._khmer._new_subsetpartition"), /*tp_name*/
  sizeof(struct __pyx_obj_5khmer_6_khmer__new_subsetpartition), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5khmer_6_khmer__new_subsetpartition, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__new_subsetpartition, /*tp_as_number*/
  &__pyx_tp_as_sequence__new_subsetpartition, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__new_subsetpartition, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer__new_subsetpartition, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5khmer_6_khmer__new_subsetpartition, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5khmer_6_khmer__new_subsetpartition, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_khmer"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___callback_obj, __pyx_k___callback_obj, sizeof(__pyx_k___callback_obj), 0, 0, 1, 1},
  {&__pyx_n_s___validate_pmap, __pyx_k___validate_pmap, sizeof(__pyx_k___validate_pmap), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__arg, __pyx_k__arg, sizeof(__pyx_k__arg), 0, 0, 1, 1},
  {&__pyx_n_s__arg1, __pyx_k__arg1, sizeof(__pyx_k__arg1), 0, 0, 1, 1},
  {&__pyx_n_s__arg2, __pyx_k__arg2, sizeof(__pyx_k__arg2), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__big_threshold, __pyx_k__big_threshold, sizeof(__pyx_k__big_threshold), 0, 0, 1, 1},
  {&__pyx_n_s__break_on_circum, __pyx_k__break_on_circum, sizeof(__pyx_k__break_on_circum), 0, 0, 1, 1},
  {&__pyx_n_s__break_stop, __pyx_k__break_stop, sizeof(__pyx_k__break_stop), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__callback_obj, __pyx_k__callback_obj, sizeof(__pyx_k__callback_obj), 0, 0, 1, 1},
  {&__pyx_n_s__ch, __pyx_k__ch, sizeof(__pyx_k__ch), 0, 0, 1, 1},
  {&__pyx_n_s__clear_tags, __pyx_k__clear_tags, sizeof(__pyx_k__clear_tags), 0, 0, 1, 1},
  {&__pyx_n_s__counting_o, __pyx_k__counting_o, sizeof(__pyx_k__counting_o), 0, 0, 1, 1},
  {&__pyx_n_s__cutoff, __pyx_k__cutoff, sizeof(__pyx_k__cutoff), 0, 0, 1, 1},
  {&__pyx_n_s__distance, __pyx_k__distance, sizeof(__pyx_k__distance), 0, 0, 1, 1},
  {&__pyx_n_s__do_partition, __pyx_k__do_partition, sizeof(__pyx_k__do_partition), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__filename, __pyx_k__filename, sizeof(__pyx_k__filename), 0, 0, 1, 1},
  {&__pyx_n_s__first_kmer, __pyx_k__first_kmer, sizeof(__pyx_k__first_kmer), 0, 0, 1, 1},
  {&__pyx_n_s__forward_hash, __pyx_k__forward_hash, sizeof(__pyx_k__forward_hash), 0, 0, 1, 1},
  {&__pyx_n_s__forward_hash_no_rc, __pyx_k__forward_hash_no_rc, sizeof(__pyx_k__forward_hash_no_rc), 0, 0, 1, 1},
  {&__pyx_n_s__frequency, __pyx_k__frequency, sizeof(__pyx_k__frequency), 0, 0, 1, 1},
  {&__pyx_n_s__h, __pyx_k__h, sizeof(__pyx_k__h), 0, 0, 1, 1},
  {&__pyx_n_s__hb, __pyx_k__hb, sizeof(__pyx_k__hb), 0, 0, 1, 1},
  {&__pyx_n_s__i, __pyx_k__i, sizeof(__pyx_k__i), 0, 0, 1, 1},
  {&__pyx_n_s__in_readmask, __pyx_k__in_readmask, sizeof(__pyx_k__in_readmask), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__infile, __pyx_k__infile, sizeof(__pyx_k__infile), 0, 0, 1, 1},
  {&__pyx_n_s__input, __pyx_k__input, sizeof(__pyx_k__input), 0, 0, 1, 1},
  {&__pyx_n_s__inputfile, __pyx_k__inputfile, sizeof(__pyx_k__inputfile), 0, 0, 1, 1},
  {&__pyx_n_s__k, __pyx_k__k, sizeof(__pyx_k__k), 0, 0, 1, 1},
  {&__pyx_n_s__kmer, __pyx_k__kmer, sizeof(__pyx_k__kmer), 0, 0, 1, 1},
  {&__pyx_n_s__ksize, __pyx_k__ksize, sizeof(__pyx_k__ksize), 0, 0, 1, 1},
  {&__pyx_n_s__last_kmer, __pyx_k__last_kmer, sizeof(__pyx_k__last_kmer), 0, 0, 1, 1},
  {&__pyx_n_s__limit_by_count, __pyx_k__limit_by_count, sizeof(__pyx_k__limit_by_count), 0, 0, 1, 1},
  {&__pyx_n_s__lower, __pyx_k__lower, sizeof(__pyx_k__lower), 0, 0, 1, 1},
  {&__pyx_n_s__lower_bound, __pyx_k__lower_bound, sizeof(__pyx_k__lower_bound), 0, 0, 1, 1},
  {&__pyx_n_s__max_count, __pyx_k__max_count, sizeof(__pyx_k__max_count), 0, 0, 1, 1},
  {&__pyx_n_s__max_degree, __pyx_k__max_degree, sizeof(__pyx_k__max_degree), 0, 0, 1, 1},
  {&__pyx_n_s__max_radius, __pyx_k__max_radius, sizeof(__pyx_k__max_radius), 0, 0, 1, 1},
  {&__pyx_n_s__max_read_len, __pyx_k__max_read_len, sizeof(__pyx_k__max_read_len), 0, 0, 1, 1},
  {&__pyx_n_s__max_size, __pyx_k__max_size, sizeof(__pyx_k__max_size), 0, 0, 1, 1},
  {&__pyx_n_s__max_sodd, __pyx_k__max_sodd, sizeof(__pyx_k__max_sodd), 0, 0, 1, 1},
  {&__pyx_n_s__max_volume, __pyx_k__max_volume, sizeof(__pyx_k__max_volume), 0, 0, 1, 1},
  {&__pyx_n_s__mean, __pyx_k__mean, sizeof(__pyx_k__mean), 0, 0, 1, 1},
  {&__pyx_n_s__merge_from_disk, __pyx_k__merge_from_disk, sizeof(__pyx_k__merge_from_disk), 0, 0, 1, 1},
  {&__pyx_n_s__min_count, __pyx_k__min_count, sizeof(__pyx_k__min_count), 0, 0, 1, 1},
  {&__pyx_n_s__min_length, __pyx_k__min_length, sizeof(__pyx_k__min_length), 0, 0, 1, 1},
  {&__pyx_n_s__min_unique_f, __pyx_k__min_unique_f, sizeof(__pyx_k__min_unique_f), 0, 0, 1, 1},
  {&__pyx_n_s__minmax, __pyx_k__minmax, sizeof(__pyx_k__minmax), 0, 0, 1, 1},
  {&__pyx_n_s__n, __pyx_k__n, sizeof(__pyx_k__n), 0, 0, 1, 1},
  {&__pyx_n_s__n1, __pyx_k__n1, sizeof(__pyx_k__n1), 0, 0, 1, 1},
  {&__pyx_n_s__n2, __pyx_k__n2, sizeof(__pyx_k__n2), 0, 0, 1, 1},
  {&__pyx_n_s__outfile, __pyx_k__outfile, sizeof(__pyx_k__outfile), 0, 0, 1, 1},
  {&__pyx_n_s__output, __pyx_k__output, sizeof(__pyx_k__output), 0, 0, 1, 1},
  {&__pyx_n_s__output_unassigned, __pyx_k__output_unassigned, sizeof(__pyx_k__output_unassigned), 0, 0, 1, 1},
  {&__pyx_n_s__p, __pyx_k__p, sizeof(__pyx_k__p), 0, 0, 1, 1},
  {&__pyx_n_s__p1, __pyx_k__p1, sizeof(__pyx_k__p1), 0, 0, 1, 1},
  {&__pyx_n_s__p2, __pyx_k__p2, sizeof(__pyx_k__p2), 0, 0, 1, 1},
  {&__pyx_n_s__primes, __pyx_k__primes, sizeof(__pyx_k__primes), 0, 0, 1, 1},
  {&__pyx_n_s__radius, __pyx_k__radius, sizeof(__pyx_k__radius), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__readmask, __pyx_k__readmask, sizeof(__pyx_k__readmask), 0, 0, 1, 1},
  {&__pyx_n_s__reverse_hash, __pyx_k__reverse_hash, sizeof(__pyx_k__reverse_hash), 0, 0, 1, 1},
  {&__pyx_n_s__rm, __pyx_k__rm, sizeof(__pyx_k__rm), 0, 0, 1, 1},
  {&__pyx_n_s__runlength, __pyx_k__runlength, sizeof(__pyx_k__runlength), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__s1, __pyx_k__s1, sizeof(__pyx_k__s1), 0, 0, 1, 1},
  {&__pyx_n_s__s2, __pyx_k__s2, sizeof(__pyx_k__s2), 0, 0, 1, 1},
  {&__pyx_n_s__save_partitionmap, __pyx_k__save_partitionmap, sizeof(__pyx_k__save_partitionmap), 0, 0, 1, 1},
  {&__pyx_n_s__seq, __pyx_k__seq, sizeof(__pyx_k__seq), 0, 0, 1, 1},
  {&__pyx_n_s__setval, __pyx_k__setval, sizeof(__pyx_k__setval), 0, 0, 1, 1},
  {&__pyx_n_s__start, __pyx_k__start, sizeof(__pyx_k__start), 0, 0, 1, 1},
  {&__pyx_n_s__stop, __pyx_k__stop, sizeof(__pyx_k__stop), 0, 0, 1, 1},
  {&__pyx_n_s__subset, __pyx_k__subset, sizeof(__pyx_k__subset), 0, 0, 1, 1},
  {&__pyx_n_s__subset_o, __pyx_k__subset_o, sizeof(__pyx_k__subset_o), 0, 0, 1, 1},
  {&__pyx_n_s__subset_obj, __pyx_k__subset_obj, sizeof(__pyx_k__subset_obj), 0, 0, 1, 1},
  {&__pyx_n_s__thisptr, __pyx_k__thisptr, sizeof(__pyx_k__thisptr), 0, 0, 1, 1},
  {&__pyx_n_s__threshold, __pyx_k__threshold, sizeof(__pyx_k__threshold), 0, 0, 1, 1},
  {&__pyx_n_s__total_reads, __pyx_k__total_reads, sizeof(__pyx_k__total_reads), 0, 0, 1, 1},
  {&__pyx_n_s__transfer_threshold, __pyx_k__transfer_threshold, sizeof(__pyx_k__transfer_threshold), 0, 0, 1, 1},
  {&__pyx_n_s__update_readmask, __pyx_k__update_readmask, sizeof(__pyx_k__update_readmask), 0, 0, 1, 1},
  {&__pyx_n_s__upper, __pyx_k__upper, sizeof(__pyx_k__upper), 0, 0, 1, 1},
  {&__pyx_n_s__upper_bound, __pyx_k__upper_bound, sizeof(__pyx_k__upper_bound), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_khmer(void); /*proto*/
PyMODINIT_FUNC init_khmer(void)
#else
PyMODINIT_FUNC PyInit__khmer(void); /*proto*/
PyMODINIT_FUNC PyInit__khmer(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__khmer(void)");
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_khmer"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_khmer___khmer) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer__pre_partition_info) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_pre_partition_info", (PyObject *)&__pyx_type_5khmer_6_khmer__pre_partition_info) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer__pre_partition_info = &__pyx_type_5khmer_6_khmer__pre_partition_info;
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer_new_ktable) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "new_ktable", (PyObject *)&__pyx_type_5khmer_6_khmer_new_ktable) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer_new_ktable = &__pyx_type_5khmer_6_khmer_new_ktable;
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer_new_readmask) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "new_readmask", (PyObject *)&__pyx_type_5khmer_6_khmer_new_readmask) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer_new_readmask = &__pyx_type_5khmer_6_khmer_new_readmask;
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer_new_minmax) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "new_minmax", (PyObject *)&__pyx_type_5khmer_6_khmer_new_minmax) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer_new_minmax = &__pyx_type_5khmer_6_khmer_new_minmax;
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer__new_hashbits) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_new_hashbits", (PyObject *)&__pyx_type_5khmer_6_khmer__new_hashbits) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer__new_hashbits = &__pyx_type_5khmer_6_khmer__new_hashbits;
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer__new_counting_hash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_new_counting_hash", (PyObject *)&__pyx_type_5khmer_6_khmer__new_counting_hash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer__new_counting_hash = &__pyx_type_5khmer_6_khmer__new_counting_hash;
  if (PyType_Ready(&__pyx_type_5khmer_6_khmer__new_subsetpartition) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_new_subsetpartition", (PyObject *)&__pyx_type_5khmer_6_khmer__new_subsetpartition) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5khmer_6_khmer__new_subsetpartition = &__pyx_type_5khmer_6_khmer__new_subsetpartition;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_khmermodule.pyx":294
 *       void extract_unique_paths(char*, unsigned int, float, vector[string]&)
 * 
 * _callback_obj = None             # <<<<<<<<<<<<<<
 * 
 * cdef void _report_fn(const_char_ptr info, void* data,
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___callback_obj, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_khmermodule.pyx":301
 *    _callback_obj(info, n_reads, other)
 * 
 * def set_reporting_callback(o):             # <<<<<<<<<<<<<<
 *    global _callback_obj
 *    _callback_obj = o
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_6_khmer_set_reporting_callback, NULL, __pyx_n_s_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_khmermodule.pyx":645
 *       return med, average, stddev
 * 
 * def forward_hash(char* s, WordLength k):             # <<<<<<<<<<<<<<
 *    return _hash(s, k)
 * def forward_hash_no_rc(char* s, WordLength k):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_6_khmer_1forward_hash, NULL, __pyx_n_s_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__forward_hash, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_khmermodule.pyx":647
 * def forward_hash(char* s, WordLength k):
 *    return _hash(s, k)
 * def forward_hash_no_rc(char* s, WordLength k):             # <<<<<<<<<<<<<<
 *    return _hash_forward(s, k)
 * def reverse_hash(HashIntoType h, WordLength k):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_6_khmer_2forward_hash_no_rc, NULL, __pyx_n_s_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__forward_hash_no_rc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_khmermodule.pyx":649
 * def forward_hash_no_rc(char* s, WordLength k):
 *    return _hash_forward(s, k)
 * def reverse_hash(HashIntoType h, WordLength k):             # <<<<<<<<<<<<<<
 *    cdef string s = _revhash(h, k)
 *    cdef char *cstr = <char *>malloc(s.length() + 1)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5khmer_6_khmer_3reverse_hash, NULL, __pyx_n_s_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__reverse_hash, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_khmermodule.pyx":1
 * from libcpp.map cimport map             # <<<<<<<<<<<<<<
 * from libcpp.pair cimport pair
 * from libcpp.set cimport set
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init khmer._khmer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init khmer._khmer");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %"PY_FORMAT_SIZE_T"d positional argument%s (%"PY_FORMAT_SIZE_T"d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname, int __pyx_clineno,
                               int __pyx_lineno, const char *__pyx_filename) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
